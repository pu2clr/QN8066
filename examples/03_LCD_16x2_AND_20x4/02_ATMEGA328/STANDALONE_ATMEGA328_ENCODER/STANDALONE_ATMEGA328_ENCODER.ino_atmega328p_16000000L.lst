
/private/var/folders/df/770tqgsn7n10bxgwgd7_0k9r0000gn/T/arduino/sketches/8E2F3C6BA43F92B8945A34B8981F5A40/STANDALONE_ATMEGA328_ENCODER.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	0c 94 67 00 	jmp	0xce	; 0xce <__ctors_end>
       4:	0c 94 65 0c 	jmp	0x18ca	; 0x18ca <__vector_1>
       8:	0c 94 3e 0c 	jmp	0x187c	; 0x187c <__vector_2>
       c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      10:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      14:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      18:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      1c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      20:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      24:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      28:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      2c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      30:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      34:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      38:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      3c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      40:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <__vector_16>
      44:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      48:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      4c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      50:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      54:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      58:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      5c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      60:	0c 94 8c 0c 	jmp	0x1918	; 0x1918 <__vector_24>
      64:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>

00000068 <__trampolines_end>:
__trampolines_start():
      68:	00 00       	nop
      6a:	00 00       	nop
      6c:	24 00       	.word	0x0024	; ????
      6e:	27 00       	.word	0x0027	; ????
      70:	2a 00       	.word	0x002a	; ????

00000072 <port_to_output_PGM>:
      72:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

0000007c <port_to_input_PGM>:
      7c:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

00000086 <digital_pin_to_port_PGM>:
      86:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      96:	03 03 03 03 02 02 03                                .......

0000009d <digital_pin_to_bit_mask_PGM>:
      9d:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      ad:	04 08 10 20 40 80 40                                ... @.@

000000b4 <digital_pin_to_timer_PGM>:
      b4:	00 00 00 09 00 03 02 00 00 04 05 08 00 00 00 00     ................
	...

000000cc <__ctors_start>:
__ctors_start():
      cc:	b7 0d       	add	r27, r7

000000ce <__ctors_end>:
__dtors_end():
      ce:	11 24       	eor	r1, r1
      d0:	1f be       	out	0x3f, r1	; 63
      d2:	cf ef       	ldi	r28, 0xFF	; 255
      d4:	d8 e0       	ldi	r29, 0x08	; 8
      d6:	de bf       	out	0x3e, r29	; 62
      d8:	cd bf       	out	0x3d, r28	; 61

000000da <__do_copy_data>:
__do_copy_data():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2409
      da:	15 e0       	ldi	r17, 0x05	; 5
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2410
      dc:	a0 e0       	ldi	r26, 0x00	; 0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2411
      de:	b1 e0       	ldi	r27, 0x01	; 1
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2412
      e0:	ee ed       	ldi	r30, 0xDE	; 222
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2413
      e2:	fa e2       	ldi	r31, 0x2A	; 42
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2414
      e4:	02 c0       	rjmp	.+4      	; 0xea <__do_copy_data+0x10>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2417
      e6:	05 90       	lpm	r0, Z+
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2422
      e8:	0d 92       	st	X+, r0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2424
      ea:	ac 30       	cpi	r26, 0x0C	; 12
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2425
      ec:	b1 07       	cpc	r27, r17
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2426
      ee:	d9 f7       	brne	.-10     	; 0xe6 <__do_copy_data+0xc>

000000f0 <__do_clear_bss>:
__do_clear_bss():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
      f0:	26 e0       	ldi	r18, 0x06	; 6
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
      f2:	ac e0       	ldi	r26, 0x0C	; 12
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
      f4:	b5 e0       	ldi	r27, 0x05	; 5
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
      f6:	01 c0       	rjmp	.+2      	; 0xfa <.do_clear_bss_start>

000000f8 <.do_clear_bss_loop>:
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
      f8:	1d 92       	st	X+, r1

000000fa <.do_clear_bss_start>:
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
      fa:	a3 31       	cpi	r26, 0x13	; 19
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
      fc:	b2 07       	cpc	r27, r18
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
      fe:	e1 f7       	brne	.-8      	; 0xf8 <.do_clear_bss_loop>

00000100 <__do_global_ctors>:
__do_global_ctors():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
     100:	10 e0       	ldi	r17, 0x00	; 0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
     102:	c7 e6       	ldi	r28, 0x67	; 103
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
     104:	d0 e0       	ldi	r29, 0x00	; 0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
     106:	04 c0       	rjmp	.+8      	; 0x110 <__do_global_ctors+0x10>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
     108:	21 97       	sbiw	r28, 0x01	; 1
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
     10a:	fe 01       	movw	r30, r28
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
     10c:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <__tablejump2__>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
     110:	c6 36       	cpi	r28, 0x66	; 102
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
     112:	d1 07       	cpc	r29, r17
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
     114:	c9 f7       	brne	.-14     	; 0x108 <__do_global_ctors+0x8>
     116:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <main>
     11a:	0c 94 6d 15 	jmp	0x2ada	; 0x2ada <_exit>

0000011e <__bad_interrupt>:
__vector_22():
     11e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000122 <TwoWire::endTransmission(unsigned char) [clone .constprop.65]>:
_ZN7TwoWire15endTransmissionEh.constprop.65():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/Wire.cpp:222
//  the bus tenure has been properly ended with a STOP. It
//  is very possible to leave the bus in a hung state if
//  no call to endTransmission(true) is made. Some I2C
//  devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
     122:	28 2f       	mov	r18, r24
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/Wire.cpp:225
{
  // transmit buffer (blocking)
  uint8_t ret = twi_writeTo(txAddress, txBuffer, txBufferLength, 1, sendStop);
     124:	90 91 b9 05 	lds	r25, 0x05B9	; 0x8005b9 <TwoWire::txBufferLength>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:269
 */
uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait, uint8_t sendStop)
{
  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < length){
    return 1;
     128:	81 e0       	ldi	r24, 0x01	; 1
twi_writeTo():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:268
 *          5 .. timeout
 */
uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait, uint8_t sendStop)
{
  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < length){
     12a:	91 32       	cpi	r25, 0x21	; 33
     12c:	08 f0       	brcs	.+2      	; 0x130 <TwoWire::endTransmission(unsigned char) [clone .constprop.65]+0xe>
     12e:	42 c0       	rjmp	.+132    	; 0x1b4 <TwoWire::endTransmission(unsigned char) [clone .constprop.65]+0x92>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:282
        twi_handleTimeout(twi_do_reset_on_timeout);
        return (5);
      }
    }
  #else
    while(TWI_READY != twi_state){
     130:	80 91 95 05 	lds	r24, 0x0595	; 0x800595 <twi_state>
     134:	81 11       	cpse	r24, r1
     136:	fc cf       	rjmp	.-8      	; 0x130 <TwoWire::endTransmission(unsigned char) [clone .constprop.65]+0xe>
_ZN7TwoWire15endTransmissionEh.constprop.65():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/Wire.cpp:225
     138:	80 91 b8 05 	lds	r24, 0x05B8	; 0x8005b8 <TwoWire::txAddress>
twi_writeTo():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:287
      continue;
    }
  #endif

  twi_state = TWI_MTX;
     13c:	32 e0       	ldi	r19, 0x02	; 2
     13e:	30 93 95 05 	sts	0x0595, r19	; 0x800595 <twi_state>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:288
  twi_sendStop = sendStop;
     142:	20 93 94 05 	sts	0x0594, r18	; 0x800594 <twi_sendStop>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:290
  // reset error state (0xFF.. no error occurred)
  twi_error = 0xFF;
     146:	2f ef       	ldi	r18, 0xFF	; 255
     148:	20 93 93 05 	sts	0x0593, r18	; 0x800593 <twi_error>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:293

  // initialize buffer iteration vars
  twi_masterBuffer = data;
     14c:	28 e9       	ldi	r18, 0x98	; 152
     14e:	35 e0       	ldi	r19, 0x05	; 5
     150:	30 93 92 05 	sts	0x0592, r19	; 0x800592 <twi_masterBuffer+0x1>
     154:	20 93 91 05 	sts	0x0591, r18	; 0x800591 <twi_masterBuffer>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:294
  twi_masterBufferIndex = 0;
     158:	10 92 90 05 	sts	0x0590, r1	; 0x800590 <twi_masterBufferIndex>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:295
  twi_masterBufferLength = length;
     15c:	90 93 8f 05 	sts	0x058F, r25	; 0x80058f <twi_masterBufferLength>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:298

  // build sla+w, slave device address + w bit
  twi_slarw = TW_WRITE;
     160:	10 92 8e 05 	sts	0x058E, r1	; 0x80058e <twi_slarw>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:299
  twi_slarw |= address << 1;
     164:	90 91 8e 05 	lds	r25, 0x058E	; 0x80058e <twi_slarw>
     168:	88 0f       	add	r24, r24
     16a:	89 2b       	or	r24, r25
     16c:	80 93 8e 05 	sts	0x058E, r24	; 0x80058e <twi_slarw>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:304

  // if we're in a repeated start, then we've already sent the START
  // in the ISR. Don't do it again.
  //
  if (true == twi_inRepStart) {
     170:	80 91 8d 05 	lds	r24, 0x058D	; 0x80058d <twi_inRepStart>
     174:	81 30       	cpi	r24, 0x01	; 1
     176:	29 f5       	brne	.+74     	; 0x1c2 <TwoWire::endTransmission(unsigned char) [clone .constprop.65]+0xa0>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:311
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent ourselves, and that would really confuse things.
    twi_inRepStart = false; // Remember, we're dealing with an ASYNC ISR
     178:	10 92 8d 05 	sts	0x058D, r1	; 0x80058d <twi_inRepStart>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:322
          return (5);
        }
      } while(TWCR & _BV(TWWC));
    #else
      do {
        TWDR = twi_slarw;
     17c:	80 91 8e 05 	lds	r24, 0x058E	; 0x80058e <twi_slarw>
     180:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:323
      } while(TWCR & _BV(TWWC));
     184:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
     188:	83 fd       	sbrc	r24, 3
     18a:	f8 cf       	rjmp	.-16     	; 0x17c <TwoWire::endTransmission(unsigned char) [clone .constprop.65]+0x5a>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:325
    #endif
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
     18c:	85 ec       	ldi	r24, 0xC5	; 197
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:329
  }
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA); // enable INTs
     18e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:341
        twi_handleTimeout(twi_do_reset_on_timeout);
        return (5);
      }
    }
  #else
    while(wait && (TWI_MTX == twi_state)){
     192:	80 91 95 05 	lds	r24, 0x0595	; 0x800595 <twi_state>
     196:	82 30       	cpi	r24, 0x02	; 2
     198:	e1 f3       	breq	.-8      	; 0x192 <TwoWire::endTransmission(unsigned char) [clone .constprop.65]+0x70>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:346
      continue;
    }
  #endif

  if (twi_error == 0xFF)
     19a:	80 91 93 05 	lds	r24, 0x0593	; 0x800593 <twi_error>
     19e:	8f 3f       	cpi	r24, 0xFF	; 255
     1a0:	91 f0       	breq	.+36     	; 0x1c6 <TwoWire::endTransmission(unsigned char) [clone .constprop.65]+0xa4>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:348
    return 0; // success
  else if (twi_error == TW_MT_SLA_NACK)
     1a2:	80 91 93 05 	lds	r24, 0x0593	; 0x800593 <twi_error>
     1a6:	80 32       	cpi	r24, 0x20	; 32
     1a8:	81 f0       	breq	.+32     	; 0x1ca <TwoWire::endTransmission(unsigned char) [clone .constprop.65]+0xa8>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:350
    return 2; // error: address send, nack received
  else if (twi_error == TW_MT_DATA_NACK)
     1aa:	80 91 93 05 	lds	r24, 0x0593	; 0x800593 <twi_error>
     1ae:	80 33       	cpi	r24, 0x30	; 48
     1b0:	71 f0       	breq	.+28     	; 0x1ce <TwoWire::endTransmission(unsigned char) [clone .constprop.65]+0xac>
_ZN7TwoWire15endTransmissionEh.constprop.65():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:353
    return 3; // error: data send, nack received
  else
    return 4; // other twi error
     1b2:	84 e0       	ldi	r24, 0x04	; 4
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/Wire.cpp:227
  // reset tx buffer iterator vars
  txBufferIndex = 0;
     1b4:	10 92 97 05 	sts	0x0597, r1	; 0x800597 <TwoWire::txBufferIndex>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/Wire.cpp:228
  txBufferLength = 0;
     1b8:	10 92 b9 05 	sts	0x05B9, r1	; 0x8005b9 <TwoWire::txBufferLength>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/Wire.cpp:230
  // indicate that we are done transmitting
  transmitting = 0;
     1bc:	10 92 96 05 	sts	0x0596, r1	; 0x800596 <TwoWire::transmitting>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/Wire.cpp:232
  return ret;
}
     1c0:	08 95       	ret
twi_writeTo():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:329
    #endif
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
  }
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA); // enable INTs
     1c2:	85 ee       	ldi	r24, 0xE5	; 229
     1c4:	e4 cf       	rjmp	.-56     	; 0x18e <TwoWire::endTransmission(unsigned char) [clone .constprop.65]+0x6c>
_ZN7TwoWire15endTransmissionEh.constprop.65():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:347
      continue;
    }
  #endif

  if (twi_error == 0xFF)
    return 0; // success
     1c6:	80 e0       	ldi	r24, 0x00	; 0
     1c8:	f5 cf       	rjmp	.-22     	; 0x1b4 <TwoWire::endTransmission(unsigned char) [clone .constprop.65]+0x92>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:349
  else if (twi_error == TW_MT_SLA_NACK)
    return 2; // error: address send, nack received
     1ca:	82 e0       	ldi	r24, 0x02	; 2
     1cc:	f3 cf       	rjmp	.-26     	; 0x1b4 <TwoWire::endTransmission(unsigned char) [clone .constprop.65]+0x92>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:351
  else if (twi_error == TW_MT_DATA_NACK)
    return 3; // error: data send, nack received
     1ce:	83 e0       	ldi	r24, 0x03	; 3
     1d0:	f1 cf       	rjmp	.-30     	; 0x1b4 <TwoWire::endTransmission(unsigned char) [clone .constprop.65]+0x92>

000001d2 <TwoWire::onRequestService()>:
_ZN7TwoWire16onRequestServiceEv():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/Wire.cpp:366
  // !!! this will kill any pending pre-master sendTo() activity
  txBufferIndex = 0;
  txBufferLength = 0;
  // alert user program
  user_onRequest();
}
     1d2:	08 95       	ret

000001d4 <TwoWire::onReceiveService(unsigned char*, int)>:
_ZN7TwoWire16onReceiveServiceEPhi():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/Wire.cpp:351
  // set rx iterator vars
  rxBufferIndex = 0;
  rxBufferLength = numBytes;
  // alert user program
  user_onReceive(numBytes);
}
     1d4:	08 95       	ret

000001d6 <QN8066::convertToChar(unsigned int, char*, unsigned char, unsigned char, unsigned char, bool) [clone .constprop.17]>:
_ZN6QN806613convertToCharEjPchhhb.constprop.17():
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:1643
 * void loop() {
 * }
 * @endcode
 * 
 */
void QN8066::convertToChar(uint16_t value, char *strValue, uint8_t len, uint8_t dot, uint8_t separator, bool remove_leading_zeros)
     1d6:	cf 93       	push	r28
     1d8:	df 93       	push	r29
     1da:	ac 01       	movw	r20, r24
     1dc:	9b 01       	movw	r18, r22
     1de:	fb 01       	movw	r30, r22
     1e0:	34 96       	adiw	r30, 0x04	; 4
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:1648
{
    char d;
    for (int i = (len - 1); i >= 0; i--)
    {
        d = value % 10;
     1e2:	ca e0       	ldi	r28, 0x0A	; 10
     1e4:	d0 e0       	ldi	r29, 0x00	; 0
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:1649
        value = value / 10;
     1e6:	ca 01       	movw	r24, r20
     1e8:	be 01       	movw	r22, r28
     1ea:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <__udivmodhi4>
     1ee:	ab 01       	movw	r20, r22
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:1650
        strValue[i] = d + 48;
     1f0:	80 5d       	subi	r24, 0xD0	; 208
     1f2:	82 93       	st	-Z, r24
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:1646
 * 
 */
void QN8066::convertToChar(uint16_t value, char *strValue, uint8_t len, uint8_t dot, uint8_t separator, bool remove_leading_zeros)
{
    char d;
    for (int i = (len - 1); i >= 0; i--)
     1f4:	e2 17       	cp	r30, r18
     1f6:	f3 07       	cpc	r31, r19
     1f8:	b1 f7       	brne	.-20     	; 0x1e6 <QN8066::convertToChar(unsigned int, char*, unsigned char, unsigned char, unsigned char, bool) [clone .constprop.17]+0x10>
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:1657
    strValue[len] = '\0';
    if (dot > 0)
    {
        for (int i = len; i >= dot; i--)
        {
            strValue[i + 1] = strValue[i];
     1fa:	15 82       	std	Z+5, r1	; 0x05
     1fc:	93 81       	ldd	r25, Z+3	; 0x03
     1fe:	94 83       	std	Z+4, r25	; 0x04
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:1659
        }
        strValue[dot] = separator;
     200:	9c e2       	ldi	r25, 0x2C	; 44
     202:	93 83       	std	Z+3, r25	; 0x03
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:1664
    }

    if (remove_leading_zeros)
    {
        if (strValue[0] == '0')
     204:	80 33       	cpi	r24, 0x30	; 48
     206:	31 f4       	brne	.+12     	; 0x214 <QN8066::convertToChar(unsigned int, char*, unsigned char, unsigned char, unsigned char, bool) [clone .constprop.17]+0x3e>
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:1666
        {
            strValue[0] = ' ';
     208:	80 e2       	ldi	r24, 0x20	; 32
     20a:	80 83       	st	Z, r24
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:1667
            if (strValue[1] == '0')
     20c:	91 81       	ldd	r25, Z+1	; 0x01
     20e:	90 33       	cpi	r25, 0x30	; 48
     210:	09 f4       	brne	.+2      	; 0x214 <QN8066::convertToChar(unsigned int, char*, unsigned char, unsigned char, unsigned char, bool) [clone .constprop.17]+0x3e>
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:1668
                strValue[1] = ' ';
     212:	81 83       	std	Z+1, r24	; 0x01
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:1671
        }
    }
}
     214:	df 91       	pop	r29
     216:	cf 91       	pop	r28
     218:	08 95       	ret

0000021a <turnOffPWM>:
turnOffPWM():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
     21a:	84 30       	cpi	r24, 0x04	; 4
     21c:	81 f0       	breq	.+32     	; 0x23e <turnOffPWM+0x24>
     21e:	28 f4       	brcc	.+10     	; 0x22a <turnOffPWM+0x10>
     220:	82 30       	cpi	r24, 0x02	; 2
     222:	e9 f0       	breq	.+58     	; 0x25e <turnOffPWM+0x44>
     224:	83 30       	cpi	r24, 0x03	; 3
     226:	f9 f0       	breq	.+62     	; 0x266 <turnOffPWM+0x4c>
     228:	08 95       	ret
     22a:	88 30       	cpi	r24, 0x08	; 8
     22c:	71 f0       	breq	.+28     	; 0x24a <turnOffPWM+0x30>
     22e:	89 30       	cpi	r24, 0x09	; 9
     230:	91 f0       	breq	.+36     	; 0x256 <turnOffPWM+0x3c>
     232:	85 30       	cpi	r24, 0x05	; 5
     234:	b9 f4       	brne	.+46     	; 0x264 <turnOffPWM+0x4a>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:87
        TCCR1A &= ~_BV(COM1A1);
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
     236:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     23a:	8f 7d       	andi	r24, 0xDF	; 223
     23c:	03 c0       	rjmp	.+6      	; 0x244 <turnOffPWM+0x2a>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:82
  switch (timer)
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
     23e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     242:	8f 77       	andi	r24, 0x7F	; 127
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
     244:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     248:	08 95       	ret
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:104
        TCCR2 &= ~_BV(COM21);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2A1)
      case TIMER2A:
        TCCR2A &= ~_BV(COM2A1);
     24a:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     24e:	8f 77       	andi	r24, 0x7F	; 127
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:109
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
     250:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     254:	08 95       	ret
     256:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     25a:	8f 7d       	andi	r24, 0xDF	; 223
     25c:	f9 cf       	rjmp	.-14     	; 0x250 <turnOffPWM+0x36>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:176
        TCCR0 &= ~_BV(COM01);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0A1)
      case TIMER0A:
        TCCR0A &= ~_BV(COM0A1);
     25e:	84 b5       	in	r24, 0x24	; 36
     260:	8f 77       	andi	r24, 0x7F	; 127
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:181
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
     262:	84 bd       	out	0x24, r24	; 36
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:185
        break;
    #endif
  }
}
     264:	08 95       	ret
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:181
        TCCR0A &= ~_BV(COM0A1);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
     266:	84 b5       	in	r24, 0x24	; 36
     268:	8f 7d       	andi	r24, 0xDF	; 223
     26a:	fb cf       	rjmp	.-10     	; 0x262 <turnOffPWM+0x48>

0000026c <digitalRead>:
digitalRead():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:215

  SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
     26c:	cf 93       	push	r28
     26e:	df 93       	push	r29
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:216
  uint8_t timer = digitalPinToTimer(pin);
     270:	28 2f       	mov	r18, r24
     272:	30 e0       	ldi	r19, 0x00	; 0
     274:	f9 01       	movw	r30, r18
     276:	ec 54       	subi	r30, 0x4C	; 76
     278:	ff 4f       	sbci	r31, 0xFF	; 255
     27a:	84 91       	lpm	r24, Z
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:217
  uint8_t bit = digitalPinToBitMask(pin);
     27c:	f9 01       	movw	r30, r18
     27e:	e3 56       	subi	r30, 0x63	; 99
     280:	ff 4f       	sbci	r31, 0xFF	; 255
     282:	d4 91       	lpm	r29, Z
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:218
  uint8_t port = digitalPinToPort(pin);
     284:	f9 01       	movw	r30, r18
     286:	ea 57       	subi	r30, 0x7A	; 122
     288:	ff 4f       	sbci	r31, 0xFF	; 255
     28a:	c4 91       	lpm	r28, Z
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:220

  if (port == NOT_A_PIN) return LOW;
     28c:	cc 23       	and	r28, r28
     28e:	a1 f0       	breq	.+40     	; 0x2b8 <digitalRead+0x4c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:224

  // If the pin that support PWM output, we need to turn it off
  // before getting a digital reading.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     290:	81 11       	cpse	r24, r1
     292:	0e 94 0d 01 	call	0x21a	; 0x21a <turnOffPWM>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:226

  if (*portInputRegister(port) & bit) return HIGH;
     296:	ec 2f       	mov	r30, r28
     298:	f0 e0       	ldi	r31, 0x00	; 0
     29a:	ee 0f       	add	r30, r30
     29c:	ff 1f       	adc	r31, r31
     29e:	e4 58       	subi	r30, 0x84	; 132
     2a0:	ff 4f       	sbci	r31, 0xFF	; 255
     2a2:	a5 91       	lpm	r26, Z+
     2a4:	b4 91       	lpm	r27, Z
     2a6:	ec 91       	ld	r30, X
     2a8:	ed 23       	and	r30, r29
     2aa:	81 e0       	ldi	r24, 0x01	; 1
     2ac:	90 e0       	ldi	r25, 0x00	; 0
     2ae:	09 f4       	brne	.+2      	; 0x2b2 <digitalRead+0x46>
     2b0:	80 e0       	ldi	r24, 0x00	; 0
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:228
  return LOW;
}
     2b2:	df 91       	pop	r29
     2b4:	cf 91       	pop	r28
     2b6:	08 95       	ret
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:220
{
  uint8_t timer = digitalPinToTimer(pin);
  uint8_t bit = digitalPinToBitMask(pin);
  uint8_t port = digitalPinToPort(pin);

  if (port == NOT_A_PIN) return LOW;
     2b8:	80 e0       	ldi	r24, 0x00	; 0
     2ba:	90 e0       	ldi	r25, 0x00	; 0
     2bc:	fa cf       	rjmp	.-12     	; 0x2b2 <digitalRead+0x46>

000002be <digitalWrite>:
digitalWrite():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:188
    #endif
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
     2be:	1f 93       	push	r17
     2c0:	cf 93       	push	r28
     2c2:	df 93       	push	r29
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:189
  uint8_t timer = digitalPinToTimer(pin);
     2c4:	28 2f       	mov	r18, r24
     2c6:	30 e0       	ldi	r19, 0x00	; 0
     2c8:	f9 01       	movw	r30, r18
     2ca:	ec 54       	subi	r30, 0x4C	; 76
     2cc:	ff 4f       	sbci	r31, 0xFF	; 255
     2ce:	84 91       	lpm	r24, Z
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
     2d0:	f9 01       	movw	r30, r18
     2d2:	e3 56       	subi	r30, 0x63	; 99
     2d4:	ff 4f       	sbci	r31, 0xFF	; 255
     2d6:	d4 91       	lpm	r29, Z
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
     2d8:	f9 01       	movw	r30, r18
     2da:	ea 57       	subi	r30, 0x7A	; 122
     2dc:	ff 4f       	sbci	r31, 0xFF	; 255
     2de:	c4 91       	lpm	r28, Z
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
     2e0:	cc 23       	and	r28, r28
     2e2:	a9 f0       	breq	.+42     	; 0x30e <digitalWrite+0x50>
     2e4:	16 2f       	mov	r17, r22
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     2e6:	81 11       	cpse	r24, r1
     2e8:	0e 94 0d 01 	call	0x21a	; 0x21a <turnOffPWM>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:200

  out = portOutputRegister(port);
     2ec:	ec 2f       	mov	r30, r28
     2ee:	f0 e0       	ldi	r31, 0x00	; 0
     2f0:	ee 0f       	add	r30, r30
     2f2:	ff 1f       	adc	r31, r31
     2f4:	ee 58       	subi	r30, 0x8E	; 142
     2f6:	ff 4f       	sbci	r31, 0xFF	; 255
     2f8:	a5 91       	lpm	r26, Z+
     2fa:	b4 91       	lpm	r27, Z
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
     2fc:	8f b7       	in	r24, 0x3f	; 63
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:203
  cli();
     2fe:	f8 94       	cli
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
     300:	ec 91       	ld	r30, X
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
     302:	11 11       	cpse	r17, r1
     304:	08 c0       	rjmp	.+16     	; 0x316 <digitalWrite+0x58>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
     306:	d0 95       	com	r29
     308:	de 23       	and	r29, r30
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
     30a:	dc 93       	st	X, r29
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
     30c:	8f bf       	out	0x3f, r24	; 63
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:212
}
     30e:	df 91       	pop	r29
     310:	cf 91       	pop	r28
     312:	1f 91       	pop	r17
     314:	08 95       	ret
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
     316:	de 2b       	or	r29, r30
     318:	f8 cf       	rjmp	.-16     	; 0x30a <digitalWrite+0x4c>

0000031a <TwoWire::begin() [clone .constprop.21]>:
_ZN7TwoWire5beginEv.constprop.21():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/Wire.cpp:61

// Public Methods //////////////////////////////////////////////////////////////

void TwoWire::begin(void)
{
  rxBufferIndex = 0;
     31a:	10 92 6c 05 	sts	0x056C, r1	; 0x80056c <TwoWire::rxBufferIndex>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/Wire.cpp:62
  rxBufferLength = 0;
     31e:	10 92 6b 05 	sts	0x056B, r1	; 0x80056b <TwoWire::rxBufferLength>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/Wire.cpp:64

  txBufferIndex = 0;
     322:	10 92 97 05 	sts	0x0597, r1	; 0x800597 <TwoWire::txBufferIndex>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/Wire.cpp:65
  txBufferLength = 0;
     326:	10 92 b9 05 	sts	0x05B9, r1	; 0x8005b9 <TwoWire::txBufferLength>
twi_init():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:84
 * Output   none
 */
void twi_init(void)
{
  // initialize state
  twi_state = TWI_READY;
     32a:	10 92 95 05 	sts	0x0595, r1	; 0x800595 <twi_state>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:85
  twi_sendStop = true; // default value
     32e:	81 e0       	ldi	r24, 0x01	; 1
     330:	80 93 94 05 	sts	0x0594, r24	; 0x800594 <twi_sendStop>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:86
  twi_inRepStart = false;
     334:	10 92 8d 05 	sts	0x058D, r1	; 0x80058d <twi_inRepStart>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:89

  // activate internal pullups for twi.
  digitalWrite(SDA, 1);
     338:	61 e0       	ldi	r22, 0x01	; 1
     33a:	82 e1       	ldi	r24, 0x12	; 18
     33c:	0e 94 5f 01 	call	0x2be	; 0x2be <digitalWrite>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:90
  digitalWrite(SCL, 1);
     340:	61 e0       	ldi	r22, 0x01	; 1
     342:	83 e1       	ldi	r24, 0x13	; 19
     344:	0e 94 5f 01 	call	0x2be	; 0x2be <digitalWrite>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:93

  // initialize twi prescaler and bit rate
  cbi(TWSR, TWPS0);
     348:	e9 eb       	ldi	r30, 0xB9	; 185
     34a:	f0 e0       	ldi	r31, 0x00	; 0
     34c:	80 81       	ld	r24, Z
     34e:	8e 7f       	andi	r24, 0xFE	; 254
     350:	80 83       	st	Z, r24
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:94
  cbi(TWSR, TWPS1);
     352:	80 81       	ld	r24, Z
     354:	8d 7f       	andi	r24, 0xFD	; 253
     356:	80 83       	st	Z, r24
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:95
  TWBR = ((F_CPU / TWI_FREQ) - 16) / 2;
     358:	88 e4       	ldi	r24, 0x48	; 72
     35a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:103
  SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR))
  note: TWBR should be 10 or higher for master mode
  It is 72 for a 16mhz Wiring board with 100kHz TWI */

  // enable twi module, acks, and twi interrupt
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA);
     35e:	85 e4       	ldi	r24, 0x45	; 69
     360:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
twi_attachSlaveTxEvent():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:408
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveTxEvent( void (*function)(void) )
{
  twi_onSlaveTransmit = function;
     364:	89 ee       	ldi	r24, 0xE9	; 233
     366:	90 e0       	ldi	r25, 0x00	; 0
     368:	90 93 6a 05 	sts	0x056A, r25	; 0x80056a <twi_onSlaveTransmit+0x1>
     36c:	80 93 69 05 	sts	0x0569, r24	; 0x800569 <twi_onSlaveTransmit>
twi_attachSlaveRxEvent():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:397
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveRxEvent( void (*function)(uint8_t*, int) )
{
  twi_onSlaveReceive = function;
     370:	8a ee       	ldi	r24, 0xEA	; 234
     372:	90 e0       	ldi	r25, 0x00	; 0
     374:	90 93 68 05 	sts	0x0568, r25	; 0x800568 <twi_onSlaveReceive+0x1>
     378:	80 93 67 05 	sts	0x0567, r24	; 0x800567 <twi_onSlaveReceive>
_ZN7TwoWire5beginEv.constprop.21():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/Wire.cpp:70

  twi_init();
  twi_attachSlaveTxEvent(onRequestService); // default callback must exist
  twi_attachSlaveRxEvent(onReceiveService); // default callback must exist
}
     37c:	08 95       	ret

0000037e <pinMode>:
pinMode():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     37e:	cf 93       	push	r28
     380:	df 93       	push	r29
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
     382:	90 e0       	ldi	r25, 0x00	; 0
     384:	fc 01       	movw	r30, r24
     386:	e3 56       	subi	r30, 0x63	; 99
     388:	ff 4f       	sbci	r31, 0xFF	; 255
     38a:	24 91       	lpm	r18, Z
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
     38c:	8a 57       	subi	r24, 0x7A	; 122
     38e:	9f 4f       	sbci	r25, 0xFF	; 255
     390:	fc 01       	movw	r30, r24
     392:	84 91       	lpm	r24, Z
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
     394:	88 23       	and	r24, r24
     396:	c9 f0       	breq	.+50     	; 0x3ca <pinMode+0x4c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
     398:	90 e0       	ldi	r25, 0x00	; 0
     39a:	88 0f       	add	r24, r24
     39c:	99 1f       	adc	r25, r25
     39e:	fc 01       	movw	r30, r24
     3a0:	e8 59       	subi	r30, 0x98	; 152
     3a2:	ff 4f       	sbci	r31, 0xFF	; 255
     3a4:	a5 91       	lpm	r26, Z+
     3a6:	b4 91       	lpm	r27, Z
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
     3a8:	fc 01       	movw	r30, r24
     3aa:	ee 58       	subi	r30, 0x8E	; 142
     3ac:	ff 4f       	sbci	r31, 0xFF	; 255
     3ae:	c5 91       	lpm	r28, Z+
     3b0:	d4 91       	lpm	r29, Z
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
     3b2:	61 11       	cpse	r22, r1
     3b4:	0d c0       	rjmp	.+26     	; 0x3d0 <pinMode+0x52>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
     3b6:	9f b7       	in	r25, 0x3f	; 63
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:43
    cli();
     3b8:	f8 94       	cli
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
     3ba:	8c 91       	ld	r24, X
     3bc:	20 95       	com	r18
     3be:	82 23       	and	r24, r18
     3c0:	8c 93       	st	X, r24
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
     3c2:	88 81       	ld	r24, Y
     3c4:	28 23       	and	r18, r24
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:51
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out |= bit;
     3c6:	28 83       	st	Y, r18
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:52
    SREG = oldSREG;
     3c8:	9f bf       	out	0x3f, r25	; 63
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:59
    uint8_t oldSREG = SREG;
    cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
     3ca:	df 91       	pop	r29
     3cc:	cf 91       	pop	r28
     3ce:	08 95       	ret
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:47
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out &= ~bit;
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
     3d0:	62 30       	cpi	r22, 0x02	; 2
     3d2:	51 f4       	brne	.+20     	; 0x3e8 <pinMode+0x6a>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:48
    uint8_t oldSREG = SREG;
     3d4:	9f b7       	in	r25, 0x3f	; 63
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:49
    cli();
     3d6:	f8 94       	cli
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:50
    *reg &= ~bit;
     3d8:	3c 91       	ld	r19, X
     3da:	82 2f       	mov	r24, r18
     3dc:	80 95       	com	r24
     3de:	83 23       	and	r24, r19
     3e0:	8c 93       	st	X, r24
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:51
    *out |= bit;
     3e2:	e8 81       	ld	r30, Y
     3e4:	2e 2b       	or	r18, r30
     3e6:	ef cf       	rjmp	.-34     	; 0x3c6 <pinMode+0x48>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:54
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
     3e8:	8f b7       	in	r24, 0x3f	; 63
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:55
    cli();
     3ea:	f8 94       	cli
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
     3ec:	ec 91       	ld	r30, X
     3ee:	2e 2b       	or	r18, r30
     3f0:	2c 93       	st	X, r18
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
     3f2:	8f bf       	out	0x3f, r24	; 63
     3f4:	ea cf       	rjmp	.-44     	; 0x3ca <pinMode+0x4c>

000003f6 <analogWrite.constprop.18>:
analogWrite.constprop.18():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_analog.c:94

// Right now, PWM output only works on the pins with
// hardware support.  These are defined in the appropriate
// pins_*.c file.  For the rest of the pins, we default
// to digital output.
void analogWrite(uint8_t pin, int val)
     3f6:	cf 93       	push	r28
     3f8:	df 93       	push	r29
     3fa:	ec 01       	movw	r28, r24
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_analog.c:101
  // We need to make sure the PWM output is enabled for those pins
  // that support it, as we turn it off when digitally reading or
  // writing with them.  Also, make sure the pin is in output mode
  // for consistenty with Wiring, which doesn't require a pinMode
  // call for the analog output pins.
  pinMode(pin, OUTPUT);
     3fc:	61 e0       	ldi	r22, 0x01	; 1
     3fe:	89 e0       	ldi	r24, 0x09	; 9
     400:	0e 94 bf 01 	call	0x37e	; 0x37e <pinMode>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_analog.c:102
  if (val == 0)
     404:	20 97       	sbiw	r28, 0x00	; 0
     406:	31 f4       	brne	.+12     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_analog.c:104
  {
    digitalWrite(pin, LOW);
     408:	60 e0       	ldi	r22, 0x00	; 0
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_analog.c:108
  }
  else if (val == 255)
  {
    digitalWrite(pin, HIGH);
     40a:	89 e0       	ldi	r24, 0x09	; 9
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_analog.c:299
        } else {
          digitalWrite(pin, HIGH);
        }
    }
  }
}
     40c:	df 91       	pop	r29
     40e:	cf 91       	pop	r28
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_analog.c:108
  {
    digitalWrite(pin, LOW);
  }
  else if (val == 255)
  {
    digitalWrite(pin, HIGH);
     410:	0c 94 5f 01 	jmp	0x2be	; 0x2be <digitalWrite>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_analog.c:106
  pinMode(pin, OUTPUT);
  if (val == 0)
  {
    digitalWrite(pin, LOW);
  }
  else if (val == 255)
     414:	cf 3f       	cpi	r28, 0xFF	; 255
     416:	d1 05       	cpc	r29, r1
     418:	11 f4       	brne	.+4      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_analog.c:108
  {
    digitalWrite(pin, HIGH);
     41a:	61 e0       	ldi	r22, 0x01	; 1
     41c:	f6 cf       	rjmp	.-20     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_analog.c:112
  }
  else
  {
    switch(digitalPinToTimer(pin))
     41e:	ed eb       	ldi	r30, 0xBD	; 189
     420:	f0 e0       	ldi	r31, 0x00	; 0
     422:	e4 91       	lpm	r30, Z
     424:	e4 30       	cpi	r30, 0x04	; 4
     426:	29 f1       	breq	.+74     	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
     428:	40 f4       	brcc	.+16     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
     42a:	e2 30       	cpi	r30, 0x02	; 2
     42c:	b1 f0       	breq	.+44     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
     42e:	e3 30       	cpi	r30, 0x03	; 3
     430:	d9 f0       	breq	.+54     	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_analog.c:292
        break;
      #endif

      case NOT_ON_TIMER:
      default:
        if (val < 128) {
     432:	c0 38       	cpi	r28, 0x80	; 128
     434:	d1 05       	cpc	r29, r1
     436:	8c f7       	brge	.-30     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     438:	e7 cf       	rjmp	.-50     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_analog.c:112
  {
    digitalWrite(pin, HIGH);
  }
  else
  {
    switch(digitalPinToTimer(pin))
     43a:	e8 30       	cpi	r30, 0x08	; 8
     43c:	21 f1       	breq	.+72     	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
     43e:	e9 30       	cpi	r30, 0x09	; 9
     440:	51 f1       	breq	.+84     	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
     442:	e5 30       	cpi	r30, 0x05	; 5
     444:	b1 f7       	brne	.-20     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_analog.c:156
      #endif

      #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        // connect pwm to pin on timer 1, channel B
        TCCR1A |= _BV(COM1B1);
     446:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     44a:	80 62       	ori	r24, 0x20	; 32
     44c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_analog.c:157
        OCR1B = val; // set pwm duty
     450:	d0 93 8b 00 	sts	0x008B, r29	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
     454:	c0 93 8a 00 	sts	0x008A, r28	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
     458:	04 c0       	rjmp	.+8      	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_analog.c:132
      #endif

      #if defined(TCCR0A) && defined(COM0A1)
      case TIMER0A:
        // connect pwm to pin on timer 0, channel A
        TCCR0A |= _BV(COM0A1);
     45a:	84 b5       	in	r24, 0x24	; 36
     45c:	80 68       	ori	r24, 0x80	; 128
     45e:	84 bd       	out	0x24, r24	; 36
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_analog.c:133
        OCR0A = val; // set pwm duty
     460:	c7 bd       	out	0x27, r28	; 39
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_analog.c:299
        } else {
          digitalWrite(pin, HIGH);
        }
    }
  }
}
     462:	df 91       	pop	r29
     464:	cf 91       	pop	r28
     466:	08 95       	ret
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_analog.c:140
      #endif

      #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        // connect pwm to pin on timer 0, channel B
        TCCR0A |= _BV(COM0B1);
     468:	84 b5       	in	r24, 0x24	; 36
     46a:	80 62       	ori	r24, 0x20	; 32
     46c:	84 bd       	out	0x24, r24	; 36
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_analog.c:141
        OCR0B = val; // set pwm duty
     46e:	c8 bd       	out	0x28, r28	; 40
     470:	f8 cf       	rjmp	.-16     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_analog.c:148
      #endif

      #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        // connect pwm to pin on timer 1, channel A
        TCCR1A |= _BV(COM1A1);
     472:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     476:	80 68       	ori	r24, 0x80	; 128
     478:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_analog.c:149
        OCR1A = val; // set pwm duty
     47c:	d0 93 89 00 	sts	0x0089, r29	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
     480:	c0 93 88 00 	sts	0x0088, r28	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
     484:	ee cf       	rjmp	.-36     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_analog.c:180
      #endif

      #if defined(TCCR2A) && defined(COM2A1)
      case TIMER2A:
        // connect pwm to pin on timer 2, channel A
        TCCR2A |= _BV(COM2A1);
     486:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     48a:	80 68       	ori	r24, 0x80	; 128
     48c:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_analog.c:181
        OCR2A = val; // set pwm duty
     490:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
     494:	e6 cf       	rjmp	.-52     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_analog.c:188
      #endif

      #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        // connect pwm to pin on timer 2, channel B
        TCCR2A |= _BV(COM2B1);
     496:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     49a:	80 62       	ori	r24, 0x20	; 32
     49c:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_analog.c:189
        OCR2B = val; // set pwm duty
     4a0:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
     4a4:	de cf       	rjmp	.-68     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>

000004a6 <delayMicroseconds>:
delayMicroseconds():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:619
  us -= 7; // = 2 cycles

#elif F_CPU >= 16000000L
  // for a one-microsecond delay, simply return.  the overhead
  // of the function call takes 14 (16) cycles, which is 1 us
  if (us <= 1) return; //  = 3 cycles, (4 when true)
     4a6:	81 30       	cpi	r24, 0x01	; 1
     4a8:	91 05       	cpc	r25, r1
     4aa:	39 f0       	breq	.+14     	; 0x4ba <delayMicroseconds+0x14>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:624

  // the following loop takes 1/4 of a microsecond (4 cycles)
  // per iteration, so execute it four times for each microsecond of
  // delay requested.
  us <<= 2; // x4 us, = 4 cycles
     4ac:	88 0f       	add	r24, r24
     4ae:	99 1f       	adc	r25, r25
     4b0:	88 0f       	add	r24, r24
     4b2:	99 1f       	adc	r25, r25
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:629

  // account for the time taken in the preceeding commands.
  // we just burned 19 (21) cycles above, remove 5, (5*4=20)
  // to 2nd us is at least 8 so we can substract 5
  us -= 5; // = 2 cycles,
     4b4:	05 97       	sbiw	r24, 0x05	; 5
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:929
  us >>= 2; // us div 4, = 4 cycles

#endif

  // busy wait
  __asm__ __volatile__ (
     4b6:	01 97       	sbiw	r24, 0x01	; 1
     4b8:	f1 f7       	brne	.-4      	; 0x4b6 <delayMicroseconds+0x10>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:939
    "   brne 1b"                     // 2 cycles
    : /* no outputs */
    : "w" (us)
  );
  // return = 4 cycles
}
     4ba:	08 95       	ret

000004bc <micros>:
micros():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:237
  unsigned char f; // temporary storage for millis fraction counter
  unsigned char q = 0; // record whether an overflow is flagged
#endif
  // t will be the number where the timer0 counter stopped
  uint8_t t;
  uint8_t oldSREG = SREG;
     4bc:	3f b7       	in	r19, 0x3f	; 63
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:240

  // Stop all interrupts
  cli();
     4be:	f8 94       	cli
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:247
#ifdef CORRECT_EXACT_MICROS
  // combine exact millisec and 8usec counters
  m = timer0_millis;
  f = timer0_fract;
#else
  m = timer0_overflow_count;
     4c0:	80 91 63 05 	lds	r24, 0x0563	; 0x800563 <timer0_overflow_count>
     4c4:	90 91 64 05 	lds	r25, 0x0564	; 0x800564 <timer0_overflow_count+0x1>
     4c8:	a0 91 65 05 	lds	r26, 0x0565	; 0x800565 <timer0_overflow_count+0x2>
     4cc:	b0 91 66 05 	lds	r27, 0x0566	; 0x800566 <timer0_overflow_count+0x3>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:252
#endif

  // TCNT0 : The Timer Counter Register
#if defined(TCNT0)
  t = TCNT0;
     4d0:	26 b5       	in	r18, 0x26	; 38
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:261
  #error TIMER 0 not defined
#endif

  // Timer0 Interrupt Flag Register
#ifdef TIFR0
  if ((TIFR0 & _BV(TOV0)) && (t < 255))
     4d2:	a8 9b       	sbis	0x15, 0	; 21
     4d4:	05 c0       	rjmp	.+10     	; 0x4e0 <micros+0x24>
     4d6:	2f 3f       	cpi	r18, 0xFF	; 255
     4d8:	19 f0       	breq	.+6      	; 0x4e0 <micros+0x24>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:263
#ifndef CORRECT_EXACT_MICROS
    m++;
     4da:	01 96       	adiw	r24, 0x01	; 1
     4dc:	a1 1d       	adc	r26, r1
     4de:	b1 1d       	adc	r27, r1
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:276
#else
    q = 1;
#endif
#endif
  // Restore SREG
  SREG = oldSREG;
     4e0:	3f bf       	out	0x3f, r19	; 63
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:292
      ((t * MICROSECONDS_PER_TIMER0_OVERFLOW) >> 8);
  return q ? m + MICROSECONDS_PER_TIMER0_OVERFLOW : m;
#elif 1
  /* All power-of-two Megahertz frequencies enter here, as well as 12.8 MHz.
     We only end up here if right shift before multiplication is exact. */
  return ((m << 8) + t) * (MICROSECONDS_PER_TIMER0_OVERFLOW >> 8);
     4e2:	ba 2f       	mov	r27, r26
     4e4:	a9 2f       	mov	r26, r25
     4e6:	98 2f       	mov	r25, r24
     4e8:	88 27       	eor	r24, r24
     4ea:	bc 01       	movw	r22, r24
     4ec:	cd 01       	movw	r24, r26
     4ee:	62 0f       	add	r22, r18
     4f0:	71 1d       	adc	r23, r1
     4f2:	81 1d       	adc	r24, r1
     4f4:	91 1d       	adc	r25, r1
     4f6:	42 e0       	ldi	r20, 0x02	; 2
     4f8:	66 0f       	add	r22, r22
     4fa:	77 1f       	adc	r23, r23
     4fc:	88 1f       	adc	r24, r24
     4fe:	99 1f       	adc	r25, r25
     500:	4a 95       	dec	r20
     502:	d1 f7       	brne	.-12     	; 0x4f8 <micros+0x3c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:393
  // m & t are multiplied by 4 (since it was already multiplied by 256)
  // t is multiplied by 4
  return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
#endif
#endif // 0
}
     504:	08 95       	ret

00000506 <delay>:
delay():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:396

void delay(unsigned long ms)
{
     506:	8f 92       	push	r8
     508:	9f 92       	push	r9
     50a:	af 92       	push	r10
     50c:	bf 92       	push	r11
     50e:	cf 92       	push	r12
     510:	df 92       	push	r13
     512:	ef 92       	push	r14
     514:	ff 92       	push	r15
     516:	6b 01       	movw	r12, r22
     518:	7c 01       	movw	r14, r24
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:397
  unsigned long start = micros();
     51a:	0e 94 5e 02 	call	0x4bc	; 0x4bc <micros>
     51e:	4b 01       	movw	r8, r22
     520:	5c 01       	movw	r10, r24
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:401

  while (ms > 0UL) {
    yield();
    while (ms > 0UL && (micros() - start) >= 1000UL) {
     522:	c1 14       	cp	r12, r1
     524:	d1 04       	cpc	r13, r1
     526:	e1 04       	cpc	r14, r1
     528:	f1 04       	cpc	r15, r1
     52a:	b9 f0       	breq	.+46     	; 0x55a <delay+0x54>
     52c:	0e 94 5e 02 	call	0x4bc	; 0x4bc <micros>
     530:	68 19       	sub	r22, r8
     532:	79 09       	sbc	r23, r9
     534:	8a 09       	sbc	r24, r10
     536:	9b 09       	sbc	r25, r11
     538:	68 3e       	cpi	r22, 0xE8	; 232
     53a:	73 40       	sbci	r23, 0x03	; 3
     53c:	81 05       	cpc	r24, r1
     53e:	91 05       	cpc	r25, r1
     540:	80 f3       	brcs	.-32     	; 0x522 <delay+0x1c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:402
      ms--;
     542:	21 e0       	ldi	r18, 0x01	; 1
     544:	c2 1a       	sub	r12, r18
     546:	d1 08       	sbc	r13, r1
     548:	e1 08       	sbc	r14, r1
     54a:	f1 08       	sbc	r15, r1
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:403
      start += 1000UL;
     54c:	88 ee       	ldi	r24, 0xE8	; 232
     54e:	88 0e       	add	r8, r24
     550:	83 e0       	ldi	r24, 0x03	; 3
     552:	98 1e       	adc	r9, r24
     554:	a1 1c       	adc	r10, r1
     556:	b1 1c       	adc	r11, r1
     558:	e4 cf       	rjmp	.-56     	; 0x522 <delay+0x1c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:406
    }
  }
}
     55a:	ff 90       	pop	r15
     55c:	ef 90       	pop	r14
     55e:	df 90       	pop	r13
     560:	cf 90       	pop	r12
     562:	bf 90       	pop	r11
     564:	af 90       	pop	r10
     566:	9f 90       	pop	r9
     568:	8f 90       	pop	r8
     56a:	08 95       	ret

0000056c <millis>:
millis():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:218
}

unsigned long millis()
{
  unsigned long m;
  uint8_t oldSREG = SREG;
     56c:	2f b7       	in	r18, 0x3f	; 63
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:222

  // disable interrupts while we read timer0_millis or we might get an
  // inconsistent value (e.g. in the middle of a write to timer0_millis)
  cli();
     56e:	f8 94       	cli
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:223
  m = timer0_millis;
     570:	60 91 5f 05 	lds	r22, 0x055F	; 0x80055f <timer0_millis>
     574:	70 91 60 05 	lds	r23, 0x0560	; 0x800560 <timer0_millis+0x1>
     578:	80 91 61 05 	lds	r24, 0x0561	; 0x800561 <timer0_millis+0x2>
     57c:	90 91 62 05 	lds	r25, 0x0562	; 0x800562 <timer0_millis+0x3>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:224
  SREG = oldSREG;
     580:	2f bf       	out	0x3f, r18	; 63
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:227

  return m;
}
     582:	08 95       	ret

00000584 <nothing>:
nothing():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WInterrupts.c:36

#include "wiring_private.h"

static void nothing(void)
{
}
     584:	08 95       	ret

00000586 <Print::write(unsigned char const*, unsigned int)>:
_ZN5Print5writeEPKhj():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/Print.cpp:35

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
     586:	af 92       	push	r10
     588:	bf 92       	push	r11
     58a:	cf 92       	push	r12
     58c:	df 92       	push	r13
     58e:	ef 92       	push	r14
     590:	ff 92       	push	r15
     592:	0f 93       	push	r16
     594:	1f 93       	push	r17
     596:	cf 93       	push	r28
     598:	df 93       	push	r29
     59a:	6c 01       	movw	r12, r24
     59c:	7b 01       	movw	r14, r22
     59e:	8b 01       	movw	r16, r22
     5a0:	04 0f       	add	r16, r20
     5a2:	15 1f       	adc	r17, r21
     5a4:	eb 01       	movw	r28, r22
     5a6:	5e 01       	movw	r10, r28
     5a8:	ae 18       	sub	r10, r14
     5aa:	bf 08       	sbc	r11, r15
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/Print.cpp:37
  size_t n = 0;
  while (size--) {
     5ac:	c0 17       	cp	r28, r16
     5ae:	d1 07       	cpc	r29, r17
     5b0:	59 f0       	breq	.+22     	; 0x5c8 <Print::write(unsigned char const*, unsigned int)+0x42>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/Print.cpp:38
    if (write(*buffer++)) n++;
     5b2:	69 91       	ld	r22, Y+
     5b4:	d6 01       	movw	r26, r12
     5b6:	ed 91       	ld	r30, X+
     5b8:	fc 91       	ld	r31, X
     5ba:	01 90       	ld	r0, Z+
     5bc:	f0 81       	ld	r31, Z
     5be:	e0 2d       	mov	r30, r0
     5c0:	c6 01       	movw	r24, r12
     5c2:	09 95       	icall
     5c4:	89 2b       	or	r24, r25
     5c6:	79 f7       	brne	.-34     	; 0x5a6 <Print::write(unsigned char const*, unsigned int)+0x20>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/Print.cpp:42
    else break;
  }
  return n;
}
     5c8:	c5 01       	movw	r24, r10
     5ca:	df 91       	pop	r29
     5cc:	cf 91       	pop	r28
     5ce:	1f 91       	pop	r17
     5d0:	0f 91       	pop	r16
     5d2:	ff 90       	pop	r15
     5d4:	ef 90       	pop	r14
     5d6:	df 90       	pop	r13
     5d8:	cf 90       	pop	r12
     5da:	bf 90       	pop	r11
     5dc:	af 90       	pop	r10
     5de:	08 95       	ret

000005e0 <LiquidCrystal::pulseEnable()>:
_ZN13LiquidCrystal11pulseEnableEv():
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:303
    write4bits(value>>4);
    write4bits(value);
  }
}

void LiquidCrystal::pulseEnable(void) {
     5e0:	cf 93       	push	r28
     5e2:	df 93       	push	r29
     5e4:	ec 01       	movw	r28, r24
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:304
  digitalWrite(_enable_pin, LOW);
     5e6:	60 e0       	ldi	r22, 0x00	; 0
     5e8:	8e 81       	ldd	r24, Y+6	; 0x06
     5ea:	0e 94 5f 01 	call	0x2be	; 0x2be <digitalWrite>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:305
  delayMicroseconds(1);    
     5ee:	81 e0       	ldi	r24, 0x01	; 1
     5f0:	90 e0       	ldi	r25, 0x00	; 0
     5f2:	0e 94 53 02 	call	0x4a6	; 0x4a6 <delayMicroseconds>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:306
  digitalWrite(_enable_pin, HIGH);
     5f6:	61 e0       	ldi	r22, 0x01	; 1
     5f8:	8e 81       	ldd	r24, Y+6	; 0x06
     5fa:	0e 94 5f 01 	call	0x2be	; 0x2be <digitalWrite>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:307
  delayMicroseconds(1);    // enable pulse must be >450ns
     5fe:	81 e0       	ldi	r24, 0x01	; 1
     600:	90 e0       	ldi	r25, 0x00	; 0
     602:	0e 94 53 02 	call	0x4a6	; 0x4a6 <delayMicroseconds>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:308
  digitalWrite(_enable_pin, LOW);
     606:	60 e0       	ldi	r22, 0x00	; 0
     608:	8e 81       	ldd	r24, Y+6	; 0x06
     60a:	0e 94 5f 01 	call	0x2be	; 0x2be <digitalWrite>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:309
  delayMicroseconds(100);   // commands need > 37us to settle
     60e:	84 e6       	ldi	r24, 0x64	; 100
     610:	90 e0       	ldi	r25, 0x00	; 0
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:310
}
     612:	df 91       	pop	r29
     614:	cf 91       	pop	r28
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:309
  digitalWrite(_enable_pin, LOW);
  delayMicroseconds(1);    
  digitalWrite(_enable_pin, HIGH);
  delayMicroseconds(1);    // enable pulse must be >450ns
  digitalWrite(_enable_pin, LOW);
  delayMicroseconds(100);   // commands need > 37us to settle
     616:	0c 94 53 02 	jmp	0x4a6	; 0x4a6 <delayMicroseconds>

0000061a <LiquidCrystal::write4bits(unsigned char)>:
_ZN13LiquidCrystal10write4bitsEh():
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:312
}

void LiquidCrystal::write4bits(uint8_t value) {
     61a:	cf 92       	push	r12
     61c:	df 92       	push	r13
     61e:	ef 92       	push	r14
     620:	ff 92       	push	r15
     622:	0f 93       	push	r16
     624:	1f 93       	push	r17
     626:	cf 93       	push	r28
     628:	df 93       	push	r29
     62a:	6c 01       	movw	r12, r24
     62c:	7c 01       	movw	r14, r24
     62e:	87 e0       	ldi	r24, 0x07	; 7
     630:	e8 0e       	add	r14, r24
     632:	f1 1c       	adc	r15, r1
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:313
  for (int i = 0; i < 4; i++) {
     634:	d0 e0       	ldi	r29, 0x00	; 0
     636:	c0 e0       	ldi	r28, 0x00	; 0
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:314
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
     638:	06 2f       	mov	r16, r22
     63a:	10 e0       	ldi	r17, 0x00	; 0
     63c:	b8 01       	movw	r22, r16
     63e:	0c 2e       	mov	r0, r28
     640:	02 c0       	rjmp	.+4      	; 0x646 <LiquidCrystal::write4bits(unsigned char)+0x2c>
     642:	75 95       	asr	r23
     644:	67 95       	ror	r22
     646:	0a 94       	dec	r0
     648:	e2 f7       	brpl	.-8      	; 0x642 <LiquidCrystal::write4bits(unsigned char)+0x28>
     64a:	61 70       	andi	r22, 0x01	; 1
     64c:	f7 01       	movw	r30, r14
     64e:	81 91       	ld	r24, Z+
     650:	7f 01       	movw	r14, r30
     652:	0e 94 5f 01 	call	0x2be	; 0x2be <digitalWrite>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:313
  digitalWrite(_enable_pin, LOW);
  delayMicroseconds(100);   // commands need > 37us to settle
}

void LiquidCrystal::write4bits(uint8_t value) {
  for (int i = 0; i < 4; i++) {
     656:	21 96       	adiw	r28, 0x01	; 1
     658:	c4 30       	cpi	r28, 0x04	; 4
     65a:	d1 05       	cpc	r29, r1
     65c:	79 f7       	brne	.-34     	; 0x63c <LiquidCrystal::write4bits(unsigned char)+0x22>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:317
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
  }

  pulseEnable();
     65e:	c6 01       	movw	r24, r12
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:318
}
     660:	df 91       	pop	r29
     662:	cf 91       	pop	r28
     664:	1f 91       	pop	r17
     666:	0f 91       	pop	r16
     668:	ff 90       	pop	r15
     66a:	ef 90       	pop	r14
     66c:	df 90       	pop	r13
     66e:	cf 90       	pop	r12
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:317
void LiquidCrystal::write4bits(uint8_t value) {
  for (int i = 0; i < 4; i++) {
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
  }

  pulseEnable();
     670:	0c 94 f0 02 	jmp	0x5e0	; 0x5e0 <LiquidCrystal::pulseEnable()>

00000674 <LiquidCrystal::send(unsigned char, unsigned char)>:
_ZN13LiquidCrystal4sendEhh():
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:287
}

/************ low level data pushing commands **********/

// write either command or data, with automatic 4/8-bit selection
void LiquidCrystal::send(uint8_t value, uint8_t mode) {
     674:	cf 92       	push	r12
     676:	df 92       	push	r13
     678:	ef 92       	push	r14
     67a:	ff 92       	push	r15
     67c:	0f 93       	push	r16
     67e:	1f 93       	push	r17
     680:	cf 93       	push	r28
     682:	df 93       	push	r29
     684:	ec 01       	movw	r28, r24
     686:	f6 2e       	mov	r15, r22
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:288
  digitalWrite(_rs_pin, mode);
     688:	64 2f       	mov	r22, r20
     68a:	8c 81       	ldd	r24, Y+4	; 0x04
     68c:	0e 94 5f 01 	call	0x2be	; 0x2be <digitalWrite>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:291

  // if there is a RW pin indicated, set it low to Write
  if (_rw_pin != 255) { 
     690:	8d 81       	ldd	r24, Y+5	; 0x05
     692:	8f 3f       	cpi	r24, 0xFF	; 255
     694:	19 f0       	breq	.+6      	; 0x69c <LiquidCrystal::send(unsigned char, unsigned char)+0x28>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:292
    digitalWrite(_rw_pin, LOW);
     696:	60 e0       	ldi	r22, 0x00	; 0
     698:	0e 94 5f 01 	call	0x2be	; 0x2be <digitalWrite>
     69c:	0f 2d       	mov	r16, r15
     69e:	10 e0       	ldi	r17, 0x00	; 0
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:295
  }
  
  if (_displayfunction & LCD_8BITMODE) {
     6a0:	8f 85       	ldd	r24, Y+15	; 0x0f
     6a2:	84 ff       	sbrs	r24, 4
     6a4:	25 c0       	rjmp	.+74     	; 0x6f0 <LiquidCrystal::send(unsigned char, unsigned char)+0x7c>
     6a6:	6e 01       	movw	r12, r28
     6a8:	87 e0       	ldi	r24, 0x07	; 7
     6aa:	c8 0e       	add	r12, r24
     6ac:	d1 1c       	adc	r13, r1
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:321

  pulseEnable();
}

void LiquidCrystal::write8bits(uint8_t value) {
  for (int i = 0; i < 8; i++) {
     6ae:	f1 2c       	mov	r15, r1
     6b0:	e1 2c       	mov	r14, r1
write8bits():
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:322
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
     6b2:	b8 01       	movw	r22, r16
     6b4:	0e 2c       	mov	r0, r14
     6b6:	02 c0       	rjmp	.+4      	; 0x6bc <LiquidCrystal::send(unsigned char, unsigned char)+0x48>
     6b8:	75 95       	asr	r23
     6ba:	67 95       	ror	r22
     6bc:	0a 94       	dec	r0
     6be:	e2 f7       	brpl	.-8      	; 0x6b8 <LiquidCrystal::send(unsigned char, unsigned char)+0x44>
     6c0:	61 70       	andi	r22, 0x01	; 1
     6c2:	f6 01       	movw	r30, r12
     6c4:	81 91       	ld	r24, Z+
     6c6:	6f 01       	movw	r12, r30
     6c8:	0e 94 5f 01 	call	0x2be	; 0x2be <digitalWrite>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:321

  pulseEnable();
}

void LiquidCrystal::write8bits(uint8_t value) {
  for (int i = 0; i < 8; i++) {
     6cc:	ff ef       	ldi	r31, 0xFF	; 255
     6ce:	ef 1a       	sub	r14, r31
     6d0:	ff 0a       	sbc	r15, r31
     6d2:	88 e0       	ldi	r24, 0x08	; 8
     6d4:	e8 16       	cp	r14, r24
     6d6:	f1 04       	cpc	r15, r1
     6d8:	61 f7       	brne	.-40     	; 0x6b2 <LiquidCrystal::send(unsigned char, unsigned char)+0x3e>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:325
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
  }
  
  pulseEnable();
     6da:	ce 01       	movw	r24, r28
_ZN13LiquidCrystal4sendEhh():
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:301
    write8bits(value); 
  } else {
    write4bits(value>>4);
    write4bits(value);
  }
}
     6dc:	df 91       	pop	r29
     6de:	cf 91       	pop	r28
     6e0:	1f 91       	pop	r17
     6e2:	0f 91       	pop	r16
     6e4:	ff 90       	pop	r15
     6e6:	ef 90       	pop	r14
     6e8:	df 90       	pop	r13
     6ea:	cf 90       	pop	r12
write8bits():
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:325
void LiquidCrystal::write8bits(uint8_t value) {
  for (int i = 0; i < 8; i++) {
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
  }
  
  pulseEnable();
     6ec:	0c 94 f0 02 	jmp	0x5e0	; 0x5e0 <LiquidCrystal::pulseEnable()>
_ZN13LiquidCrystal4sendEhh():
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:298
  }
  
  if (_displayfunction & LCD_8BITMODE) {
    write8bits(value); 
  } else {
    write4bits(value>>4);
     6f0:	b8 01       	movw	r22, r16
     6f2:	84 e0       	ldi	r24, 0x04	; 4
     6f4:	75 95       	asr	r23
     6f6:	67 95       	ror	r22
     6f8:	8a 95       	dec	r24
     6fa:	e1 f7       	brne	.-8      	; 0x6f4 <LiquidCrystal::send(unsigned char, unsigned char)+0x80>
     6fc:	ce 01       	movw	r24, r28
     6fe:	0e 94 0d 03 	call	0x61a	; 0x61a <LiquidCrystal::write4bits(unsigned char)>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:299
    write4bits(value);
     702:	6f 2d       	mov	r22, r15
     704:	ce 01       	movw	r24, r28
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:301
  }
}
     706:	df 91       	pop	r29
     708:	cf 91       	pop	r28
     70a:	1f 91       	pop	r17
     70c:	0f 91       	pop	r16
     70e:	ff 90       	pop	r15
     710:	ef 90       	pop	r14
     712:	df 90       	pop	r13
     714:	cf 90       	pop	r12
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:299
  
  if (_displayfunction & LCD_8BITMODE) {
    write8bits(value); 
  } else {
    write4bits(value>>4);
    write4bits(value);
     716:	0c 94 0d 03 	jmp	0x61a	; 0x61a <LiquidCrystal::write4bits(unsigned char)>

0000071a <LiquidCrystal::command(unsigned char) [clone .constprop.41]>:
_ZN13LiquidCrystal7commandEh.constprop.41():
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:276
}

/*********** mid level commands, for sending data/cmds */

inline void LiquidCrystal::command(uint8_t value) {
  send(value, LOW);
     71a:	40 e0       	ldi	r20, 0x00	; 0
     71c:	68 2f       	mov	r22, r24
     71e:	89 ec       	ldi	r24, 0xC9	; 201
     720:	95 e0       	ldi	r25, 0x05	; 5
     722:	0c 94 3a 03 	jmp	0x674	; 0x674 <LiquidCrystal::send(unsigned char, unsigned char)>

00000726 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.40]>:
_ZN13LiquidCrystal9setCursorEhh.constprop.40():
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:194
{
  const size_t max_lines = sizeof(_row_offsets) / sizeof(*_row_offsets);
  if ( row >= max_lines ) {
    row = max_lines - 1;    // we count rows starting w/0
  }
  if ( row >= _numlines ) {
     726:	90 91 dc 05 	lds	r25, 0x05DC	; 0x8005dc <lcd+0x13>
     72a:	69 17       	cp	r22, r25
     72c:	10 f0       	brcs	.+4      	; 0x732 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.40]+0xc>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:195
    row = _numlines - 1;    // we count rows starting w/0
     72e:	6f ef       	ldi	r22, 0xFF	; 255
     730:	69 0f       	add	r22, r25
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:198
  }
  
  command(LCD_SETDDRAMADDR | (col + _row_offsets[row]));
     732:	e6 2f       	mov	r30, r22
     734:	f0 e0       	ldi	r31, 0x00	; 0
     736:	e7 53       	subi	r30, 0x37	; 55
     738:	fa 4f       	sbci	r31, 0xFA	; 250
     73a:	94 89       	ldd	r25, Z+20	; 0x14
     73c:	89 0f       	add	r24, r25
     73e:	80 68       	ori	r24, 0x80	; 128
     740:	0c 94 8d 03 	jmp	0x71a	; 0x71a <LiquidCrystal::command(unsigned char) [clone .constprop.41]>

00000744 <LiquidCrystal::clear() [clone .constprop.28]>:
_ZN13LiquidCrystal5clearEv.constprop.28():
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:178
}

/********** high level commands, for the user! */
void LiquidCrystal::clear()
{
  command(LCD_CLEARDISPLAY);  // clear display, set cursor position to zero
     744:	81 e0       	ldi	r24, 0x01	; 1
     746:	0e 94 8d 03 	call	0x71a	; 0x71a <LiquidCrystal::command(unsigned char) [clone .constprop.41]>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:179
  delayMicroseconds(2000);  // this command takes a long time!
     74a:	80 ed       	ldi	r24, 0xD0	; 208
     74c:	97 e0       	ldi	r25, 0x07	; 7
     74e:	0c 94 53 02 	jmp	0x4a6	; 0x4a6 <delayMicroseconds>

00000752 <LiquidCrystal::display() [clone .constprop.27]>:
_ZN13LiquidCrystal7displayEv.constprop.27():
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:207
void LiquidCrystal::noDisplay() {
  _displaycontrol &= ~LCD_DISPLAYON;
  command(LCD_DISPLAYCONTROL | _displaycontrol);
}
void LiquidCrystal::display() {
  _displaycontrol |= LCD_DISPLAYON;
     752:	e9 ec       	ldi	r30, 0xC9	; 201
     754:	f5 e0       	ldi	r31, 0x05	; 5
     756:	80 89       	ldd	r24, Z+16	; 0x10
     758:	98 2f       	mov	r25, r24
     75a:	94 60       	ori	r25, 0x04	; 4
     75c:	90 8b       	std	Z+16, r25	; 0x10
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:208
  command(LCD_DISPLAYCONTROL | _displaycontrol);
     75e:	8c 60       	ori	r24, 0x0C	; 12
     760:	0c 94 8d 03 	jmp	0x71a	; 0x71a <LiquidCrystal::command(unsigned char) [clone .constprop.41]>

00000764 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char) [clone .constprop.26]>:
_ZN13LiquidCrystal5beginEhhh.constprop.26():
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:78
    _displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;
  
  begin(16, 1);  
}

void LiquidCrystal::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) {
     764:	cf 93       	push	r28
     766:	df 93       	push	r29
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:79
  if (lines > 1) {
     768:	82 30       	cpi	r24, 0x02	; 2
     76a:	29 f4       	brne	.+10     	; 0x776 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char) [clone .constprop.26]+0x12>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:80
    _displayfunction |= LCD_2LINE;
     76c:	90 91 d8 05 	lds	r25, 0x05D8	; 0x8005d8 <lcd+0xf>
     770:	98 60       	ori	r25, 0x08	; 8
     772:	90 93 d8 05 	sts	0x05D8, r25	; 0x8005d8 <lcd+0xf>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:82
  }
  _numlines = lines;
     776:	80 93 dc 05 	sts	0x05DC, r24	; 0x8005dc <lcd+0x13>
setRowOffsets():
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:169

}

void LiquidCrystal::setRowOffsets(int row0, int row1, int row2, int row3)
{
  _row_offsets[0] = row0;
     77a:	10 92 dd 05 	sts	0x05DD, r1	; 0x8005dd <lcd+0x14>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:170
  _row_offsets[1] = row1;
     77e:	80 e4       	ldi	r24, 0x40	; 64
     780:	80 93 de 05 	sts	0x05DE, r24	; 0x8005de <lcd+0x15>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:171
  _row_offsets[2] = row2;
     784:	80 e1       	ldi	r24, 0x10	; 16
     786:	80 93 df 05 	sts	0x05DF, r24	; 0x8005df <lcd+0x16>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:172
  _row_offsets[3] = row3;
     78a:	80 e5       	ldi	r24, 0x50	; 80
     78c:	80 93 e0 05 	sts	0x05E0, r24	; 0x8005e0 <lcd+0x17>
_ZN13LiquidCrystal5beginEhhh.constprop.26():
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:91
  // for some 1 line displays you can select a 10 pixel high font
  if ((dotsize != LCD_5x8DOTS) && (lines == 1)) {
    _displayfunction |= LCD_5x10DOTS;
  }

  pinMode(_rs_pin, OUTPUT);
     790:	61 e0       	ldi	r22, 0x01	; 1
     792:	80 91 cd 05 	lds	r24, 0x05CD	; 0x8005cd <lcd+0x4>
     796:	0e 94 bf 01 	call	0x37e	; 0x37e <pinMode>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:93
  // we can save 1 pin by not using RW. Indicate by passing 255 instead of pin#
  if (_rw_pin != 255) { 
     79a:	80 91 ce 05 	lds	r24, 0x05CE	; 0x8005ce <lcd+0x5>
     79e:	8f 3f       	cpi	r24, 0xFF	; 255
     7a0:	19 f0       	breq	.+6      	; 0x7a8 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char) [clone .constprop.26]+0x44>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:94
    pinMode(_rw_pin, OUTPUT);
     7a2:	61 e0       	ldi	r22, 0x01	; 1
     7a4:	0e 94 bf 01 	call	0x37e	; 0x37e <pinMode>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:96
  }
  pinMode(_enable_pin, OUTPUT);
     7a8:	61 e0       	ldi	r22, 0x01	; 1
     7aa:	80 91 cf 05 	lds	r24, 0x05CF	; 0x8005cf <lcd+0x6>
     7ae:	0e 94 bf 01 	call	0x37e	; 0x37e <pinMode>
     7b2:	c9 ec       	ldi	r28, 0xC9	; 201
     7b4:	d5 e0       	ldi	r29, 0x05	; 5
     7b6:	9e 01       	movw	r18, r28
     7b8:	29 5c       	subi	r18, 0xC9	; 201
     7ba:	35 40       	sbci	r19, 0x05	; 5
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:99
  
  // Do these once, instead of every time a character is drawn for speed reasons.
  for (int i=0; i<((_displayfunction & LCD_8BITMODE) ? 8 : 4); ++i)
     7bc:	80 91 d8 05 	lds	r24, 0x05D8	; 0x8005d8 <lcd+0xf>
     7c0:	84 fd       	sbrc	r24, 4
     7c2:	0b c0       	rjmp	.+22     	; 0x7da <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char) [clone .constprop.26]+0x76>
     7c4:	84 e0       	ldi	r24, 0x04	; 4
     7c6:	90 e0       	ldi	r25, 0x00	; 0
     7c8:	21 96       	adiw	r28, 0x01	; 1
     7ca:	28 17       	cp	r18, r24
     7cc:	39 07       	cpc	r19, r25
     7ce:	44 f4       	brge	.+16     	; 0x7e0 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char) [clone .constprop.26]+0x7c>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:101
  {
    pinMode(_data_pins[i], OUTPUT);
     7d0:	61 e0       	ldi	r22, 0x01	; 1
     7d2:	8e 81       	ldd	r24, Y+6	; 0x06
     7d4:	0e 94 bf 01 	call	0x37e	; 0x37e <pinMode>
     7d8:	ee cf       	rjmp	.-36     	; 0x7b6 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char) [clone .constprop.26]+0x52>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:99
    pinMode(_rw_pin, OUTPUT);
  }
  pinMode(_enable_pin, OUTPUT);
  
  // Do these once, instead of every time a character is drawn for speed reasons.
  for (int i=0; i<((_displayfunction & LCD_8BITMODE) ? 8 : 4); ++i)
     7da:	88 e0       	ldi	r24, 0x08	; 8
     7dc:	90 e0       	ldi	r25, 0x00	; 0
     7de:	f4 cf       	rjmp	.-24     	; 0x7c8 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char) [clone .constprop.26]+0x64>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:107
   } 

  // SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
  // according to datasheet, we need at least 40ms after power rises above 2.7V
  // before sending commands. Arduino can turn on way before 4.5V so we'll wait 50
  delayMicroseconds(50000); 
     7e0:	80 e5       	ldi	r24, 0x50	; 80
     7e2:	93 ec       	ldi	r25, 0xC3	; 195
     7e4:	0e 94 53 02 	call	0x4a6	; 0x4a6 <delayMicroseconds>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:109
  // Now we pull both RS and R/W low to begin commands
  digitalWrite(_rs_pin, LOW);
     7e8:	60 e0       	ldi	r22, 0x00	; 0
     7ea:	80 91 cd 05 	lds	r24, 0x05CD	; 0x8005cd <lcd+0x4>
     7ee:	0e 94 5f 01 	call	0x2be	; 0x2be <digitalWrite>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:110
  digitalWrite(_enable_pin, LOW);
     7f2:	60 e0       	ldi	r22, 0x00	; 0
     7f4:	80 91 cf 05 	lds	r24, 0x05CF	; 0x8005cf <lcd+0x6>
     7f8:	0e 94 5f 01 	call	0x2be	; 0x2be <digitalWrite>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:111
  if (_rw_pin != 255) { 
     7fc:	80 91 ce 05 	lds	r24, 0x05CE	; 0x8005ce <lcd+0x5>
     800:	8f 3f       	cpi	r24, 0xFF	; 255
     802:	19 f0       	breq	.+6      	; 0x80a <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char) [clone .constprop.26]+0xa6>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:112
    digitalWrite(_rw_pin, LOW);
     804:	60 e0       	ldi	r22, 0x00	; 0
     806:	0e 94 5f 01 	call	0x2be	; 0x2be <digitalWrite>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:116
  }
  
  //put the LCD into 4 bit or 8 bit mode
  if (! (_displayfunction & LCD_8BITMODE)) {
     80a:	80 91 d8 05 	lds	r24, 0x05D8	; 0x8005d8 <lcd+0xf>
     80e:	84 fd       	sbrc	r24, 4
     810:	34 c0       	rjmp	.+104    	; 0x87a <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char) [clone .constprop.26]+0x116>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:121
    // this is according to the hitachi HD44780 datasheet
    // figure 24, pg 46

    // we start in 8bit mode, try to set 4 bit mode
    write4bits(0x03);
     812:	63 e0       	ldi	r22, 0x03	; 3
     814:	89 ec       	ldi	r24, 0xC9	; 201
     816:	95 e0       	ldi	r25, 0x05	; 5
     818:	0e 94 0d 03 	call	0x61a	; 0x61a <LiquidCrystal::write4bits(unsigned char)>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:122
    delayMicroseconds(4500); // wait min 4.1ms
     81c:	84 e9       	ldi	r24, 0x94	; 148
     81e:	91 e1       	ldi	r25, 0x11	; 17
     820:	0e 94 53 02 	call	0x4a6	; 0x4a6 <delayMicroseconds>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:125

    // second try
    write4bits(0x03);
     824:	63 e0       	ldi	r22, 0x03	; 3
     826:	89 ec       	ldi	r24, 0xC9	; 201
     828:	95 e0       	ldi	r25, 0x05	; 5
     82a:	0e 94 0d 03 	call	0x61a	; 0x61a <LiquidCrystal::write4bits(unsigned char)>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:126
    delayMicroseconds(4500); // wait min 4.1ms
     82e:	84 e9       	ldi	r24, 0x94	; 148
     830:	91 e1       	ldi	r25, 0x11	; 17
     832:	0e 94 53 02 	call	0x4a6	; 0x4a6 <delayMicroseconds>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:129
    
    // third go!
    write4bits(0x03); 
     836:	63 e0       	ldi	r22, 0x03	; 3
     838:	89 ec       	ldi	r24, 0xC9	; 201
     83a:	95 e0       	ldi	r25, 0x05	; 5
     83c:	0e 94 0d 03 	call	0x61a	; 0x61a <LiquidCrystal::write4bits(unsigned char)>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:130
    delayMicroseconds(150);
     840:	86 e9       	ldi	r24, 0x96	; 150
     842:	90 e0       	ldi	r25, 0x00	; 0
     844:	0e 94 53 02 	call	0x4a6	; 0x4a6 <delayMicroseconds>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:133

    // finally, set to 4-bit interface
    write4bits(0x02); 
     848:	62 e0       	ldi	r22, 0x02	; 2
     84a:	89 ec       	ldi	r24, 0xC9	; 201
     84c:	95 e0       	ldi	r25, 0x05	; 5
     84e:	0e 94 0d 03 	call	0x61a	; 0x61a <LiquidCrystal::write4bits(unsigned char)>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:151
    // third go
    command(LCD_FUNCTIONSET | _displayfunction);
  }

  // finally, set # lines, font size, etc.
  command(LCD_FUNCTIONSET | _displayfunction);  
     852:	80 91 d8 05 	lds	r24, 0x05D8	; 0x8005d8 <lcd+0xf>
     856:	80 62       	ori	r24, 0x20	; 32
     858:	0e 94 8d 03 	call	0x71a	; 0x71a <LiquidCrystal::command(unsigned char) [clone .constprop.41]>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:154

  // turn the display on with no cursor or blinking default
  _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;  
     85c:	84 e0       	ldi	r24, 0x04	; 4
     85e:	80 93 d9 05 	sts	0x05D9, r24	; 0x8005d9 <lcd+0x10>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:155
  display();
     862:	0e 94 a9 03 	call	0x752	; 0x752 <LiquidCrystal::display() [clone .constprop.27]>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:158

  // clear it off
  clear();
     866:	0e 94 a2 03 	call	0x744	; 0x744 <LiquidCrystal::clear() [clone .constprop.28]>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:161

  // Initialize to default text direction (for romance languages)
  _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
     86a:	82 e0       	ldi	r24, 0x02	; 2
     86c:	80 93 da 05 	sts	0x05DA, r24	; 0x8005da <lcd+0x11>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:163
  // set the entry mode
  command(LCD_ENTRYMODESET | _displaymode);
     870:	86 e0       	ldi	r24, 0x06	; 6
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:165

}
     872:	df 91       	pop	r29
     874:	cf 91       	pop	r28
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:163
  clear();

  // Initialize to default text direction (for romance languages)
  _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
  // set the entry mode
  command(LCD_ENTRYMODESET | _displaymode);
     876:	0c 94 8d 03 	jmp	0x71a	; 0x71a <LiquidCrystal::command(unsigned char) [clone .constprop.41]>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:139
  } else {
    // this is according to the hitachi HD44780 datasheet
    // page 45 figure 23

    // Send function set command sequence
    command(LCD_FUNCTIONSET | _displayfunction);
     87a:	80 62       	ori	r24, 0x20	; 32
     87c:	0e 94 8d 03 	call	0x71a	; 0x71a <LiquidCrystal::command(unsigned char) [clone .constprop.41]>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:140
    delayMicroseconds(4500);  // wait more than 4.1ms
     880:	84 e9       	ldi	r24, 0x94	; 148
     882:	91 e1       	ldi	r25, 0x11	; 17
     884:	0e 94 53 02 	call	0x4a6	; 0x4a6 <delayMicroseconds>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:143

    // second try
    command(LCD_FUNCTIONSET | _displayfunction);
     888:	80 91 d8 05 	lds	r24, 0x05D8	; 0x8005d8 <lcd+0xf>
     88c:	80 62       	ori	r24, 0x20	; 32
     88e:	0e 94 8d 03 	call	0x71a	; 0x71a <LiquidCrystal::command(unsigned char) [clone .constprop.41]>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:144
    delayMicroseconds(150);
     892:	86 e9       	ldi	r24, 0x96	; 150
     894:	90 e0       	ldi	r25, 0x00	; 0
     896:	0e 94 53 02 	call	0x4a6	; 0x4a6 <delayMicroseconds>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:147

    // third go
    command(LCD_FUNCTIONSET | _displayfunction);
     89a:	80 91 d8 05 	lds	r24, 0x05D8	; 0x8005d8 <lcd+0xf>
     89e:	80 62       	ori	r24, 0x20	; 32
     8a0:	0e 94 8d 03 	call	0x71a	; 0x71a <LiquidCrystal::command(unsigned char) [clone .constprop.41]>
     8a4:	d6 cf       	rjmp	.-84     	; 0x852 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char) [clone .constprop.26]+0xee>

000008a6 <LiquidCrystal::write(unsigned char)>:
_ZN13LiquidCrystal5writeEh():
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:280
inline void LiquidCrystal::command(uint8_t value) {
  send(value, LOW);
}

inline size_t LiquidCrystal::write(uint8_t value) {
  send(value, HIGH);
     8a6:	41 e0       	ldi	r20, 0x01	; 1
     8a8:	0e 94 3a 03 	call	0x674	; 0x674 <LiquidCrystal::send(unsigned char, unsigned char)>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:282
  return 1; // assume sucess
}
     8ac:	81 e0       	ldi	r24, 0x01	; 1
     8ae:	90 e0       	ldi	r25, 0x00	; 0
     8b0:	08 95       	ret

000008b2 <Print::flush()>:
_ZN5Print5flushEv():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/Print.h:65

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }

    virtual void flush() { /* Empty implementation for backward compatibility */ }
     8b2:	08 95       	ret

000008b4 <twi_stop>:
twi_stop():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:436
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
     8b4:	85 ed       	ldi	r24, 0xD5	; 213
     8b6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:456
          return;
        }
      }
    }
  #else
    while(TWCR & _BV(TWSTO)){
     8ba:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
     8be:	84 fd       	sbrc	r24, 4
     8c0:	fc cf       	rjmp	.-8      	; 0x8ba <twi_stop+0x6>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:462
      continue;
    }
  #endif

  // update twi state
  twi_state = TWI_READY;
     8c2:	10 92 95 05 	sts	0x0595, r1	; 0x800595 <twi_state>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:463
}
     8c6:	08 95       	ret

000008c8 <twi_transmit>:
twi_transmit():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:371
uint8_t twi_transmit(const uint8_t* data, uint8_t length)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < (twi_txBufferLength+length)){
     8c8:	20 91 37 05 	lds	r18, 0x0537	; 0x800537 <twi_txBufferLength>
     8cc:	26 0f       	add	r18, r22
     8ce:	33 27       	eor	r19, r19
     8d0:	33 1f       	adc	r19, r19
     8d2:	21 32       	cpi	r18, 0x21	; 33
     8d4:	31 05       	cpc	r19, r1
     8d6:	ec f4       	brge	.+58     	; 0x912 <__stack+0x13>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:376
    return 1;
  }

  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
     8d8:	20 91 95 05 	lds	r18, 0x0595	; 0x800595 <twi_state>
     8dc:	fc 01       	movw	r30, r24
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	80 e0       	ldi	r24, 0x00	; 0
     8e2:	24 30       	cpi	r18, 0x04	; 4
     8e4:	69 f0       	breq	.+26     	; 0x900 <__stack+0x1>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:377
    return 2;
     8e6:	82 e0       	ldi	r24, 0x02	; 2
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:387
    twi_txBuffer[twi_txBufferLength+i] = data[i];
  }
  twi_txBufferLength += length;

  return 0;
}
     8e8:	08 95       	ret
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:382
    return 2;
  }

  // set length and copy data into tx buffer
  for(i = 0; i < length; ++i){
    twi_txBuffer[twi_txBufferLength+i] = data[i];
     8ea:	a0 91 37 05 	lds	r26, 0x0537	; 0x800537 <twi_txBufferLength>
     8ee:	21 91       	ld	r18, Z+
     8f0:	ac 01       	movw	r20, r24
     8f2:	49 5e       	subi	r20, 0xE9	; 233
     8f4:	5a 4f       	sbci	r21, 0xFA	; 250
     8f6:	a4 0f       	add	r26, r20
     8f8:	b5 2f       	mov	r27, r21
     8fa:	b1 1d       	adc	r27, r1
     8fc:	2c 93       	st	X, r18
     8fe:	01 96       	adiw	r24, 0x01	; 1
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:381
  if(TWI_STX != twi_state){
    return 2;
  }

  // set length and copy data into tx buffer
  for(i = 0; i < length; ++i){
     900:	86 17       	cp	r24, r22
     902:	98 f3       	brcs	.-26     	; 0x8ea <twi_transmit+0x22>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:384
    twi_txBuffer[twi_txBufferLength+i] = data[i];
  }
  twi_txBufferLength += length;
     904:	80 91 37 05 	lds	r24, 0x0537	; 0x800537 <twi_txBufferLength>
     908:	68 0f       	add	r22, r24
     90a:	60 93 37 05 	sts	0x0537, r22	; 0x800537 <twi_txBufferLength>
     90e:	80 e0       	ldi	r24, 0x00	; 0
     910:	08 95       	ret
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:372
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < (twi_txBufferLength+length)){
    return 1;
     912:	81 e0       	ldi	r24, 0x01	; 1
     914:	08 95       	ret

00000916 <TwoWire::flush()>:
_ZN7TwoWire5flushEv():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/Wire.cpp:326
}

void TwoWire::flush(void)
{
  // XXX: to be implemented.
}
     916:	08 95       	ret

00000918 <TwoWire::peek()>:
_ZN7TwoWire4peekEv():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/Wire.cpp:316
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;

  if(rxBufferIndex < rxBufferLength){
     918:	e0 91 6c 05 	lds	r30, 0x056C	; 0x80056c <TwoWire::rxBufferIndex>
     91c:	80 91 6b 05 	lds	r24, 0x056B	; 0x80056b <TwoWire::rxBufferLength>
     920:	e8 17       	cp	r30, r24
     922:	30 f4       	brcc	.+12     	; 0x930 <TwoWire::peek()+0x18>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/Wire.cpp:317
    value = rxBuffer[rxBufferIndex];
     924:	f0 e0       	ldi	r31, 0x00	; 0
     926:	e3 59       	subi	r30, 0x93	; 147
     928:	fa 4f       	sbci	r31, 0xFA	; 250
     92a:	80 81       	ld	r24, Z
     92c:	90 e0       	ldi	r25, 0x00	; 0
     92e:	08 95       	ret
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/Wire.cpp:314
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;
     930:	8f ef       	ldi	r24, 0xFF	; 255
     932:	9f ef       	ldi	r25, 0xFF	; 255
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/Wire.cpp:321
  if(rxBufferIndex < rxBufferLength){
    value = rxBuffer[rxBufferIndex];
  }

  return value;
}
     934:	08 95       	ret

00000936 <TwoWire::read()>:
_ZN7TwoWire4readEv():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/Wire.cpp:301
int TwoWire::read(void)
{
  int value = -1;

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
     936:	90 91 6c 05 	lds	r25, 0x056C	; 0x80056c <TwoWire::rxBufferIndex>
     93a:	80 91 6b 05 	lds	r24, 0x056B	; 0x80056b <TwoWire::rxBufferLength>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/Wire.cpp:298
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  int value = -1;
     93e:	2f ef       	ldi	r18, 0xFF	; 255
     940:	3f ef       	ldi	r19, 0xFF	; 255
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/Wire.cpp:301

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
     942:	98 17       	cp	r25, r24
     944:	48 f4       	brcc	.+18     	; 0x958 <TwoWire::read()+0x22>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/Wire.cpp:302
    value = rxBuffer[rxBufferIndex];
     946:	e9 2f       	mov	r30, r25
     948:	f0 e0       	ldi	r31, 0x00	; 0
     94a:	e3 59       	subi	r30, 0x93	; 147
     94c:	fa 4f       	sbci	r31, 0xFA	; 250
     94e:	20 81       	ld	r18, Z
     950:	30 e0       	ldi	r19, 0x00	; 0
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/Wire.cpp:303
    ++rxBufferIndex;
     952:	9f 5f       	subi	r25, 0xFF	; 255
     954:	90 93 6c 05 	sts	0x056C, r25	; 0x80056c <TwoWire::rxBufferIndex>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/Wire.cpp:307
  }

  return value;
}
     958:	c9 01       	movw	r24, r18
     95a:	08 95       	ret

0000095c <TwoWire::available()>:
_ZN7TwoWire9availableEv():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/Wire.cpp:290
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return rxBufferLength - rxBufferIndex;
     95c:	80 91 6b 05 	lds	r24, 0x056B	; 0x80056b <TwoWire::rxBufferLength>
     960:	90 91 6c 05 	lds	r25, 0x056C	; 0x80056c <TwoWire::rxBufferIndex>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/Wire.cpp:291
}
     964:	89 1b       	sub	r24, r25
     966:	99 0b       	sbc	r25, r25
     968:	08 95       	ret

0000096a <TwoWire::write(unsigned char const*, unsigned int)>:
_ZN7TwoWire5writeEPKhj():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/Wire.cpp:271

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
     96a:	cf 92       	push	r12
     96c:	df 92       	push	r13
     96e:	ef 92       	push	r14
     970:	ff 92       	push	r15
     972:	0f 93       	push	r16
     974:	1f 93       	push	r17
     976:	cf 93       	push	r28
     978:	df 93       	push	r29
     97a:	7c 01       	movw	r14, r24
     97c:	cb 01       	movw	r24, r22
     97e:	8a 01       	movw	r16, r20
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/Wire.cpp:272
  if(transmitting){
     980:	20 91 96 05 	lds	r18, 0x0596	; 0x800596 <TwoWire::transmitting>
     984:	22 23       	and	r18, r18
     986:	89 f0       	breq	.+34     	; 0x9aa <TwoWire::write(unsigned char const*, unsigned int)+0x40>
     988:	eb 01       	movw	r28, r22
     98a:	6b 01       	movw	r12, r22
     98c:	c4 0e       	add	r12, r20
     98e:	d5 1e       	adc	r13, r21
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/Wire.cpp:274
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
     990:	cc 15       	cp	r28, r12
     992:	dd 05       	cpc	r29, r13
     994:	69 f0       	breq	.+26     	; 0x9b0 <TwoWire::write(unsigned char const*, unsigned int)+0x46>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/Wire.cpp:275
      write(data[i]);
     996:	69 91       	ld	r22, Y+
     998:	d7 01       	movw	r26, r14
     99a:	ed 91       	ld	r30, X+
     99c:	fc 91       	ld	r31, X
     99e:	01 90       	ld	r0, Z+
     9a0:	f0 81       	ld	r31, Z
     9a2:	e0 2d       	mov	r30, r0
     9a4:	c7 01       	movw	r24, r14
     9a6:	09 95       	icall
     9a8:	f3 cf       	rjmp	.-26     	; 0x990 <TwoWire::write(unsigned char const*, unsigned int)+0x26>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/Wire.cpp:280
    }
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(data, quantity);
     9aa:	64 2f       	mov	r22, r20
     9ac:	0e 94 64 04 	call	0x8c8	; 0x8c8 <twi_transmit>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/Wire.cpp:283
  }
  return quantity;
}
     9b0:	c8 01       	movw	r24, r16
     9b2:	df 91       	pop	r29
     9b4:	cf 91       	pop	r28
     9b6:	1f 91       	pop	r17
     9b8:	0f 91       	pop	r16
     9ba:	ff 90       	pop	r15
     9bc:	ef 90       	pop	r14
     9be:	df 90       	pop	r13
     9c0:	cf 90       	pop	r12
     9c2:	08 95       	ret

000009c4 <TwoWire::write(unsigned char)>:
_ZN7TwoWire5writeEh():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/Wire.cpp:246

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
     9c4:	cf 93       	push	r28
     9c6:	df 93       	push	r29
     9c8:	1f 92       	push	r1
     9ca:	cd b7       	in	r28, 0x3d	; 61
     9cc:	de b7       	in	r29, 0x3e	; 62
     9ce:	69 83       	std	Y+1, r22	; 0x01
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/Wire.cpp:247
  if(transmitting){
     9d0:	20 91 96 05 	lds	r18, 0x0596	; 0x800596 <TwoWire::transmitting>
     9d4:	22 23       	and	r18, r18
     9d6:	f9 f0       	breq	.+62     	; 0xa16 <TwoWire::write(unsigned char)+0x52>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/Wire.cpp:250
  // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= TWI_BUFFER_SIZE){
     9d8:	20 91 b9 05 	lds	r18, 0x05B9	; 0x8005b9 <TwoWire::txBufferLength>
     9dc:	20 32       	cpi	r18, 0x20	; 32
     9de:	58 f0       	brcs	.+22     	; 0x9f6 <TwoWire::write(unsigned char)+0x32>
_ZN5Print13setWriteErrorEi():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/Print.h:44
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
     9e0:	21 e0       	ldi	r18, 0x01	; 1
     9e2:	30 e0       	ldi	r19, 0x00	; 0
     9e4:	fc 01       	movw	r30, r24
     9e6:	33 83       	std	Z+3, r19	; 0x03
     9e8:	22 83       	std	Z+2, r18	; 0x02
_ZN7TwoWire5writeEh():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/Wire.cpp:252
      setWriteError();
      return 0;
     9ea:	90 e0       	ldi	r25, 0x00	; 0
     9ec:	80 e0       	ldi	r24, 0x00	; 0
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/Wire.cpp:265
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
  }
  return 1;
}
     9ee:	0f 90       	pop	r0
     9f0:	df 91       	pop	r29
     9f2:	cf 91       	pop	r28
     9f4:	08 95       	ret
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/Wire.cpp:255
    if(txBufferLength >= TWI_BUFFER_SIZE){
      setWriteError();
      return 0;
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
     9f6:	80 91 97 05 	lds	r24, 0x0597	; 0x800597 <TwoWire::txBufferIndex>
     9fa:	e8 2f       	mov	r30, r24
     9fc:	f0 e0       	ldi	r31, 0x00	; 0
     9fe:	e8 56       	subi	r30, 0x68	; 104
     a00:	fa 4f       	sbci	r31, 0xFA	; 250
     a02:	99 81       	ldd	r25, Y+1	; 0x01
     a04:	90 83       	st	Z, r25
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/Wire.cpp:256
    ++txBufferIndex;
     a06:	8f 5f       	subi	r24, 0xFF	; 255
     a08:	80 93 97 05 	sts	0x0597, r24	; 0x800597 <TwoWire::txBufferIndex>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/Wire.cpp:258
    // update amount in buffer
    txBufferLength = txBufferIndex;
     a0c:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <TwoWire::txBufferLength>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/Wire.cpp:264
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
  }
  return 1;
     a10:	81 e0       	ldi	r24, 0x01	; 1
     a12:	90 e0       	ldi	r25, 0x00	; 0
     a14:	ec cf       	rjmp	.-40     	; 0x9ee <TwoWire::write(unsigned char)+0x2a>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/Wire.cpp:262
    // update amount in buffer
    txBufferLength = txBufferIndex;
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
     a16:	61 e0       	ldi	r22, 0x01	; 1
     a18:	ce 01       	movw	r24, r28
     a1a:	01 96       	adiw	r24, 0x01	; 1
     a1c:	0e 94 64 04 	call	0x8c8	; 0x8c8 <twi_transmit>
     a20:	f7 cf       	rjmp	.-18     	; 0xa10 <TwoWire::write(unsigned char)+0x4c>

00000a22 <QN8066::setRegister(unsigned char, unsigned char) [clone .constprop.61]>:
_ZN6QN806611setRegisterEhh.constprop.61():
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:89
 * @brief Stores a velue to a given register
 * @details 8066 commands. It provides a means to run commands that are not currently supported by the standard API.
 * @param registerNumber
 * @param value
 */
void QN8066::setRegister(uint8_t registerNumber, uint8_t value) {
     a22:	cf 93       	push	r28
     a24:	c6 2f       	mov	r28, r22
beginTransmission():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/Wire.cpp:196
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
     a26:	91 e0       	ldi	r25, 0x01	; 1
     a28:	90 93 96 05 	sts	0x0596, r25	; 0x800596 <TwoWire::transmitting>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/Wire.cpp:198
  // set address of targeted slave
  txAddress = address;
     a2c:	91 e2       	ldi	r25, 0x21	; 33
     a2e:	90 93 b8 05 	sts	0x05B8, r25	; 0x8005b8 <TwoWire::txAddress>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/Wire.cpp:200
  // reset tx buffer iterator vars
  txBufferIndex = 0;
     a32:	10 92 97 05 	sts	0x0597, r1	; 0x800597 <TwoWire::txBufferIndex>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/Wire.cpp:201
  txBufferLength = 0;
     a36:	10 92 b9 05 	sts	0x05B9, r1	; 0x8005b9 <TwoWire::txBufferLength>
_ZN6QN806611setRegisterEhh.constprop.61():
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:92

  Wire.beginTransmission(QN8066_I2C_ADDRESS);
  Wire.write(registerNumber);
     a3a:	68 2f       	mov	r22, r24
     a3c:	8a eb       	ldi	r24, 0xBA	; 186
     a3e:	95 e0       	ldi	r25, 0x05	; 5
     a40:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <TwoWire::write(unsigned char)>
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:93
  Wire.write(value);
     a44:	6c 2f       	mov	r22, r28
     a46:	8a eb       	ldi	r24, 0xBA	; 186
     a48:	95 e0       	ldi	r25, 0x05	; 5
     a4a:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <TwoWire::write(unsigned char)>
endTransmission():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/Wire.cpp:239
//  This provides backwards compatibility with the original
//  definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
     a4e:	81 e0       	ldi	r24, 0x01	; 1
     a50:	0e 94 91 00 	call	0x122	; 0x122 <TwoWire::endTransmission(unsigned char) [clone .constprop.65]>
_ZN6QN806611setRegisterEhh.constprop.61():
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:95
  Wire.endTransmission();
  delayMicroseconds(QN8066_DELAY_COMMAND);
     a54:	84 ec       	ldi	r24, 0xC4	; 196
     a56:	99 e0       	ldi	r25, 0x09	; 9
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:96
}
     a58:	cf 91       	pop	r28
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:95

  Wire.beginTransmission(QN8066_I2C_ADDRESS);
  Wire.write(registerNumber);
  Wire.write(value);
  Wire.endTransmission();
  delayMicroseconds(QN8066_DELAY_COMMAND);
     a5a:	0c 94 53 02 	jmp	0x4a6	; 0x4a6 <delayMicroseconds>

00000a5e <QN8066::setTX(unsigned int) [clone .constprop.16]>:
_ZN6QN80665setTXEj.constprop.16():
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:358
 * void loop() {
 * }
 * @endcode 
 * @todo Under improvements 
 */
void QN8066::setTX(uint16_t frequency) {
     a5e:	0f 93       	push	r16
     a60:	1f 93       	push	r17
     a62:	cf 93       	push	r28
     a64:	df 93       	push	r29
     a66:	8c 01       	movw	r16, r24
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:359
  this->setRegister(QN_SYSTEM1, this->system1.raw); // SYSTEM1 => 11100011  =>  swrst = 1; recal = 1; stnby = 1; ccs_ch_dis = 1; cca_ch_dis = 1
     a68:	c1 ee       	ldi	r28, 0xE1	; 225
     a6a:	d5 e0       	ldi	r29, 0x05	; 5
     a6c:	6c 81       	ldd	r22, Y+4	; 0x04
     a6e:	80 e0       	ldi	r24, 0x00	; 0
     a70:	0e 94 11 05 	call	0xa22	; 0xa22 <QN8066::setRegister(unsigned char, unsigned char) [clone .constprop.61]>
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:360
  this->setRegister(QN_SYSTEM2, this->system2.raw); 
     a74:	6d 81       	ldd	r22, Y+5	; 0x05
     a76:	81 e0       	ldi	r24, 0x01	; 1
     a78:	0e 94 11 05 	call	0xa22	; 0xa22 <QN8066::setRegister(unsigned char, unsigned char) [clone .constprop.61]>
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:361
  this->system2.arg.rdsrdy = !(this->system2.arg.rdsrdy); // Toggle 
     a7c:	e6 ee       	ldi	r30, 0xE6	; 230
     a7e:	f5 e0       	ldi	r31, 0x05	; 5
     a80:	80 81       	ld	r24, Z
     a82:	68 2f       	mov	r22, r24
     a84:	6d 7f       	andi	r22, 0xFD	; 253
     a86:	81 ff       	sbrs	r24, 1
     a88:	62 60       	ori	r22, 0x02	; 2
     a8a:	60 83       	st	Z, r22
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:362
  this->setRegister(QN_SYSTEM2, this->system2.raw); 
     a8c:	81 e0       	ldi	r24, 0x01	; 1
     a8e:	0e 94 11 05 	call	0xa22	; 0xa22 <QN8066::setRegister(unsigned char, unsigned char) [clone .constprop.61]>
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:363
  this->setRegister(QN_CCA, this->cca.raw); // CCA => 01010000 => xtal_inj = 0; imr = 1; SNR_CCA_TH = 010000
     a92:	6f 81       	ldd	r22, Y+7	; 0x07
     a94:	82 e0       	ldi	r24, 0x02	; 2
     a96:	0e 94 11 05 	call	0xa22	; 0xa22 <QN8066::setRegister(unsigned char, unsigned char) [clone .constprop.61]>
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:365
  // Sets the crystal oscillator divider
  this->setRegister(QN_XTAL_DIV0, this->xtal_div & 0xFF); // Lower 8 bits of xtal_div[10:0].
     a9a:	6a 81       	ldd	r22, Y+2	; 0x02
     a9c:	87 e0       	ldi	r24, 0x07	; 7
     a9e:	0e 94 11 05 	call	0xa22	; 0xa22 <QN8066::setRegister(unsigned char, unsigned char) [clone .constprop.61]>
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:366
  this->setRegister(QN_XTAL_DIV1, (this->xtal_div >> 8) |  0B0001000); // Higher 3 bits of xtal_div[10:0].
     aa2:	6b 81       	ldd	r22, Y+3	; 0x03
     aa4:	68 60       	ori	r22, 0x08	; 8
     aa6:	88 e0       	ldi	r24, 0x08	; 8
     aa8:	0e 94 11 05 	call	0xa22	; 0xa22 <QN8066::setRegister(unsigned char, unsigned char) [clone .constprop.61]>
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:367
  this->setRegister(QN_XTAL_DIV2, 0B01011100); // XTAL_DIV2 = > 01011100 (It is the default value)
     aac:	6c e5       	ldi	r22, 0x5C	; 92
     aae:	89 e0       	ldi	r24, 0x09	; 9
     ab0:	0e 94 11 05 	call	0xa22	; 0xa22 <QN8066::setRegister(unsigned char, unsigned char) [clone .constprop.61]>
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:370

  // this->setRegister(QN_SYSTEM1, this->system1.raw); // SYSTEM1 => 00001011 => Set TX On
  this->setRegister(QN_FDEV, this->fdev.raw);    // FDEV => 01111101 => 125 (Decimal)
     ab4:	68 85       	ldd	r22, Y+8	; 0x08
     ab6:	85 e2       	ldi	r24, 0x25	; 37
     ab8:	0e 94 11 05 	call	0xa22	; 0xa22 <QN8066::setRegister(unsigned char, unsigned char) [clone .constprop.61]>
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:371
  this->setRegister(QN_RDS, this->rds.raw);     // RDS => 00111100 => Line_in_en = 0; RDSFDEV = 60 (Decimal) 
     abc:	6f 85       	ldd	r22, Y+15	; 0x0f
     abe:	86 e2       	ldi	r24, 0x26	; 38
     ac0:	0e 94 11 05 	call	0xa22	; 0xa22 <QN8066::setRegister(unsigned char, unsigned char) [clone .constprop.61]>
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:372
  this->setRegister(QN_GPLT, this->gplt.raw);    // GPLT => 00111001 => Tx_sftclpth = 00 (12’d2051 - 3db back off from 0.5v); t1m_sel = 11 (Infinity); GAIN_TXPLT = 1001 (9% 75 kHz)
     ac4:	6e 81       	ldd	r22, Y+6	; 0x06
     ac6:	87 e2       	ldi	r24, 0x27	; 39
     ac8:	0e 94 11 05 	call	0xa22	; 0xa22 <QN8066::setRegister(unsigned char, unsigned char) [clone .constprop.61]>
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:374

  int16_t auxFreq = (frequency - 600)  * 2;
     acc:	08 55       	subi	r16, 0x58	; 88
     ace:	12 48       	sbci	r17, 0x82	; 130
     ad0:	00 0f       	add	r16, r16
     ad2:	11 1f       	adc	r17, r17
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:375
  this->int_ctrl.raw =  0B00100000 | auxFreq >> 8;
     ad4:	61 2f       	mov	r22, r17
     ad6:	60 62       	ori	r22, 0x20	; 32
     ad8:	69 87       	std	Y+9, r22	; 0x09
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:376
  this->setRegister(QN_INT_CTRL,this->int_ctrl.raw );
     ada:	89 e1       	ldi	r24, 0x19	; 25
     adc:	0e 94 11 05 	call	0xa22	; 0xa22 <QN8066::setRegister(unsigned char, unsigned char) [clone .constprop.61]>
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:377
  this->setRegister(QN_TXCH, 0B11111111 & auxFreq);
     ae0:	60 2f       	mov	r22, r16
     ae2:	8b e1       	ldi	r24, 0x1B	; 27
     ae4:	0e 94 11 05 	call	0xa22	; 0xa22 <QN8066::setRegister(unsigned char, unsigned char) [clone .constprop.61]>
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:381

  // Checking unkown registers
  // this->setRegister(0x49, 0B11101000); 
  this->setRegister(0x49, 0B11011111); 
     ae8:	6f ed       	ldi	r22, 0xDF	; 223
     aea:	89 e4       	ldi	r24, 0x49	; 73
     aec:	0e 94 11 05 	call	0xa22	; 0xa22 <QN8066::setRegister(unsigned char, unsigned char) [clone .constprop.61]>
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:382
  this->setRegister(0x6E, 0B11111111); 
     af0:	6f ef       	ldi	r22, 0xFF	; 255
     af2:	8e e6       	ldi	r24, 0x6E	; 110
     af4:	0e 94 11 05 	call	0xa22	; 0xa22 <QN8066::setRegister(unsigned char, unsigned char) [clone .constprop.61]>
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:384

  this->system1.raw = 0B00001011;
     af8:	8b e0       	ldi	r24, 0x0B	; 11
     afa:	8c 83       	std	Y+4, r24	; 0x04
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:385
  this->setRegister(QN_SYSTEM1, this->system1.raw); // SYSTEM1 => 00001011 => txreq = 1; ccs_ch_dis = 1; cca_ch_dis = 1 
     afc:	6b e0       	ldi	r22, 0x0B	; 11
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	0e 94 11 05 	call	0xa22	; 0xa22 <QN8066::setRegister(unsigned char, unsigned char) [clone .constprop.61]>
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:387
  // this->setRegister(QN_REG_VGA, 0B01011011); // REG_VGA =>  01011011 => Tx_sftclpen = 0; TXAGC_GVGA = 101; TXAGC_GDB = 10; RIN = 11 (80K)
  this->setRegister(QN_REG_VGA, this->reg_vga.raw); // REG_VGA =>  01011011 => Tx_sftclpen = 0; TXAGC_GVGA = 101; TXAGC_GDB = 10; RIN = 11 (80K)
     b04:	6e 85       	ldd	r22, Y+14	; 0x0e
     b06:	88 e2       	ldi	r24, 0x28	; 40
     b08:	0e 94 11 05 	call	0xa22	; 0xa22 <QN8066::setRegister(unsigned char, unsigned char) [clone .constprop.61]>
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:388
  delay(100);
     b0c:	64 e6       	ldi	r22, 0x64	; 100
     b0e:	70 e0       	ldi	r23, 0x00	; 0
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	90 e0       	ldi	r25, 0x00	; 0
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:389
}
     b14:	df 91       	pop	r29
     b16:	cf 91       	pop	r28
     b18:	1f 91       	pop	r17
     b1a:	0f 91       	pop	r16
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:388

  this->system1.raw = 0B00001011;
  this->setRegister(QN_SYSTEM1, this->system1.raw); // SYSTEM1 => 00001011 => txreq = 1; ccs_ch_dis = 1; cca_ch_dis = 1 
  // this->setRegister(QN_REG_VGA, 0B01011011); // REG_VGA =>  01011011 => Tx_sftclpen = 0; TXAGC_GVGA = 101; TXAGC_GDB = 10; RIN = 11 (80K)
  this->setRegister(QN_REG_VGA, this->reg_vga.raw); // REG_VGA =>  01011011 => Tx_sftclpen = 0; TXAGC_GVGA = 101; TXAGC_GDB = 10; RIN = 11 (80K)
  delay(100);
     b1c:	0c 94 83 02 	jmp	0x506	; 0x506 <delay>

00000b20 <Print::availableForWrite()>:
_ZN5Print17availableForWriteEv():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/Print.h:63
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
     b20:	90 e0       	ldi	r25, 0x00	; 0
     b22:	80 e0       	ldi	r24, 0x00	; 0
     b24:	08 95       	ret

00000b26 <checkEncoder()>:
_Z12checkEncoderv():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:747

int8_t checkEncoder() {

  int8_t action;

  if ( digitalRead(BT_MENU) == LOW ) { 
     b26:	8e e0       	ldi	r24, 0x0E	; 14
     b28:	0e 94 36 01 	call	0x26c	; 0x26c <digitalRead>
     b2c:	89 2b       	or	r24, r25
     b2e:	61 f4       	brne	.+24     	; 0xb48 <checkEncoder()+0x22>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:749
     action =  BT_MENU_PRESSED;
     delay(250);                   // Try to avoid double click or debounce 
     b30:	6a ef       	ldi	r22, 0xFA	; 250
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	80 e0       	ldi	r24, 0x00	; 0
     b36:	90 e0       	ldi	r25, 0x00	; 0
     b38:	0e 94 83 02 	call	0x506	; 0x506 <delay>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:748
int8_t checkEncoder() {

  int8_t action;

  if ( digitalRead(BT_MENU) == LOW ) { 
     action =  BT_MENU_PRESSED;
     b3c:	82 e0       	ldi	r24, 0x02	; 2
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:758
  else if ( encoderCount == -1) 
    action =  ENCODER_LEFT;
  else
    action = ENCODER_NO_ACTION;  

  encoderCount = 0;
     b3e:	10 92 16 05 	sts	0x0516, r1	; 0x800516 <encoderCount+0x1>
     b42:	10 92 15 05 	sts	0x0515, r1	; 0x800515 <encoderCount>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:761

  return action;
}
     b46:	08 95       	ret
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:751

  if ( digitalRead(BT_MENU) == LOW ) { 
     action =  BT_MENU_PRESSED;
     delay(250);                   // Try to avoid double click or debounce 
  }
  else if ( encoderCount == 1) 
     b48:	80 91 15 05 	lds	r24, 0x0515	; 0x800515 <encoderCount>
     b4c:	90 91 16 05 	lds	r25, 0x0516	; 0x800516 <encoderCount+0x1>
     b50:	01 97       	sbiw	r24, 0x01	; 1
     b52:	59 f0       	breq	.+22     	; 0xb6a <checkEncoder()+0x44>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:753
    action =  ENCODER_RIGHT;
  else if ( encoderCount == -1) 
     b54:	20 91 15 05 	lds	r18, 0x0515	; 0x800515 <encoderCount>
     b58:	30 91 16 05 	lds	r19, 0x0516	; 0x800516 <encoderCount+0x1>
     b5c:	81 e0       	ldi	r24, 0x01	; 1
     b5e:	2f 3f       	cpi	r18, 0xFF	; 255
     b60:	3f 4f       	sbci	r19, 0xFF	; 255
     b62:	09 f0       	breq	.+2      	; 0xb66 <checkEncoder()+0x40>
     b64:	80 e0       	ldi	r24, 0x00	; 0
     b66:	81 95       	neg	r24
     b68:	ea cf       	rjmp	.-44     	; 0xb3e <checkEncoder()+0x18>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:752
  if ( digitalRead(BT_MENU) == LOW ) { 
     action =  BT_MENU_PRESSED;
     delay(250);                   // Try to avoid double click or debounce 
  }
  else if ( encoderCount == 1) 
    action =  ENCODER_RIGHT;
     b6a:	81 e0       	ldi	r24, 0x01	; 1
     b6c:	e8 cf       	rjmp	.-48     	; 0xb3e <checkEncoder()+0x18>

00000b6e <doMenu(unsigned char)::{lambda(unsigned char)#8}::_FUN(unsigned char)>:
_ZZ6doMenuhENUlhE6_4_FUNEh():
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:924
 * void loop() {
 * }
 * @endcode    
 */
 void QN8066::setTxFrequencyDerivation(uint8_t value) {
  this->fdev.raw = value; 
     b6e:	80 93 e9 05 	sts	0x05E9, r24	; 0x8005e9 <tx+0x8>
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:925
  this->setRegister(QN_FDEV, value );
     b72:	68 2f       	mov	r22, r24
     b74:	85 e2       	ldi	r24, 0x25	; 37
     b76:	0c 94 11 05 	jmp	0xa22	; 0xa22 <QN8066::setRegister(unsigned char, unsigned char) [clone .constprop.61]>

00000b7a <browseParameter()>:
_Z15browseParameterv():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:549
}
// Browse the parameters by polling the navigator buttons returns -1 (left/down), 0 (if Menu pressed), 1 (right/up).
int8_t browseParameter() {
  int8_t browse;
  do {
    browse = checkEncoder();
     b7a:	0e 94 93 05 	call	0xb26	; 0xb26 <checkEncoder()>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:550
    if (browse == ENCODER_LEFT)  // Down/Left pressed
     b7e:	8f 3f       	cpi	r24, 0xFF	; 255
     b80:	29 f0       	breq	.+10     	; 0xb8c <browseParameter()+0x12>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:552
      return ENCODER_LEFT;
    else if (browse == ENCODER_RIGHT)  // Up/Right pressed
     b82:	81 30       	cpi	r24, 0x01	; 1
     b84:	19 f0       	breq	.+6      	; 0xb8c <browseParameter()+0x12>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:554
      return ENCODER_RIGHT;
  } while (browse == ENCODER_NO_ACTION);
     b86:	88 23       	and	r24, r24
     b88:	c1 f3       	breq	.-16     	; 0xb7a <browseParameter()>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:555
  return BT_MENU_PRESSED;
     b8a:	82 e0       	ldi	r24, 0x02	; 2
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:556
}
     b8c:	08 95       	ret

00000b8e <enablePWM(unsigned char)>:
_Z9enablePWMh():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:449
  keyValue[KEY_BUFFER_GAIN].key = EEPROM.read(eeprom_address + 12);
  keyValue[KEY_RDS_FREQ_DEV].key = EEPROM.read(eeprom_address + 13);
}

// Enable or disable PWM duty cycle
void enablePWM(uint8_t value) {
     b8e:	cf 93       	push	r28
     b90:	c8 2f       	mov	r28, r24
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:450
  delay(100);
     b92:	64 e6       	ldi	r22, 0x64	; 100
     b94:	70 e0       	ldi	r23, 0x00	; 0
     b96:	80 e0       	ldi	r24, 0x00	; 0
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	0e 94 83 02 	call	0x506	; 0x506 <delay>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:451
  analogWrite(PWM_PA, value);  // Turn PA off
     b9e:	8c 2f       	mov	r24, r28
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <analogWrite.constprop.18>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:452
  delay(100);
     ba6:	64 e6       	ldi	r22, 0x64	; 100
     ba8:	70 e0       	ldi	r23, 0x00	; 0
     baa:	80 e0       	ldi	r24, 0x00	; 0
     bac:	90 e0       	ldi	r25, 0x00	; 0
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:453
}
     bae:	cf 91       	pop	r28
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:452

// Enable or disable PWM duty cycle
void enablePWM(uint8_t value) {
  delay(100);
  analogWrite(PWM_PA, value);  // Turn PA off
  delay(100);
     bb0:	0c 94 83 02 	jmp	0x506	; 0x506 <delay>

00000bb4 <rotaryEncoder()>:
_Z13rotaryEncoderv():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:397
 * Use Rotary.h and  Rotary.cpp implementation to process encoder via interrupt
 * if you do not add ICACHE_RAM_ATTR declaration, the system will reboot during attachInterrupt call.
 * With ICACHE_RAM_ATTR macro you put the function on the RAM.
 */
void rotaryEncoder()
{ // rotary encoder events
     bb4:	cf 93       	push	r28
     bb6:	df 93       	push	r29
process():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/Rotary.cpp:137
  state = R_START;
}

unsigned char Rotary::process() {
  // Grab state of input pins
  unsigned char pinstate = (digitalRead(pin2) << 1) | digitalRead(pin1);
     bb8:	80 91 c8 05 	lds	r24, 0x05C8	; 0x8005c8 <encoder+0x2>
     bbc:	0e 94 36 01 	call	0x26c	; 0x26c <digitalRead>
     bc0:	ec 01       	movw	r28, r24
     bc2:	80 91 c7 05 	lds	r24, 0x05C7	; 0x8005c7 <encoder+0x1>
     bc6:	0e 94 36 01 	call	0x26c	; 0x26c <digitalRead>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/Rotary.cpp:139
  // Determine new state from the pins and state table
  state = ttable[state & 0xf][pinstate];
     bca:	90 91 c6 05 	lds	r25, 0x05C6	; 0x8005c6 <encoder>
     bce:	9f 70       	andi	r25, 0x0F	; 15
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/Rotary.cpp:137
  state = R_START;
}

unsigned char Rotary::process() {
  // Grab state of input pins
  unsigned char pinstate = (digitalRead(pin2) << 1) | digitalRead(pin1);
     bd0:	cc 0f       	add	r28, r28
     bd2:	dd 1f       	adc	r29, r29
     bd4:	c8 2b       	or	r28, r24
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/Rotary.cpp:139
  // Determine new state from the pins and state table
  state = ttable[state & 0xf][pinstate];
     bd6:	24 e0       	ldi	r18, 0x04	; 4
     bd8:	92 9f       	mul	r25, r18
     bda:	c0 01       	movw	r24, r0
     bdc:	11 24       	eor	r1, r1
     bde:	80 56       	subi	r24, 0x60	; 96
     be0:	9e 4f       	sbci	r25, 0xFE	; 254
     be2:	c8 0f       	add	r28, r24
     be4:	d9 2f       	mov	r29, r25
     be6:	d1 1d       	adc	r29, r1
     be8:	88 81       	ld	r24, Y
     bea:	80 93 c6 05 	sts	0x05C6, r24	; 0x8005c6 <encoder>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/Rotary.cpp:141
  // Return emit bits, ie the generated event
  return state & 0x30;
     bee:	80 73       	andi	r24, 0x30	; 48
_Z13rotaryEncoderv():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:399
  uint8_t encoderStatus = encoder.process();
  if (encoderStatus)
     bf0:	41 f0       	breq	.+16     	; 0xc02 <rotaryEncoder()+0x4e>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:400
    encoderCount = (encoderStatus == DIR_CW) ? 1 : -1;
     bf2:	80 31       	cpi	r24, 0x10	; 16
     bf4:	49 f0       	breq	.+18     	; 0xc08 <rotaryEncoder()+0x54>
     bf6:	8f ef       	ldi	r24, 0xFF	; 255
     bf8:	9f ef       	ldi	r25, 0xFF	; 255
     bfa:	90 93 16 05 	sts	0x0516, r25	; 0x800516 <encoderCount+0x1>
     bfe:	80 93 15 05 	sts	0x0515, r24	; 0x800515 <encoderCount>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:401
}
     c02:	df 91       	pop	r29
     c04:	cf 91       	pop	r28
     c06:	08 95       	ret
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:400
 */
void rotaryEncoder()
{ // rotary encoder events
  uint8_t encoderStatus = encoder.process();
  if (encoderStatus)
    encoderCount = (encoderStatus == DIR_CW) ? 1 : -1;
     c08:	81 e0       	ldi	r24, 0x01	; 1
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	f6 cf       	rjmp	.-20     	; 0xbfa <rotaryEncoder()+0x46>

00000c0e <QN8066::getRegister(unsigned char) [clone .constprop.55]>:
_ZN6QN806611getRegisterEh.constprop.55():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/Wire.cpp:196
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
     c0e:	91 e0       	ldi	r25, 0x01	; 1
     c10:	90 93 96 05 	sts	0x0596, r25	; 0x800596 <TwoWire::transmitting>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/Wire.cpp:198
  // set address of targeted slave
  txAddress = address;
     c14:	91 e2       	ldi	r25, 0x21	; 33
     c16:	90 93 b8 05 	sts	0x05B8, r25	; 0x8005b8 <TwoWire::txAddress>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/Wire.cpp:200
  // reset tx buffer iterator vars
  txBufferIndex = 0;
     c1a:	10 92 97 05 	sts	0x0597, r1	; 0x800597 <TwoWire::txBufferIndex>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/Wire.cpp:201
  txBufferLength = 0;
     c1e:	10 92 b9 05 	sts	0x05B9, r1	; 0x8005b9 <TwoWire::txBufferLength>
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:74
 * @return uint8_t Value of the register
 */
uint8_t QN8066::getRegister(uint8_t registerNumber) {

  Wire.beginTransmission(QN8066_I2C_ADDRESS);
  Wire.write(registerNumber);
     c22:	68 2f       	mov	r22, r24
     c24:	8a eb       	ldi	r24, 0xBA	; 186
     c26:	95 e0       	ldi	r25, 0x05	; 5
     c28:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <TwoWire::write(unsigned char)>
endTransmission():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/Wire.cpp:239
//  This provides backwards compatibility with the original
//  definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
     c2c:	81 e0       	ldi	r24, 0x01	; 1
     c2e:	0e 94 91 00 	call	0x122	; 0x122 <TwoWire::endTransmission(unsigned char) [clone .constprop.65]>
_ZN6QN806611getRegisterEh.constprop.55():
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:76
  Wire.endTransmission();
  delayMicroseconds(QN8066_DELAY_COMMAND);
     c32:	84 ec       	ldi	r24, 0xC4	; 196
     c34:	99 e0       	ldi	r25, 0x09	; 9
     c36:	0e 94 53 02 	call	0x4a6	; 0x4a6 <delayMicroseconds>
twi_readFrom():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:177
        twi_handleTimeout(twi_do_reset_on_timeout);
        return 0;
      }
    }
  #else
    while(TWI_READY != twi_state){
     c3a:	80 91 95 05 	lds	r24, 0x0595	; 0x800595 <twi_state>
     c3e:	81 11       	cpse	r24, r1
     c40:	fc cf       	rjmp	.-8      	; 0xc3a <QN8066::getRegister(unsigned char) [clone .constprop.55]+0x2c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:181
      continue;
    }
  #endif
  twi_state = TWI_MRX;
     c42:	81 e0       	ldi	r24, 0x01	; 1
     c44:	80 93 95 05 	sts	0x0595, r24	; 0x800595 <twi_state>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:182
  twi_sendStop = sendStop;
     c48:	80 93 94 05 	sts	0x0594, r24	; 0x800594 <twi_sendStop>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:184
  // reset error state (0xFF.. no error occurred)
  twi_error = 0xFF;
     c4c:	9f ef       	ldi	r25, 0xFF	; 255
     c4e:	90 93 93 05 	sts	0x0593, r25	; 0x800593 <twi_error>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:187

  // initialize buffer iteration vars
  twi_masterBuffer = data;
     c52:	2d e6       	ldi	r18, 0x6D	; 109
     c54:	35 e0       	ldi	r19, 0x05	; 5
     c56:	30 93 92 05 	sts	0x0592, r19	; 0x800592 <twi_masterBuffer+0x1>
     c5a:	20 93 91 05 	sts	0x0591, r18	; 0x800591 <twi_masterBuffer>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:188
  twi_masterBufferIndex = 0;
     c5e:	10 92 90 05 	sts	0x0590, r1	; 0x800590 <twi_masterBufferIndex>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:189
  twi_masterBufferLength = length-1;  // This is not intuitive, read on...
     c62:	10 92 8f 05 	sts	0x058F, r1	; 0x80058f <twi_masterBufferLength>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:197
  // Therefore we must actually set NACK when the _next_ to last byte is
  // received, causing that NACK to be sent in response to receiving the last
  // expected byte of data.

  // build sla+w, slave device address + w bit
  twi_slarw = TW_READ;
     c66:	80 93 8e 05 	sts	0x058E, r24	; 0x80058e <twi_slarw>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:198
  twi_slarw |= address << 1;
     c6a:	80 91 8e 05 	lds	r24, 0x058E	; 0x80058e <twi_slarw>
     c6e:	82 64       	ori	r24, 0x42	; 66
     c70:	80 93 8e 05 	sts	0x058E, r24	; 0x80058e <twi_slarw>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:200

  if (true == twi_inRepStart) {
     c74:	80 91 8d 05 	lds	r24, 0x058D	; 0x80058d <twi_inRepStart>
     c78:	81 30       	cpi	r24, 0x01	; 1
     c7a:	01 f5       	brne	.+64     	; 0xcbc <QN8066::getRegister(unsigned char) [clone .constprop.55]+0xae>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:207
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the
    // repeated start that we sent ourselves, and that would really confuse things.
    twi_inRepStart = false; // Remember, we're dealing with an ASYNC ISR
     c7c:	10 92 8d 05 	sts	0x058D, r1	; 0x80058d <twi_inRepStart>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:219
          return 0;
        }
      } while(TWCR & _BV(TWWC));
    #else
      do {
        TWDR = twi_slarw;
     c80:	80 91 8e 05 	lds	r24, 0x058E	; 0x80058e <twi_slarw>
     c84:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:220
      } while(TWCR & _BV(TWWC));
     c88:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
     c8c:	83 fd       	sbrc	r24, 3
     c8e:	f8 cf       	rjmp	.-16     	; 0xc80 <QN8066::getRegister(unsigned char) [clone .constprop.55]+0x72>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:222
    #endif
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
     c90:	85 ec       	ldi	r24, 0xC5	; 197
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:226
  }
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
     c92:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:238
        twi_handleTimeout(twi_do_reset_on_timeout);
        return 0;
      }
    }
  #else
    while(TWI_MRX == twi_state){
     c96:	80 91 95 05 	lds	r24, 0x0595	; 0x800595 <twi_state>
     c9a:	81 30       	cpi	r24, 0x01	; 1
     c9c:	e1 f3       	breq	.-8      	; 0xc96 <QN8066::getRegister(unsigned char) [clone .constprop.55]+0x88>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:243
      continue;
    }
  #endif

  if (twi_masterBufferIndex < length)
     c9e:	80 91 90 05 	lds	r24, 0x0590	; 0x800590 <twi_masterBufferIndex>
     ca2:	81 11       	cpse	r24, r1
     ca4:	0d c0       	rjmp	.+26     	; 0xcc0 <QN8066::getRegister(unsigned char) [clone .constprop.55]+0xb2>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:244
    length = twi_masterBufferIndex;
     ca6:	80 91 90 05 	lds	r24, 0x0590	; 0x800590 <twi_masterBufferIndex>
requestFrom():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/Wire.cpp:120
    quantity = TWI_BUFFER_SIZE;
  }
  // perform blocking read into buffer
  uint8_t read = twi_readFrom(address, rxBuffer, quantity, sendStop);
  // set rx buffer iterator vars
  rxBufferIndex = 0;
     caa:	10 92 6c 05 	sts	0x056C, r1	; 0x80056c <TwoWire::rxBufferIndex>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/Wire.cpp:121
  rxBufferLength = read;
     cae:	80 93 6b 05 	sts	0x056B, r24	; 0x80056b <TwoWire::rxBufferLength>
_ZN6QN806611getRegisterEh.constprop.55():
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:79

  Wire.requestFrom(QN8066_I2C_ADDRESS, 1);
  return Wire.read();
     cb2:	8a eb       	ldi	r24, 0xBA	; 186
     cb4:	95 e0       	ldi	r25, 0x05	; 5
     cb6:	0e 94 9b 04 	call	0x936	; 0x936 <TwoWire::read()>
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:80
}
     cba:	08 95       	ret
twi_readFrom():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:226
    #endif
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
  }
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
     cbc:	85 ee       	ldi	r24, 0xE5	; 229
     cbe:	e9 cf       	rjmp	.-46     	; 0xc92 <QN8066::getRegister(unsigned char) [clone .constprop.55]+0x84>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:243
    while(TWI_MRX == twi_state){
      continue;
    }
  #endif

  if (twi_masterBufferIndex < length)
     cc0:	81 e0       	ldi	r24, 0x01	; 1
     cc2:	f3 cf       	rjmp	.-26     	; 0xcaa <QN8066::getRegister(unsigned char) [clone .constprop.55]+0x9c>

00000cc4 <QN8066::setTxInputImpedance(unsigned char) [clone .constprop.54]>:
_ZN6QN806619setTxInputImpedanceEh.constprop.54():
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:789
 *
 * void loop() {
 * }
 * @endcode  
 */
void QN8066::setTxInputImpedance(uint8_t value) {
     cc4:	cf 93       	push	r28
     cc6:	c8 2f       	mov	r28, r24
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:792
  qn8066_reg_vga reg_vga; 

  reg_vga.raw = this->getRegister(QN_REG_VGA);
     cc8:	88 e2       	ldi	r24, 0x28	; 40
     cca:	0e 94 07 06 	call	0xc0e	; 0xc0e <QN8066::getRegister(unsigned char) [clone .constprop.55]>
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:793
  reg_vga.arg.RIN = value;
     cce:	c3 70       	andi	r28, 0x03	; 3
     cd0:	8c 7f       	andi	r24, 0xFC	; 252
     cd2:	c8 2b       	or	r28, r24
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:794
  this->setRegister(QN_REG_VGA, reg_vga.raw);
     cd4:	6c 2f       	mov	r22, r28
     cd6:	88 e2       	ldi	r24, 0x28	; 40
     cd8:	0e 94 11 05 	call	0xa22	; 0xa22 <QN8066::setRegister(unsigned char, unsigned char) [clone .constprop.61]>
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:795
  this->reg_vga = reg_vga;
     cdc:	c0 93 ef 05 	sts	0x05EF, r28	; 0x8005ef <tx+0xe>
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:796
}
     ce0:	cf 91       	pop	r28
     ce2:	08 95       	ret

00000ce4 <doMenu(unsigned char)::{lambda(unsigned char)#4}::_FUN(unsigned char)>:
_ZZ6doMenuhENUlhE2_4_FUNEh():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:675
      break;
    case 4:
      runAction([](uint8_t value) {tx.rdsTxEnable(value);}, &keyValue[idxMenu], 1, 0, 1);
      break;
    case 5:
      runAction([](uint8_t value) {tx.setTxInputImpedance(value);}, &keyValue[idxMenu], 1, 0, 3);
     ce4:	0c 94 62 06 	jmp	0xcc4	; 0xcc4 <QN8066::setTxInputImpedance(unsigned char) [clone .constprop.54]>

00000ce8 <QN8066::setTxPilotGain(unsigned char) [clone .part.1] [clone .constprop.53]>:
_ZN6QN806614setTxPilotGainEh.part.1.constprop.53():
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:546
 *
 * void loop() {
 * }
 * @endcode  
 */
void QN8066::setTxPilotGain(uint8_t value) {
     ce8:	cf 93       	push	r28
     cea:	c8 2f       	mov	r28, r24
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:550
  qn8066_gplt gptl;

  if (value > 6 && value < 11) {
    gptl.raw = this->getRegister(QN_GPLT);
     cec:	87 e2       	ldi	r24, 0x27	; 39
     cee:	0e 94 07 06 	call	0xc0e	; 0xc0e <QN8066::getRegister(unsigned char) [clone .constprop.55]>
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:551
    gptl.arg.GAIN_TXPLT = value;
     cf2:	cf 70       	andi	r28, 0x0F	; 15
     cf4:	80 7f       	andi	r24, 0xF0	; 240
     cf6:	c8 2b       	or	r28, r24
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:552
    this->setRegister(QN_GPLT, gptl.raw);
     cf8:	6c 2f       	mov	r22, r28
     cfa:	87 e2       	ldi	r24, 0x27	; 39
     cfc:	0e 94 11 05 	call	0xa22	; 0xa22 <QN8066::setRegister(unsigned char, unsigned char) [clone .constprop.61]>
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:553
    this->gplt = gptl;
     d00:	c0 93 e7 05 	sts	0x05E7, r28	; 0x8005e7 <tx+0x6>
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:555
  }
}
     d04:	cf 91       	pop	r28
     d06:	08 95       	ret

00000d08 <doMenu(unsigned char)::{lambda(unsigned char)#7}::_FUN(unsigned char)>:
_ZZ6doMenuhENUlhE5_4_FUNEh():
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:549
 * @endcode  
 */
void QN8066::setTxPilotGain(uint8_t value) {
  qn8066_gplt gptl;

  if (value > 6 && value < 11) {
     d08:	99 ef       	ldi	r25, 0xF9	; 249
     d0a:	98 0f       	add	r25, r24
     d0c:	94 30       	cpi	r25, 0x04	; 4
     d0e:	10 f4       	brcc	.+4      	; 0xd14 <doMenu(unsigned char)::{lambda(unsigned char)#7}::_FUN(unsigned char)+0xc>
     d10:	0c 94 74 06 	jmp	0xce8	; 0xce8 <QN8066::setTxPilotGain(unsigned char) [clone .part.1] [clone .constprop.53]>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:684
      break;
    case 7:
      runAction([](uint8_t value) {tx.setTxSoftClipThreshold(value);},&keyValue[idxMenu], 1, 0, 3);
      break;
    case 8:
      runAction([](uint8_t value) {tx.setTxPilotGain(value);}, &keyValue[idxMenu], 1, 0, 3);
     d14:	08 95       	ret

00000d16 <QN8066::setTxSoftClippingEnable(bool) [clone .constprop.51]>:
_ZN6QN806623setTxSoftClippingEnableEb.constprop.51():
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:895
 *
 * void loop() {
 * }
 * @endcode    
 */
void QN8066::setTxSoftClippingEnable( bool value) {
     d16:	cf 93       	push	r28
     d18:	df 93       	push	r29
     d1a:	d8 2f       	mov	r29, r24
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:897
  qn8066_reg_vga reg_vga; 
  reg_vga.raw = this->getRegister(QN_REG_VGA);
     d1c:	88 e2       	ldi	r24, 0x28	; 40
     d1e:	0e 94 07 06 	call	0xc0e	; 0xc0e <QN8066::getRegister(unsigned char) [clone .constprop.55]>
     d22:	c8 2f       	mov	r28, r24
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:898
  reg_vga.arg.tx_sftclpen = value;
     d24:	d0 fb       	bst	r29, 0
     d26:	c7 f9       	bld	r28, 7
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:899
  this->setRegister(QN_REG_VGA, reg_vga.raw);  
     d28:	6c 2f       	mov	r22, r28
     d2a:	88 e2       	ldi	r24, 0x28	; 40
     d2c:	0e 94 11 05 	call	0xa22	; 0xa22 <QN8066::setRegister(unsigned char, unsigned char) [clone .constprop.61]>
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:900
  this->reg_vga = reg_vga;
     d30:	c0 93 ef 05 	sts	0x05EF, r28	; 0x8005ef <tx+0xe>
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:901
}
     d34:	df 91       	pop	r29
     d36:	cf 91       	pop	r28
     d38:	08 95       	ret

00000d3a <doMenu(unsigned char)::{lambda(unsigned char)#5}::_FUN(unsigned char)>:
_ZZ6doMenuhENUlhE3_4_FUNEh():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:678
      break;
    case 5:
      runAction([](uint8_t value) {tx.setTxInputImpedance(value);}, &keyValue[idxMenu], 1, 0, 3);
      break;
    case 6:
      runAction([](uint8_t value) {tx.setTxSoftClippingEnable(value);}, &keyValue[idxMenu], 1, 0, 1);
     d3a:	91 e0       	ldi	r25, 0x01	; 1
     d3c:	81 11       	cpse	r24, r1
     d3e:	01 c0       	rjmp	.+2      	; 0xd42 <doMenu(unsigned char)::{lambda(unsigned char)#5}::_FUN(unsigned char)+0x8>
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	89 2f       	mov	r24, r25
     d44:	0c 94 8b 06 	jmp	0xd16	; 0xd16 <QN8066::setTxSoftClippingEnable(bool) [clone .constprop.51]>

00000d48 <QN8066::setTxSoftClipThreshold(unsigned char) [clone .constprop.50]>:
_ZN6QN806622setTxSoftClipThresholdEh.constprop.50():
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:583
 *
 * void loop() {
 * }
 * @endcode  
 */
void QN8066::setTxSoftClipThreshold(uint8_t value) {
     d48:	cf 93       	push	r28
     d4a:	c8 2f       	mov	r28, r24
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:585
  qn8066_gplt gptl;
  gptl.raw = this->getRegister(QN_GPLT);
     d4c:	87 e2       	ldi	r24, 0x27	; 39
     d4e:	0e 94 07 06 	call	0xc0e	; 0xc0e <QN8066::getRegister(unsigned char) [clone .constprop.55]>
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:586
  gptl.arg.tx_sftclpth = value;
     d52:	c2 95       	swap	r28
     d54:	cc 0f       	add	r28, r28
     d56:	cc 0f       	add	r28, r28
     d58:	c0 7c       	andi	r28, 0xC0	; 192
     d5a:	8f 73       	andi	r24, 0x3F	; 63
     d5c:	c8 2b       	or	r28, r24
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:587
  this->setRegister(QN_GPLT, gptl.raw);
     d5e:	6c 2f       	mov	r22, r28
     d60:	87 e2       	ldi	r24, 0x27	; 39
     d62:	0e 94 11 05 	call	0xa22	; 0xa22 <QN8066::setRegister(unsigned char, unsigned char) [clone .constprop.61]>
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:588
  this->gplt = gptl;
     d66:	c0 93 e7 05 	sts	0x05E7, r28	; 0x8005e7 <tx+0x6>
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:589
}
     d6a:	cf 91       	pop	r28
     d6c:	08 95       	ret

00000d6e <doMenu(unsigned char)::{lambda(unsigned char)#6}::_FUN(unsigned char)>:
_ZZ6doMenuhENUlhE4_4_FUNEh():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:681
      break;
    case 7:
      runAction([](uint8_t value) {tx.setTxSoftClipThreshold(value);},&keyValue[idxMenu], 1, 0, 3);
     d6e:	0c 94 a4 06 	jmp	0xd48	; 0xd48 <QN8066::setTxSoftClipThreshold(unsigned char) [clone .constprop.50]>

00000d72 <QN8066::setPreEmphasis(unsigned char) [clone .constprop.49]>:
_ZN6QN806614setPreEmphasisEh.constprop.49():
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:518
 *
 * void loop() {
 * }
 * @endcode 
 */
void QN8066::setPreEmphasis( uint8_t value ) {
     d72:	cf 93       	push	r28
     d74:	df 93       	push	r29
     d76:	d8 2f       	mov	r29, r24
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:520
  qn8066_system2 system2;
  system2.raw = this->getRegister(QN_SYSTEM2);
     d78:	81 e0       	ldi	r24, 0x01	; 1
     d7a:	0e 94 07 06 	call	0xc0e	; 0xc0e <QN8066::getRegister(unsigned char) [clone .constprop.55]>
     d7e:	c8 2f       	mov	r28, r24
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:521
  system2.arg.tc = value;
     d80:	d0 fb       	bst	r29, 0
     d82:	c0 f9       	bld	r28, 0
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:522
  this->setRegister(QN_SYSTEM2, system2.raw);
     d84:	6c 2f       	mov	r22, r28
     d86:	81 e0       	ldi	r24, 0x01	; 1
     d88:	0e 94 11 05 	call	0xa22	; 0xa22 <QN8066::setRegister(unsigned char, unsigned char) [clone .constprop.61]>
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:523
  this->system2 = system2;
     d8c:	c0 93 e6 05 	sts	0x05E6, r28	; 0x8005e6 <tx+0x5>
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:524
}
     d90:	df 91       	pop	r29
     d92:	cf 91       	pop	r28
     d94:	08 95       	ret

00000d96 <doMenu(unsigned char)::{lambda(unsigned char)#2}::_FUN(unsigned char)>:
_ZZ6doMenuhENUlhE0_4_FUNEh():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:669
      break;
    case 2:
      runAction([](uint8_t value) {tx.setTxMono(value);}, &keyValue[idxMenu], 1, 0, 1);
      break;
    case 3:
      runAction([](uint8_t value) {tx.setPreEmphasis(value);},&keyValue[idxMenu], 1, 0, 1);
     d96:	0c 94 b9 06 	jmp	0xd72	; 0xd72 <QN8066::setPreEmphasis(unsigned char) [clone .constprop.49]>

00000d9a <QN8066::rdsTxEnable(bool) [clone .constprop.48]>:
_ZN6QN806611rdsTxEnableEb.constprop.48():
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:1221
 *
 * void loop() {
 * }
 * @endcode   
 */
void QN8066::rdsTxEnable(bool value) {
     d9a:	cf 93       	push	r28
     d9c:	c8 2f       	mov	r28, r24
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:1223
  qn8066_system2 system2;
  system2.raw = this->getRegister(QN_SYSTEM2);
     d9e:	81 e0       	ldi	r24, 0x01	; 1
     da0:	0e 94 07 06 	call	0xc0e	; 0xc0e <QN8066::getRegister(unsigned char) [clone .constprop.55]>
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:1224
  system2.arg.tx_rdsen = value;
     da4:	c0 fb       	bst	r28, 0
     da6:	86 f9       	bld	r24, 6
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:1225
  this->setRegister(QN_SYSTEM2, system2.raw);
     da8:	68 2f       	mov	r22, r24
     daa:	81 e0       	ldi	r24, 0x01	; 1
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:1226
}
     dac:	cf 91       	pop	r28
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:1225
 */
void QN8066::rdsTxEnable(bool value) {
  qn8066_system2 system2;
  system2.raw = this->getRegister(QN_SYSTEM2);
  system2.arg.tx_rdsen = value;
  this->setRegister(QN_SYSTEM2, system2.raw);
     dae:	0c 94 11 05 	jmp	0xa22	; 0xa22 <QN8066::setRegister(unsigned char, unsigned char) [clone .constprop.61]>

00000db2 <doMenu(unsigned char)::{lambda(unsigned char)#3}::_FUN(unsigned char)>:
_ZZ6doMenuhENUlhE1_4_FUNEh():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:672
      break;
    case 4:
      runAction([](uint8_t value) {tx.rdsTxEnable(value);}, &keyValue[idxMenu], 1, 0, 1);
     db2:	91 e0       	ldi	r25, 0x01	; 1
     db4:	81 11       	cpse	r24, r1
     db6:	01 c0       	rjmp	.+2      	; 0xdba <doMenu(unsigned char)::{lambda(unsigned char)#3}::_FUN(unsigned char)+0x8>
     db8:	90 e0       	ldi	r25, 0x00	; 0
     dba:	89 2f       	mov	r24, r25
     dbc:	0c 94 cd 06 	jmp	0xd9a	; 0xd9a <QN8066::rdsTxEnable(bool) [clone .constprop.48]>

00000dc0 <QN8066::setTxMono(unsigned char) [clone .constprop.47]>:
_ZN6QN80669setTxMonoEh.constprop.47():
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:438
 *
 * void loop() {
 * }
 * @endcode 
 */
void  QN8066::setTxMono(uint8_t value) {
     dc0:	cf 93       	push	r28
     dc2:	df 93       	push	r29
     dc4:	d8 2f       	mov	r29, r24
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:440
  qn8066_system2 system2;
  system2.raw = this->getRegister(QN_SYSTEM2);
     dc6:	81 e0       	ldi	r24, 0x01	; 1
     dc8:	0e 94 07 06 	call	0xc0e	; 0xc0e <QN8066::getRegister(unsigned char) [clone .constprop.55]>
     dcc:	c8 2f       	mov	r28, r24
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:441
  system2.arg.tx_mono = value;
     dce:	d0 fb       	bst	r29, 0
     dd0:	c4 f9       	bld	r28, 4
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:442
  this->setRegister(QN_SYSTEM2, system2.raw);
     dd2:	6c 2f       	mov	r22, r28
     dd4:	81 e0       	ldi	r24, 0x01	; 1
     dd6:	0e 94 11 05 	call	0xa22	; 0xa22 <QN8066::setRegister(unsigned char, unsigned char) [clone .constprop.61]>
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:443
  this->system2 = system2;  
     dda:	c0 93 e6 05 	sts	0x05E6, r28	; 0x8005e6 <tx+0x5>
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:444
} 
     dde:	df 91       	pop	r29
     de0:	cf 91       	pop	r28
     de2:	08 95       	ret

00000de4 <doMenu(unsigned char)::{lambda(unsigned char)#1}::_FUN(unsigned char)>:
_ZZ6doMenuhENUlhE_4_FUNEh():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:666
      lcd.setCursor(9, 1);
      lcd.print("<<");  // it just indicates the edit mode
      doPower();
      break;
    case 2:
      runAction([](uint8_t value) {tx.setTxMono(value);}, &keyValue[idxMenu], 1, 0, 1);
     de4:	0c 94 e0 06 	jmp	0xdc0	; 0xdc0 <QN8066::setTxMono(unsigned char) [clone .constprop.47]>

00000de8 <QN8066::setTxInputBufferGain(unsigned char) [clone .constprop.46]>:
_ZN6QN806620setTxInputBufferGainEh.constprop.46():
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:867
 *
 * void loop() {
 * }
 * @endcode    
 */
void QN8066::setTxInputBufferGain(uint8_t value) {
     de8:	cf 93       	push	r28
     dea:	c8 2f       	mov	r28, r24
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:870
  qn8066_reg_vga reg_vga; 

  reg_vga.raw = this->getRegister(QN_REG_VGA);
     dec:	88 e2       	ldi	r24, 0x28	; 40
     dee:	0e 94 07 06 	call	0xc0e	; 0xc0e <QN8066::getRegister(unsigned char) [clone .constprop.55]>
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:871
  reg_vga.arg.TXAGC_GVGA = value;
     df2:	c7 70       	andi	r28, 0x07	; 7
     df4:	c2 95       	swap	r28
     df6:	c0 7f       	andi	r28, 0xF0	; 240
     df8:	8f 78       	andi	r24, 0x8F	; 143
     dfa:	c8 2b       	or	r28, r24
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:872
  this->setRegister(QN_REG_VGA, reg_vga.raw);
     dfc:	6c 2f       	mov	r22, r28
     dfe:	88 e2       	ldi	r24, 0x28	; 40
     e00:	0e 94 11 05 	call	0xa22	; 0xa22 <QN8066::setRegister(unsigned char, unsigned char) [clone .constprop.61]>
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:873
  this->reg_vga = reg_vga;
     e04:	c0 93 ef 05 	sts	0x05EF, r28	; 0x8005ef <tx+0xe>
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:874
}
     e08:	cf 91       	pop	r28
     e0a:	08 95       	ret

00000e0c <doMenu(unsigned char)::{lambda(unsigned char)#9}::_FUN(unsigned char)>:
_ZZ6doMenuhENUlhE7_4_FUNEh():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:690
      break;
    case 9:
      runAction([](uint8_t value) {tx.setTxFrequencyDerivation(value);},&keyValue[idxMenu], 1, 0, 5);
      break;
    case 10:
      runAction([](uint8_t value) {tx.setTxInputBufferGain(value);}, &keyValue[idxMenu], 1, 0, 5);
     e0c:	0c 94 f4 06 	jmp	0xde8	; 0xde8 <QN8066::setTxInputBufferGain(unsigned char) [clone .constprop.46]>

00000e10 <QN8066::rdsSetFrequencyDerivation(unsigned char) [clone .constprop.45]>:
_ZN6QN806625rdsSetFrequencyDerivationEh.constprop.45():
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:1307
 *
 * void loop() {
 * }
 * @endcode    
 */
void QN8066::rdsSetFrequencyDerivation(uint8_t freq) {
     e10:	cf 93       	push	r28
     e12:	c8 2f       	mov	r28, r24
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:1309
  qn8066_rds rds;
  rds.raw = this->getRegister(QN_RDS);
     e14:	86 e2       	ldi	r24, 0x26	; 38
     e16:	0e 94 07 06 	call	0xc0e	; 0xc0e <QN8066::getRegister(unsigned char) [clone .constprop.55]>
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:1310
  rds.arg.RDSFDEV = freq;
     e1a:	6c 2f       	mov	r22, r28
     e1c:	6f 77       	andi	r22, 0x7F	; 127
     e1e:	80 78       	andi	r24, 0x80	; 128
     e20:	68 2b       	or	r22, r24
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:1311
  this->setRegister(QN_RDS, rds.raw);  
     e22:	86 e2       	ldi	r24, 0x26	; 38
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:1312
} 
     e24:	cf 91       	pop	r28
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:1311
 */
void QN8066::rdsSetFrequencyDerivation(uint8_t freq) {
  qn8066_rds rds;
  rds.raw = this->getRegister(QN_RDS);
  rds.arg.RDSFDEV = freq;
  this->setRegister(QN_RDS, rds.raw);  
     e26:	0c 94 11 05 	jmp	0xa22	; 0xa22 <QN8066::setRegister(unsigned char, unsigned char) [clone .constprop.61]>

00000e2a <doMenu(unsigned char)::{lambda(unsigned char)#10}::_FUN(unsigned char)>:
_ZZ6doMenuhENUlhE8_4_FUNEh():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:693
      break;
    case 11:
      runAction([](uint8_t value) {tx.rdsSetFrequencyDerivation(value);}, &keyValue[idxMenu], 1, 0, 5);
     e2a:	0c 94 08 07 	jmp	0xe10	; 0xe10 <QN8066::rdsSetFrequencyDerivation(unsigned char) [clone .constprop.45]>

00000e2e <QN8066::rdsSetTxToggle() [clone .constprop.34]>:
_ZN6QN806614rdsSetTxToggleEv.constprop.34():
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:1250
 *
 * void loop() {
 * }
 * @endcode    
 */
uint8_t QN8066::rdsSetTxToggle() {
     e2e:	cf 93       	push	r28
     e30:	df 93       	push	r29
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:1251
  this->system2.raw = this->getRegister(QN_SYSTEM2);
     e32:	81 e0       	ldi	r24, 0x01	; 1
     e34:	0e 94 07 06 	call	0xc0e	; 0xc0e <QN8066::getRegister(unsigned char) [clone .constprop.55]>
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:1252
  this->system2.arg.rdsrdy = !(this->system2.arg.rdsrdy);
     e38:	c6 ee       	ldi	r28, 0xE6	; 230
     e3a:	d5 e0       	ldi	r29, 0x05	; 5
     e3c:	68 2f       	mov	r22, r24
     e3e:	6d 7f       	andi	r22, 0xFD	; 253
     e40:	81 ff       	sbrs	r24, 1
     e42:	62 60       	ori	r22, 0x02	; 2
     e44:	68 83       	st	Y, r22
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:1253
  this->setRegister(QN_SYSTEM2, this->system2.raw);
     e46:	81 e0       	ldi	r24, 0x01	; 1
     e48:	0e 94 11 05 	call	0xa22	; 0xa22 <QN8066::setRegister(unsigned char, unsigned char) [clone .constprop.61]>
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:1254
  return this->system2.arg.rdsrdy;
     e4c:	88 81       	ld	r24, Y
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:1255
}
     e4e:	86 95       	lsr	r24
     e50:	81 70       	andi	r24, 0x01	; 1
     e52:	df 91       	pop	r29
     e54:	cf 91       	pop	r28
     e56:	08 95       	ret

00000e58 <QN8066::rdsSendGroup(RDS_BLOCK1, RDS_BLOCK2, RDS_BLOCK3, RDS_BLOCK4) [clone .constprop.33]>:
_ZN6QN806612rdsSendGroupE10RDS_BLOCK110RDS_BLOCK210RDS_BLOCK310RDS_BLOCK4.constprop.33():
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:1375
 * @param block1 - RDS_BLOCK1 datatype
 * @param block2 - RDS_BLOCK2 datatype
 * @param block3 - RDS_BLOCK3 datatype
 * @param block4 - RDS_BLOCK4 datatype 
 */
void QN8066::rdsSendGroup(RDS_BLOCK1 block1, RDS_BLOCK2 block2, RDS_BLOCK3 block3, RDS_BLOCK4 block4) {
     e58:	bf 92       	push	r11
     e5a:	cf 92       	push	r12
     e5c:	df 92       	push	r13
     e5e:	ef 92       	push	r14
     e60:	ff 92       	push	r15
     e62:	0f 93       	push	r16
     e64:	1f 93       	push	r17
     e66:	cf 93       	push	r28
     e68:	df 93       	push	r29
     e6a:	c8 2e       	mov	r12, r24
     e6c:	b9 2e       	mov	r11, r25
     e6e:	e6 2e       	mov	r14, r22
     e70:	d7 2e       	mov	r13, r23
     e72:	f4 2e       	mov	r15, r20
     e74:	05 2f       	mov	r16, r21
     e76:	12 2f       	mov	r17, r18
     e78:	c3 2f       	mov	r28, r19
getStatus3():
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:183
 *}
 * @endcode 
 */
qn8066_status3 QN8066::getStatus3() {
  qn8066_status3 value;
  value.raw = this->getRegister(QN_STATUS3);
     e7a:	8a e1       	ldi	r24, 0x1A	; 26
     e7c:	0e 94 07 06 	call	0xc0e	; 0xc0e <QN8066::getRegister(unsigned char) [clone .constprop.55]>
rdsGetTxUpdated():
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:1282
 * void loop() {
 * }
 * @endcode   
 */
bool QN8066::rdsGetTxUpdated() { 
    return this->getStatus3().arg.RDS_TXUPD;
     e80:	82 fb       	bst	r24, 2
     e82:	dd 27       	eor	r29, r29
     e84:	d0 f9       	bld	r29, 0
_ZN6QN806612rdsSendGroupE10RDS_BLOCK110RDS_BLOCK210RDS_BLOCK310RDS_BLOCK4.constprop.33():
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:1380
void QN8066::rdsSendGroup(RDS_BLOCK1 block1, RDS_BLOCK2 block2, RDS_BLOCK3 block3, RDS_BLOCK4 block4) {

  uint8_t toggle  = this->rdsGetTxUpdated(); 
  uint8_t count = 0;

  this->rdsSendError = 0;
     e86:	10 92 02 06 	sts	0x0602, r1	; 0x800602 <tx+0x21>
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:1382

  this->setRegister(QN_TX_RDSD0, block1.byteContent[1]); // Most Significant Byte First.
     e8a:	6b 2d       	mov	r22, r11
     e8c:	8c e1       	ldi	r24, 0x1C	; 28
     e8e:	0e 94 11 05 	call	0xa22	; 0xa22 <QN8066::setRegister(unsigned char, unsigned char) [clone .constprop.61]>
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:1383
  this->setRegister(QN_TX_RDSD1, block1.byteContent[0]);
     e92:	6c 2d       	mov	r22, r12
     e94:	8d e1       	ldi	r24, 0x1D	; 29
     e96:	0e 94 11 05 	call	0xa22	; 0xa22 <QN8066::setRegister(unsigned char, unsigned char) [clone .constprop.61]>
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:1385

  this->setRegister(QN_TX_RDSD2, block2.byteContent[1]); // Most Significant Byte First.
     e9a:	6d 2d       	mov	r22, r13
     e9c:	8e e1       	ldi	r24, 0x1E	; 30
     e9e:	0e 94 11 05 	call	0xa22	; 0xa22 <QN8066::setRegister(unsigned char, unsigned char) [clone .constprop.61]>
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:1386
  this->setRegister(QN_TX_RDSD3, block2.byteContent[0]);
     ea2:	6e 2d       	mov	r22, r14
     ea4:	8f e1       	ldi	r24, 0x1F	; 31
     ea6:	0e 94 11 05 	call	0xa22	; 0xa22 <QN8066::setRegister(unsigned char, unsigned char) [clone .constprop.61]>
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:1388
  
  this->setRegister(QN_TX_RDSD4, block3.byteContent[0]); // First character first 
     eaa:	6f 2d       	mov	r22, r15
     eac:	80 e2       	ldi	r24, 0x20	; 32
     eae:	0e 94 11 05 	call	0xa22	; 0xa22 <QN8066::setRegister(unsigned char, unsigned char) [clone .constprop.61]>
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:1389
  this->setRegister(QN_TX_RDSD5, block3.byteContent[1]);
     eb2:	60 2f       	mov	r22, r16
     eb4:	81 e2       	ldi	r24, 0x21	; 33
     eb6:	0e 94 11 05 	call	0xa22	; 0xa22 <QN8066::setRegister(unsigned char, unsigned char) [clone .constprop.61]>
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:1391
  
  this->setRegister(QN_TX_RDSD6, block4.byteContent[0]);
     eba:	61 2f       	mov	r22, r17
     ebc:	82 e2       	ldi	r24, 0x22	; 34
     ebe:	0e 94 11 05 	call	0xa22	; 0xa22 <QN8066::setRegister(unsigned char, unsigned char) [clone .constprop.61]>
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:1392
  this->setRegister(QN_TX_RDSD7, block4.byteContent[1]);
     ec2:	6c 2f       	mov	r22, r28
     ec4:	83 e2       	ldi	r24, 0x23	; 35
     ec6:	0e 94 11 05 	call	0xa22	; 0xa22 <QN8066::setRegister(unsigned char, unsigned char) [clone .constprop.61]>
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:1396

  // It should not be here. Judiging by the data sheet, the use must  
  // wait for the RDS_TXUPD before toggling the RDSRDY bit in the SYSTEM2 register. 
  this->rdsSetTxToggle(); 
     eca:	0e 94 17 07 	call	0xe2e	; 0xe2e <QN8066::rdsSetTxToggle() [clone .constprop.34]>
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:1397
  delay(this->rdsSyncTime); // This time is very critical and may need to be tuned. Check the function/method rdsSetSyncTime 
     ece:	60 91 f3 05 	lds	r22, 0x05F3	; 0x8005f3 <tx+0x12>
     ed2:	70 e0       	ldi	r23, 0x00	; 0
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	80 e0       	ldi	r24, 0x00	; 0
     ed8:	0e 94 83 02 	call	0x506	; 0x506 <delay>
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:1378
 * @param block4 - RDS_BLOCK4 datatype 
 */
void QN8066::rdsSendGroup(RDS_BLOCK1 block1, RDS_BLOCK2 block2, RDS_BLOCK3 block3, RDS_BLOCK4 block4) {

  uint8_t toggle  = this->rdsGetTxUpdated(); 
  uint8_t count = 0;
     edc:	c0 e0       	ldi	r28, 0x00	; 0
getStatus3():
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:183
 *}
 * @endcode 
 */
qn8066_status3 QN8066::getStatus3() {
  qn8066_status3 value;
  value.raw = this->getRegister(QN_STATUS3);
     ede:	8a e1       	ldi	r24, 0x1A	; 26
     ee0:	0e 94 07 06 	call	0xc0e	; 0xc0e <QN8066::getRegister(unsigned char) [clone .constprop.55]>
rdsGetTxUpdated():
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:1282
 * void loop() {
 * }
 * @endcode   
 */
bool QN8066::rdsGetTxUpdated() { 
    return this->getStatus3().arg.RDS_TXUPD;
     ee4:	82 fb       	bst	r24, 2
     ee6:	88 27       	eor	r24, r24
     ee8:	80 f9       	bld	r24, 0
_ZN6QN806612rdsSendGroupE10RDS_BLOCK110RDS_BLOCK210RDS_BLOCK310RDS_BLOCK4.constprop.33():
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:1399
  // It should not be here. Judiging by the data sheet, the use must  
  // wait for the RDS_TXUPD before toggling the RDSRDY bit in the SYSTEM2 register. 
  this->rdsSetTxToggle(); 
  delay(this->rdsSyncTime); // This time is very critical and may need to be tuned. Check the function/method rdsSetSyncTime 
  // checks for the RDS_TXUPD . 
  while ( this->rdsGetTxUpdated() == toggle  && count < 10) { 
     eea:	d8 13       	cpse	r29, r24
     eec:	0a c0       	rjmp	.+20     	; 0xf02 <QN8066::rdsSendGroup(RDS_BLOCK1, RDS_BLOCK2, RDS_BLOCK3, RDS_BLOCK4) [clone .constprop.33]+0xaa>
     eee:	ca 30       	cpi	r28, 0x0A	; 10
     ef0:	51 f0       	breq	.+20     	; 0xf06 <QN8066::rdsSendGroup(RDS_BLOCK1, RDS_BLOCK2, RDS_BLOCK3, RDS_BLOCK4) [clone .constprop.33]+0xae>
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:1400
    delay(1);
     ef2:	61 e0       	ldi	r22, 0x01	; 1
     ef4:	70 e0       	ldi	r23, 0x00	; 0
     ef6:	80 e0       	ldi	r24, 0x00	; 0
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	0e 94 83 02 	call	0x506	; 0x506 <delay>
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:1401
    count++;
     efe:	cf 5f       	subi	r28, 0xFF	; 255
     f00:	ee cf       	rjmp	.-36     	; 0xede <QN8066::rdsSendGroup(RDS_BLOCK1, RDS_BLOCK2, RDS_BLOCK3, RDS_BLOCK4) [clone .constprop.33]+0x86>
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:1403
  }
  if (count >= 10 ) 
     f02:	ca 30       	cpi	r28, 0x0A	; 10
     f04:	19 f4       	brne	.+6      	; 0xf0c <QN8066::rdsSendGroup(RDS_BLOCK1, RDS_BLOCK2, RDS_BLOCK3, RDS_BLOCK4) [clone .constprop.33]+0xb4>
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:1404
    this->rdsSendError = 1;
     f06:	81 e0       	ldi	r24, 0x01	; 1
     f08:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <tx+0x21>
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:1405
}
     f0c:	df 91       	pop	r29
     f0e:	cf 91       	pop	r28
     f10:	1f 91       	pop	r17
     f12:	0f 91       	pop	r16
     f14:	ff 90       	pop	r15
     f16:	ef 90       	pop	r14
     f18:	df 90       	pop	r13
     f1a:	cf 90       	pop	r12
     f1c:	bf 90       	pop	r11
     f1e:	08 95       	ret

00000f20 <QN8066::setToggleTxPdClear() [clone .constprop.14]>:
_ZN6QN806618setToggleTxPdClearEv.constprop.14():
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:1031
 *
 * void loop() {
 * }
 * @endcode   
 */
void QN8066::setToggleTxPdClear() {
     f20:	cf 93       	push	r28
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:1033
  qn8066_pac pac;
  pac.raw = this->getRegister(QN_PAC);
     f22:	84 e2       	ldi	r24, 0x24	; 36
     f24:	0e 94 07 06 	call	0xc0e	; 0xc0e <QN8066::getRegister(unsigned char) [clone .constprop.55]>
     f28:	c8 2f       	mov	r28, r24
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:1034
  pac.arg.TXPD_CLR = !pac.arg.TXPD_CLR;
     f2a:	87 fb       	bst	r24, 7
     f2c:	c7 f9       	bld	r28, 7
     f2e:	c0 58       	subi	r28, 0x80	; 128
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:1035
  this->setRegister(QN_PAC, pac.raw );
     f30:	6c 2f       	mov	r22, r28
     f32:	84 e2       	ldi	r24, 0x24	; 36
     f34:	0e 94 11 05 	call	0xa22	; 0xa22 <QN8066::setRegister(unsigned char, unsigned char) [clone .constprop.61]>
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:1036
  this->pac = pac;
     f38:	c0 93 f1 05 	sts	0x05F1, r28	; 0x8005f1 <tx+0x10>
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:1037
}
     f3c:	cf 91       	pop	r28
     f3e:	08 95       	ret

00000f40 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.13]>:
_ZN5Print11printNumberEmh.constprop.13():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/Print.cpp:232
  return vfprintf_P(&f, (const char *)format, ap);
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
     f40:	8f 92       	push	r8
     f42:	9f 92       	push	r9
     f44:	af 92       	push	r10
     f46:	bf 92       	push	r11
     f48:	0f 93       	push	r16
     f4a:	1f 93       	push	r17
     f4c:	cf 93       	push	r28
     f4e:	df 93       	push	r29
     f50:	cd b7       	in	r28, 0x3d	; 61
     f52:	de b7       	in	r29, 0x3e	; 62
     f54:	a1 97       	sbiw	r28, 0x21	; 33
     f56:	0f b6       	in	r0, 0x3f	; 63
     f58:	f8 94       	cli
     f5a:	de bf       	out	0x3e, r29	; 62
     f5c:	0f be       	out	0x3f, r0	; 63
     f5e:	cd bf       	out	0x3d, r28	; 61
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/Print.cpp:237
{
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
     f60:	19 a2       	std	Y+33, r1	; 0x21
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/Print.cpp:240

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
     f62:	42 30       	cpi	r20, 0x02	; 2
     f64:	08 f4       	brcc	.+2      	; 0xf68 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.13]+0x28>
     f66:	4a e0       	ldi	r20, 0x0A	; 10
     f68:	8e 01       	movw	r16, r28
     f6a:	0f 5d       	subi	r16, 0xDF	; 223
     f6c:	1f 4f       	sbci	r17, 0xFF	; 255
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/Print.cpp:243

  do {
    char c = n % base;
     f6e:	84 2e       	mov	r8, r20
     f70:	91 2c       	mov	r9, r1
     f72:	b1 2c       	mov	r11, r1
     f74:	a1 2c       	mov	r10, r1
     f76:	a5 01       	movw	r20, r10
     f78:	94 01       	movw	r18, r8
     f7a:	0e 94 13 15 	call	0x2a26	; 0x2a26 <__udivmodsi4>
     f7e:	e6 2f       	mov	r30, r22
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/Print.cpp:244
    n /= base;
     f80:	b9 01       	movw	r22, r18
     f82:	ca 01       	movw	r24, r20
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/Print.cpp:246

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
     f84:	ea 30       	cpi	r30, 0x0A	; 10
     f86:	44 f5       	brge	.+80     	; 0xfd8 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.13]+0x98>
     f88:	e0 5d       	subi	r30, 0xD0	; 208
     f8a:	d8 01       	movw	r26, r16
     f8c:	ee 93       	st	-X, r30
     f8e:	8d 01       	movw	r16, r26
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/Print.cpp:247
  } while(n);
     f90:	23 2b       	or	r18, r19
     f92:	24 2b       	or	r18, r20
     f94:	25 2b       	or	r18, r21
     f96:	79 f7       	brne	.-34     	; 0xf76 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.13]+0x36>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/Print.h:53
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	80 e0       	ldi	r24, 0x00	; 0
write():
     f9c:	10 97       	sbiw	r26, 0x00	; 0
     f9e:	69 f0       	breq	.+26     	; 0xfba <Print::printNumber(unsigned long, unsigned char) [clone .constprop.13]+0x7a>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/Print.h:54
      return write((const uint8_t *)str, strlen(str));
     fa0:	fd 01       	movw	r30, r26
     fa2:	01 90       	ld	r0, Z+
     fa4:	00 20       	and	r0, r0
     fa6:	e9 f7       	brne	.-6      	; 0xfa2 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.13]+0x62>
     fa8:	31 97       	sbiw	r30, 0x01	; 1
     faa:	af 01       	movw	r20, r30
     fac:	4a 1b       	sub	r20, r26
     fae:	5b 0b       	sbc	r21, r27
     fb0:	bd 01       	movw	r22, r26
     fb2:	89 ec       	ldi	r24, 0xC9	; 201
     fb4:	95 e0       	ldi	r25, 0x05	; 5
     fb6:	0e 94 c3 02 	call	0x586	; 0x586 <Print::write(unsigned char const*, unsigned int)>
_ZN5Print11printNumberEmh.constprop.13():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/Print.cpp:250

  return write(str);
}
     fba:	a1 96       	adiw	r28, 0x21	; 33
     fbc:	0f b6       	in	r0, 0x3f	; 63
     fbe:	f8 94       	cli
     fc0:	de bf       	out	0x3e, r29	; 62
     fc2:	0f be       	out	0x3f, r0	; 63
     fc4:	cd bf       	out	0x3d, r28	; 61
     fc6:	df 91       	pop	r29
     fc8:	cf 91       	pop	r28
     fca:	1f 91       	pop	r17
     fcc:	0f 91       	pop	r16
     fce:	bf 90       	pop	r11
     fd0:	af 90       	pop	r10
     fd2:	9f 90       	pop	r9
     fd4:	8f 90       	pop	r8
     fd6:	08 95       	ret
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/Print.cpp:246

  do {
    char c = n % base;
    n /= base;

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
     fd8:	e9 5c       	subi	r30, 0xC9	; 201
     fda:	d7 cf       	rjmp	.-82     	; 0xf8a <Print::printNumber(unsigned long, unsigned char) [clone .constprop.13]+0x4a>

00000fdc <Print::print(char const*) [clone .constprop.37]>:
_ZN5Print5printEPKc.constprop.37():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/Print.h:53
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
     fdc:	00 97       	sbiw	r24, 0x00	; 0
     fde:	69 f0       	breq	.+26     	; 0xffa <Print::print(char const*) [clone .constprop.37]+0x1e>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/Print.h:54
      return write((const uint8_t *)str, strlen(str));
     fe0:	fc 01       	movw	r30, r24
     fe2:	01 90       	ld	r0, Z+
     fe4:	00 20       	and	r0, r0
     fe6:	e9 f7       	brne	.-6      	; 0xfe2 <Print::print(char const*) [clone .constprop.37]+0x6>
     fe8:	31 97       	sbiw	r30, 0x01	; 1
     fea:	af 01       	movw	r20, r30
     fec:	48 1b       	sub	r20, r24
     fee:	59 0b       	sbc	r21, r25
     ff0:	bc 01       	movw	r22, r24
     ff2:	89 ec       	ldi	r24, 0xC9	; 201
     ff4:	95 e0       	ldi	r25, 0x05	; 5
     ff6:	0c 94 c3 02 	jmp	0x586	; 0x586 <Print::write(unsigned char const*, unsigned int)>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/Print.cpp:65
}

size_t Print::print(const char str[])
{
  return write(str);
}
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	80 e0       	ldi	r24, 0x00	; 0
     ffe:	08 95       	ret

00001000 <showParameter(char*)>:
_Z13showParameterPc():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:538
    lcd.print(str);
  }
  lcd.display();
}
// Shows the given parameter to be updated
void showParameter(char *desc) {
    1000:	cf 93       	push	r28
    1002:	df 93       	push	r29
    1004:	ec 01       	movw	r28, r24
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:539
  lcd.setCursor(0, 1);
    1006:	61 e0       	ldi	r22, 0x01	; 1
    1008:	80 e0       	ldi	r24, 0x00	; 0
    100a:	0e 94 93 03 	call	0x726	; 0x726 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.40]>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:540
  lcd.print(">");
    100e:	88 e0       	ldi	r24, 0x08	; 8
    1010:	92 e0       	ldi	r25, 0x02	; 2
    1012:	0e 94 ee 07 	call	0xfdc	; 0xfdc <Print::print(char const*) [clone .constprop.37]>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:541
  lcd.print(desc);
    1016:	ce 01       	movw	r24, r28
    1018:	0e 94 ee 07 	call	0xfdc	; 0xfdc <Print::print(char const*) [clone .constprop.37]>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:542
  lcd.print("<");
    101c:	87 ea       	ldi	r24, 0xA7	; 167
    101e:	92 e0       	ldi	r25, 0x02	; 2
    1020:	0e 94 ee 07 	call	0xfdc	; 0xfdc <Print::print(char const*) [clone .constprop.37]>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:544
  lcd.display();
}
    1024:	df 91       	pop	r29
    1026:	cf 91       	pop	r28
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:543
void showParameter(char *desc) {
  lcd.setCursor(0, 1);
  lcd.print(">");
  lcd.print(desc);
  lcd.print("<");
  lcd.display();
    1028:	0c 94 a9 03 	jmp	0x752	; 0x752 <LiquidCrystal::display() [clone .constprop.27]>

0000102c <runAction(void (*)(unsigned char), KeyValue*, unsigned char, unsigned char, unsigned char) [clone .constprop.1]>:
_Z9runActionPFvhEP8KeyValuehhh.constprop.1():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:629
 * @param max         Maximum valid value.
 * @see C/C++: Syntax for declaring function pointers; Assigning functions to function pointers; Calling functions through function pointers.
 * @see C/C++: Passing function pointers as arguments to other functions; Understanding how to use function pointers for callback mechanisms.
 * @see   C++: Capturing variables in lambdas and their usage as function pointers; Understanding lambda expressions in C++ and how they relate to function pointers  
 */
void runAction(void (*actionFunc)(uint8_t), KeyValue *tab, uint8_t step, uint8_t min, uint8_t max) {
    102c:	df 92       	push	r13
    102e:	ef 92       	push	r14
    1030:	ff 92       	push	r15
    1032:	0f 93       	push	r16
    1034:	1f 93       	push	r17
    1036:	cf 93       	push	r28
    1038:	df 93       	push	r29
    103a:	8c 01       	movw	r16, r24
    103c:	eb 01       	movw	r28, r22
    103e:	d4 2e       	mov	r13, r20
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:630
  showParameter((char *)tab->value[tab->key].desc);
    1040:	88 81       	ld	r24, Y
    1042:	e9 81       	ldd	r30, Y+1	; 0x01
    1044:	fa 81       	ldd	r31, Y+2	; 0x02
    1046:	93 e0       	ldi	r25, 0x03	; 3
    1048:	89 02       	muls	r24, r25
    104a:	e0 0d       	add	r30, r0
    104c:	f1 1d       	adc	r31, r1
    104e:	11 24       	eor	r1, r1
    1050:	81 81       	ldd	r24, Z+1	; 0x01
    1052:	92 81       	ldd	r25, Z+2	; 0x02
    1054:	0e 94 00 08 	call	0x1000	; 0x1000 <showParameter(char*)>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:631
  int8_t key = browseParameter();
    1058:	0e 94 bd 05 	call	0xb7a	; 0xb7a <browseParameter()>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:634
  while (key != BT_MENU_PRESSED) {
    if (key == ENCODER_RIGHT) {
      if (tab->key == max)
    105c:	ed 2c       	mov	r14, r13
    105e:	f1 2c       	mov	r15, r1
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:632
 * @see   C++: Capturing variables in lambdas and their usage as function pointers; Understanding lambda expressions in C++ and how they relate to function pointers  
 */
void runAction(void (*actionFunc)(uint8_t), KeyValue *tab, uint8_t step, uint8_t min, uint8_t max) {
  showParameter((char *)tab->value[tab->key].desc);
  int8_t key = browseParameter();
  while (key != BT_MENU_PRESSED) {
    1060:	82 30       	cpi	r24, 0x02	; 2
    1062:	69 f1       	breq	.+90     	; 0x10be <runAction(void (*)(unsigned char), KeyValue*, unsigned char, unsigned char, unsigned char) [clone .constprop.1]+0x92>
    1064:	98 81       	ld	r25, Y
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:633
    if (key == ENCODER_RIGHT) {
    1066:	81 30       	cpi	r24, 0x01	; 1
    1068:	19 f5       	brne	.+70     	; 0x10b0 <runAction(void (*)(unsigned char), KeyValue*, unsigned char, unsigned char, unsigned char) [clone .constprop.1]+0x84>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:634
      if (tab->key == max)
    106a:	29 2f       	mov	r18, r25
    106c:	09 2e       	mov	r0, r25
    106e:	00 0c       	add	r0, r0
    1070:	33 0b       	sbc	r19, r19
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:637
        tab->key = min;
      else
        tab->key = tab->key + step;
    1072:	9f 5f       	subi	r25, 0xFF	; 255
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:634
void runAction(void (*actionFunc)(uint8_t), KeyValue *tab, uint8_t step, uint8_t min, uint8_t max) {
  showParameter((char *)tab->value[tab->key].desc);
  int8_t key = browseParameter();
  while (key != BT_MENU_PRESSED) {
    if (key == ENCODER_RIGHT) {
      if (tab->key == max)
    1074:	2e 15       	cp	r18, r14
    1076:	3f 05       	cpc	r19, r15
    1078:	01 f5       	brne	.+64     	; 0x10ba <runAction(void (*)(unsigned char), KeyValue*, unsigned char, unsigned char, unsigned char) [clone .constprop.1]+0x8e>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:635
        tab->key = min;
    107a:	18 82       	st	Y, r1
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:644
      if (tab->key == min)
        tab->key = max;
      else
        tab->key = tab->key - step;
    }
    actionFunc(tab->value[tab->key].idx);
    107c:	88 81       	ld	r24, Y
    107e:	e9 81       	ldd	r30, Y+1	; 0x01
    1080:	fa 81       	ldd	r31, Y+2	; 0x02
    1082:	93 e0       	ldi	r25, 0x03	; 3
    1084:	89 02       	muls	r24, r25
    1086:	e0 0d       	add	r30, r0
    1088:	f1 1d       	adc	r31, r1
    108a:	11 24       	eor	r1, r1
    108c:	80 81       	ld	r24, Z
    108e:	f8 01       	movw	r30, r16
    1090:	09 95       	icall
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:645
    showParameter((char *)tab->value[tab->key].desc);
    1092:	88 81       	ld	r24, Y
    1094:	e9 81       	ldd	r30, Y+1	; 0x01
    1096:	fa 81       	ldd	r31, Y+2	; 0x02
    1098:	93 e0       	ldi	r25, 0x03	; 3
    109a:	89 02       	muls	r24, r25
    109c:	e0 0d       	add	r30, r0
    109e:	f1 1d       	adc	r31, r1
    10a0:	11 24       	eor	r1, r1
    10a2:	81 81       	ldd	r24, Z+1	; 0x01
    10a4:	92 81       	ldd	r25, Z+2	; 0x02
    10a6:	0e 94 00 08 	call	0x1000	; 0x1000 <showParameter(char*)>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:646
    key = browseParameter();
    10aa:	0e 94 bd 05 	call	0xb7a	; 0xb7a <browseParameter()>
    10ae:	d8 cf       	rjmp	.-80     	; 0x1060 <runAction(void (*)(unsigned char), KeyValue*, unsigned char, unsigned char, unsigned char) [clone .constprop.1]+0x34>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:639
      if (tab->key == max)
        tab->key = min;
      else
        tab->key = tab->key + step;
    } else {
      if (tab->key == min)
    10b0:	91 11       	cpse	r25, r1
    10b2:	02 c0       	rjmp	.+4      	; 0x10b8 <runAction(void (*)(unsigned char), KeyValue*, unsigned char, unsigned char, unsigned char) [clone .constprop.1]+0x8c>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:640
        tab->key = max;
    10b4:	d8 82       	st	Y, r13
    10b6:	e2 cf       	rjmp	.-60     	; 0x107c <runAction(void (*)(unsigned char), KeyValue*, unsigned char, unsigned char, unsigned char) [clone .constprop.1]+0x50>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:642
      else
        tab->key = tab->key - step;
    10b8:	91 50       	subi	r25, 0x01	; 1
    10ba:	98 83       	st	Y, r25
    10bc:	df cf       	rjmp	.-66     	; 0x107c <runAction(void (*)(unsigned char), KeyValue*, unsigned char, unsigned char, unsigned char) [clone .constprop.1]+0x50>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:649
    actionFunc(tab->value[tab->key].idx);
    showParameter((char *)tab->value[tab->key].desc);
    key = browseParameter();
  }
  // menuLevel = 0;
}
    10be:	df 91       	pop	r29
    10c0:	cf 91       	pop	r28
    10c2:	1f 91       	pop	r17
    10c4:	0f 91       	pop	r16
    10c6:	ff 90       	pop	r15
    10c8:	ef 90       	pop	r14
    10ca:	df 90       	pop	r13
    10cc:	08 95       	ret

000010ce <showFrequency()>:
_Z13showFrequencyv():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:472
  lcd.print("Arduino Library");
  lcd.display();
  delay(1000);
}
// Show the current frequency
void showFrequency() {
    10ce:	cf 93       	push	r28
    10d0:	df 93       	push	r29
    10d2:	00 d0       	rcall	.+0      	; 0x10d4 <showFrequency()+0x6>
    10d4:	00 d0       	rcall	.+0      	; 0x10d6 <showFrequency()+0x8>
    10d6:	00 d0       	rcall	.+0      	; 0x10d8 <showFrequency()+0xa>
    10d8:	1f 92       	push	r1
    10da:	cd b7       	in	r28, 0x3d	; 61
    10dc:	de b7       	in	r29, 0x3e	; 62
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:474
  char strFrequency[7];
  tx.convertToChar(txFrequency, strFrequency, 4, 3, ',');  // Convert the selected frequency a array of char
    10de:	be 01       	movw	r22, r28
    10e0:	6f 5f       	subi	r22, 0xFF	; 255
    10e2:	7f 4f       	sbci	r23, 0xFF	; 255
    10e4:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <txFrequency>
    10e8:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <txFrequency+0x1>
    10ec:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <QN8066::convertToChar(unsigned int, char*, unsigned char, unsigned char, unsigned char, bool) [clone .constprop.17]>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:475
  lcd.setCursor(0, 1);
    10f0:	61 e0       	ldi	r22, 0x01	; 1
    10f2:	80 e0       	ldi	r24, 0x00	; 0
    10f4:	0e 94 93 03 	call	0x726	; 0x726 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.40]>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:476
  lcd.print(strFrequency);
    10f8:	ce 01       	movw	r24, r28
    10fa:	01 96       	adiw	r24, 0x01	; 1
    10fc:	0e 94 ee 07 	call	0xfdc	; 0xfdc <Print::print(char const*) [clone .constprop.37]>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:477
  lcd.display();
    1100:	0e 94 a9 03 	call	0x752	; 0x752 <LiquidCrystal::display() [clone .constprop.27]>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:478
}
    1104:	27 96       	adiw	r28, 0x07	; 7
    1106:	0f b6       	in	r0, 0x3f	; 63
    1108:	f8 94       	cli
    110a:	de bf       	out	0x3e, r29	; 62
    110c:	0f be       	out	0x3f, r0	; 63
    110e:	cd bf       	out	0x3d, r28	; 61
    1110:	df 91       	pop	r29
    1112:	cf 91       	pop	r28
    1114:	08 95       	ret

00001116 <checkQN8066()>:
_Z11checkQN8066v():
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:28
 * @details Checks if the QN8066 is available on the I2C bus. Remember that the QN8066 responds to the address 0x21
 * @return  true or false
 */
bool QN8066::detectDevice() {

  Wire.begin();
    1116:	0e 94 8d 01 	call	0x31a	; 0x31a <TwoWire::begin() [clone .constprop.21]>
beginTransmission():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/Wire.cpp:196
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
    111a:	81 e0       	ldi	r24, 0x01	; 1
    111c:	80 93 96 05 	sts	0x0596, r24	; 0x800596 <TwoWire::transmitting>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/Wire.cpp:198
  // set address of targeted slave
  txAddress = address;
    1120:	81 e2       	ldi	r24, 0x21	; 33
    1122:	80 93 b8 05 	sts	0x05B8, r24	; 0x8005b8 <TwoWire::txAddress>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/Wire.cpp:200
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    1126:	10 92 97 05 	sts	0x0597, r1	; 0x800597 <TwoWire::txBufferIndex>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/Wire.cpp:201
  txBufferLength = 0;
    112a:	10 92 b9 05 	sts	0x05B9, r1	; 0x8005b9 <TwoWire::txBufferLength>
endTransmission():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/Wire.cpp:239
//  This provides backwards compatibility with the original
//  definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
    112e:	81 e0       	ldi	r24, 0x01	; 1
    1130:	0e 94 91 00 	call	0x122	; 0x122 <TwoWire::endTransmission(unsigned char) [clone .constprop.65]>
_Z11checkQN8066v():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:405
    encoderCount = (encoderStatus == DIR_CW) ? 1 : -1;
}


void checkQN8066() {
  if (!tx.detectDevice()) {
    1134:	88 23       	and	r24, r24
    1136:	49 f0       	breq	.+18     	; 0x114a <checkQN8066()+0x34>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:406
    lcd.setCursor(0, 0);
    1138:	60 e0       	ldi	r22, 0x00	; 0
    113a:	80 e0       	ldi	r24, 0x00	; 0
    113c:	0e 94 93 03 	call	0x726	; 0x726 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.40]>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:407
    lcd.print("No QN8066 found!");
    1140:	8a e0       	ldi	r24, 0x0A	; 10
    1142:	92 e0       	ldi	r25, 0x02	; 2
    1144:	0e 94 ee 07 	call	0xfdc	; 0xfdc <Print::print(char const*) [clone .constprop.37]>
    1148:	ff cf       	rjmp	.-2      	; 0x1148 <checkQN8066()+0x32>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:411
    while (1)
      ;
  }
}
    114a:	08 95       	ret

0000114c <EEPROMClass::update(int, unsigned char) [clone .isra.15]>:
_ZN11EEPROMClass6updateEih.isra.15():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/EEPROM/src/EEPROM.h:122

    //Basic user access methods.
    EERef operator[]( const int idx )    { return idx; }
    uint8_t read( int idx )              { return EERef( idx ); }
    void write( int idx, uint8_t val )   { (EERef( idx )) = val; }
    void update( int idx, uint8_t val )  { EERef( idx ).update( val ); }
    114c:	1f 93       	push	r17
    114e:	cf 93       	push	r28
    1150:	df 93       	push	r29
    1152:	ec 01       	movw	r28, r24
    1154:	16 2f       	mov	r17, r22
operator*():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/EEPROM/src/EEPROM.h:42

    EERef( const int index )
        : index( index )                 {}
    
    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    1156:	0e 94 9e 14 	call	0x293c	; 0x293c <eeprom_read_byte>
update():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/EEPROM/src/EEPROM.h:59
    EERef &operator &=( uint8_t in )     { return *this = **this & in; }
    EERef &operator |=( uint8_t in )     { return *this = **this | in; }
    EERef &operator <<=( uint8_t in )    { return *this = **this << in; }
    EERef &operator >>=( uint8_t in )    { return *this = **this >> in; }
    
    EERef &update( uint8_t in )          { return  in != *this ? *this = in : *this; }
    115a:	18 17       	cp	r17, r24
    115c:	39 f0       	breq	.+14     	; 0x116c <EEPROMClass::update(int, unsigned char) [clone .isra.15]+0x20>
operator=():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/EEPROM/src/EEPROM.h:47
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    operator uint8_t() const             { return **this; }
    
    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
    115e:	61 2f       	mov	r22, r17
    1160:	ce 01       	movw	r24, r28
_ZN11EEPROMClass6updateEih.isra.15():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/EEPROM/src/EEPROM.h:122

    //Basic user access methods.
    EERef operator[]( const int idx )    { return idx; }
    uint8_t read( int idx )              { return EERef( idx ); }
    void write( int idx, uint8_t val )   { (EERef( idx )) = val; }
    void update( int idx, uint8_t val )  { EERef( idx ).update( val ); }
    1162:	df 91       	pop	r29
    1164:	cf 91       	pop	r28
    1166:	1f 91       	pop	r17
operator=():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/EEPROM/src/EEPROM.h:47
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    operator uint8_t() const             { return **this; }
    
    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
    1168:	0c 94 a6 14 	jmp	0x294c	; 0x294c <eeprom_write_byte>
_ZN11EEPROMClass6updateEih.isra.15():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/EEPROM/src/EEPROM.h:122

    //Basic user access methods.
    EERef operator[]( const int idx )    { return idx; }
    uint8_t read( int idx )              { return EERef( idx ); }
    void write( int idx, uint8_t val )   { (EERef( idx )) = val; }
    void update( int idx, uint8_t val )  { EERef( idx ).update( val ); }
    116c:	df 91       	pop	r29
    116e:	cf 91       	pop	r28
    1170:	1f 91       	pop	r17
    1172:	08 95       	ret

00001174 <saveAllTransmitterInformation()>:
_Z29saveAllTransmitterInformationv():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:414

// Saves current transmitter setup
void saveAllTransmitterInformation() {
    1174:	cf 93       	push	r28
    1176:	df 93       	push	r29
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:416
  // The update function/method writes data only if the current data is not equal to the stored data.
  EEPROM.update(eeprom_address, app_id);
    1178:	66 e5       	ldi	r22, 0x56	; 86
    117a:	90 e0       	ldi	r25, 0x00	; 0
    117c:	80 e0       	ldi	r24, 0x00	; 0
    117e:	0e 94 a6 08 	call	0x114c	; 0x114c <EEPROMClass::update(int, unsigned char) [clone .isra.15]>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:417
  EEPROM.update(eeprom_address + 1, txFrequency >> 8);    // stores the current Frequency HIGH byte for the band
    1182:	60 91 77 01 	lds	r22, 0x0177	; 0x800177 <txFrequency+0x1>
    1186:	81 e0       	ldi	r24, 0x01	; 1
    1188:	90 e0       	ldi	r25, 0x00	; 0
    118a:	0e 94 a6 08 	call	0x114c	; 0x114c <EEPROMClass::update(int, unsigned char) [clone .isra.15]>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:418
  EEPROM.update(eeprom_address + 2, txFrequency & 0xFF);  // stores the current Frequency LOW byte for the band
    118e:	60 91 76 01 	lds	r22, 0x0176	; 0x800176 <txFrequency>
    1192:	82 e0       	ldi	r24, 0x02	; 2
    1194:	90 e0       	ldi	r25, 0x00	; 0
    1196:	0e 94 a6 08 	call	0x114c	; 0x114c <EEPROMClass::update(int, unsigned char) [clone .isra.15]>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:419
  EEPROM.update(eeprom_address + 3, pwmPowerDuty);
    119a:	60 91 78 01 	lds	r22, 0x0178	; 0x800178 <pwmPowerDuty>
    119e:	83 e0       	ldi	r24, 0x03	; 3
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	0e 94 a6 08 	call	0x114c	; 0x114c <EEPROMClass::update(int, unsigned char) [clone .isra.15]>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:420
  EEPROM.update(eeprom_address + 4, keyValue[KEY_MONO_ESTEREO].key);
    11a6:	c9 e7       	ldi	r28, 0x79	; 121
    11a8:	d1 e0       	ldi	r29, 0x01	; 1
    11aa:	6e 81       	ldd	r22, Y+6	; 0x06
    11ac:	84 e0       	ldi	r24, 0x04	; 4
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	0e 94 a6 08 	call	0x114c	; 0x114c <EEPROMClass::update(int, unsigned char) [clone .isra.15]>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:421
  EEPROM.update(eeprom_address + 5, keyValue[KEY_PRE_EMPHASIS].key);
    11b4:	69 85       	ldd	r22, Y+9	; 0x09
    11b6:	85 e0       	ldi	r24, 0x05	; 5
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	0e 94 a6 08 	call	0x114c	; 0x114c <EEPROMClass::update(int, unsigned char) [clone .isra.15]>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:422
  EEPROM.update(eeprom_address + 6, keyValue[KEY_RDS].key);
    11be:	6c 85       	ldd	r22, Y+12	; 0x0c
    11c0:	86 e0       	ldi	r24, 0x06	; 6
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	0e 94 a6 08 	call	0x114c	; 0x114c <EEPROMClass::update(int, unsigned char) [clone .isra.15]>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:423
  EEPROM.update(eeprom_address + 7, keyValue[KEY_INPEDANCE].key);
    11c8:	6f 85       	ldd	r22, Y+15	; 0x0f
    11ca:	87 e0       	ldi	r24, 0x07	; 7
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	0e 94 a6 08 	call	0x114c	; 0x114c <EEPROMClass::update(int, unsigned char) [clone .isra.15]>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:424
  EEPROM.update(eeprom_address + 8, keyValue[KEY_SOFT_CLIP_ENABLE].key);
    11d2:	6a 89       	ldd	r22, Y+18	; 0x12
    11d4:	88 e0       	ldi	r24, 0x08	; 8
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	0e 94 a6 08 	call	0x114c	; 0x114c <EEPROMClass::update(int, unsigned char) [clone .isra.15]>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:425
  EEPROM.update(eeprom_address + 9, keyValue[KEY_SOFT_CLIP_THRESHOLD].key);
    11dc:	6d 89       	ldd	r22, Y+21	; 0x15
    11de:	89 e0       	ldi	r24, 0x09	; 9
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	0e 94 a6 08 	call	0x114c	; 0x114c <EEPROMClass::update(int, unsigned char) [clone .isra.15]>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:426
  EEPROM.update(eeprom_address + 10, keyValue[KEY_GAIN_PILOT].key);
    11e6:	68 8d       	ldd	r22, Y+24	; 0x18
    11e8:	8a e0       	ldi	r24, 0x0A	; 10
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	0e 94 a6 08 	call	0x114c	; 0x114c <EEPROMClass::update(int, unsigned char) [clone .isra.15]>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:427
  EEPROM.update(eeprom_address + 11, keyValue[KEY_FREQ_DERIVATION].key);
    11f0:	6b 8d       	ldd	r22, Y+27	; 0x1b
    11f2:	8b e0       	ldi	r24, 0x0B	; 11
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	0e 94 a6 08 	call	0x114c	; 0x114c <EEPROMClass::update(int, unsigned char) [clone .isra.15]>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:428
  EEPROM.update(eeprom_address + 12, keyValue[KEY_BUFFER_GAIN].key);
    11fa:	6e 8d       	ldd	r22, Y+30	; 0x1e
    11fc:	8c e0       	ldi	r24, 0x0C	; 12
    11fe:	90 e0       	ldi	r25, 0x00	; 0
    1200:	0e 94 a6 08 	call	0x114c	; 0x114c <EEPROMClass::update(int, unsigned char) [clone .isra.15]>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:429
  EEPROM.update(eeprom_address + 13, keyValue[KEY_RDS_FREQ_DEV].key);
    1204:	69 a1       	ldd	r22, Y+33	; 0x21
    1206:	8d e0       	ldi	r24, 0x0D	; 13
    1208:	90 e0       	ldi	r25, 0x00	; 0
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:430
}
    120a:	df 91       	pop	r29
    120c:	cf 91       	pop	r28
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:429
  EEPROM.update(eeprom_address + 8, keyValue[KEY_SOFT_CLIP_ENABLE].key);
  EEPROM.update(eeprom_address + 9, keyValue[KEY_SOFT_CLIP_THRESHOLD].key);
  EEPROM.update(eeprom_address + 10, keyValue[KEY_GAIN_PILOT].key);
  EEPROM.update(eeprom_address + 11, keyValue[KEY_FREQ_DERIVATION].key);
  EEPROM.update(eeprom_address + 12, keyValue[KEY_BUFFER_GAIN].key);
  EEPROM.update(eeprom_address + 13, keyValue[KEY_RDS_FREQ_DEV].key);
    120e:	0c 94 a6 08 	jmp	0x114c	; 0x114c <EEPROMClass::update(int, unsigned char) [clone .isra.15]>

00001212 <EEPROMClass::read(int) [clone .isra.13]>:
_ZN11EEPROMClass4readEi.isra.13():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/EEPROM/src/EEPROM.h:42

    EERef( const int index )
        : index( index )                 {}
    
    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    1212:	0c 94 9e 14 	jmp	0x293c	; 0x293c <eeprom_read_byte>

00001216 <sendRDS()>:
_Z7sendRDSv():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:721
   8: Dreq. Deriv. 74.52
   9: Buffer gain = 3dB
  10: RDS Freq. Dev. 4.55kHz
*/

void sendRDS() {
    1216:	8f 92       	push	r8
    1218:	9f 92       	push	r9
    121a:	af 92       	push	r10
    121c:	bf 92       	push	r11
    121e:	cf 92       	push	r12
    1220:	df 92       	push	r13
    1222:	ef 92       	push	r14
    1224:	ff 92       	push	r15
    1226:	0f 93       	push	r16
    1228:	1f 93       	push	r17
    122a:	cf 93       	push	r28
    122c:	df 93       	push	r29
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:724

  // PS refreshing control
  if ((millis() - rdsTimePS) > RDS_PS_REFRESH_TIME) {
    122e:	0e 94 b6 02 	call	0x56c	; 0x56c <millis>
    1232:	00 91 07 06 	lds	r16, 0x0607	; 0x800607 <rdsTimePS>
    1236:	10 91 08 06 	lds	r17, 0x0608	; 0x800608 <rdsTimePS+0x1>
    123a:	20 91 09 06 	lds	r18, 0x0609	; 0x800609 <rdsTimePS+0x2>
    123e:	30 91 0a 06 	lds	r19, 0x060A	; 0x80060a <rdsTimePS+0x3>
    1242:	60 1b       	sub	r22, r16
    1244:	71 0b       	sbc	r23, r17
    1246:	82 0b       	sbc	r24, r18
    1248:	93 0b       	sbc	r25, r19
    124a:	69 38       	cpi	r22, 0x89	; 137
    124c:	73 41       	sbci	r23, 0x13	; 19
    124e:	81 05       	cpc	r24, r1
    1250:	91 05       	cpc	r25, r1
    1252:	08 f4       	brcc	.+2      	; 0x1256 <sendRDS()+0x40>
    1254:	60 c0       	rjmp	.+192    	; 0x1316 <sendRDS()+0x100>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:725
    if (idxRdsPS > lastRdsPS) idxRdsPS = 0;
    1256:	80 91 14 05 	lds	r24, 0x0514	; 0x800514 <idxRdsPS>
    125a:	85 30       	cpi	r24, 0x05	; 5
    125c:	10 f0       	brcs	.+4      	; 0x1262 <sendRDS()+0x4c>
    125e:	10 92 14 05 	sts	0x0514, r1	; 0x800514 <idxRdsPS>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:726
    delay(100);
    1262:	64 e6       	ldi	r22, 0x64	; 100
    1264:	70 e0       	ldi	r23, 0x00	; 0
    1266:	80 e0       	ldi	r24, 0x00	; 0
    1268:	90 e0       	ldi	r25, 0x00	; 0
    126a:	0e 94 83 02 	call	0x506	; 0x506 <delay>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:727
    tx.rdsSendPS(rdsPSmsg[idxRdsPS]);
    126e:	f0 90 14 05 	lds	r15, 0x0514	; 0x800514 <idxRdsPS>
    1272:	ef 2d       	mov	r30, r15
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	ee 0f       	add	r30, r30
    1278:	ff 1f       	adc	r31, r31
    127a:	e0 52       	subi	r30, 0x20	; 32
    127c:	fe 4f       	sbci	r31, 0xFE	; 254
    127e:	c0 80       	ld	r12, Z
    1280:	d1 80       	ldd	r13, Z+1	; 0x01
rdsSetStationName():
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:1414
 * @brief Sets the station name 
 * 
 * @param stationName 
 */
void QN8066::rdsSetStationName(char *stationName) { 
  strncpy(this->rdsStationName,stationName,8);
    1282:	48 e0       	ldi	r20, 0x08	; 8
    1284:	50 e0       	ldi	r21, 0x00	; 0
    1286:	b6 01       	movw	r22, r12
    1288:	85 ef       	ldi	r24, 0xF5	; 245
    128a:	95 e0       	ldi	r25, 0x05	; 5
    128c:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <strncpy>
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:1415
  rdsStationName[8] = '\0';
    1290:	10 92 fd 05 	sts	0x05FD, r1	; 0x8005fd <tx+0x1c>
rdsSendPS():
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:1449
  RDS_BLOCK3 b3;
  RDS_BLOCK4 b4;

  this->rdsSetStationName(ps);

  b1.pi = this->rdsPI;
    1294:	a0 90 fe 05 	lds	r10, 0x05FE	; 0x8005fe <tx+0x1d>
    1298:	b0 90 ff 05 	lds	r11, 0x05FF	; 0x8005ff <tx+0x1e>
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:1456
  b2.raw = 0; // Starts block2
  b2.group0Field.address = 0;
  b2.group0Field.DI = 0;
  b2.group0Field.MS = 0;
  b2.group0Field.TA = 0;
  b2.group0Field.programType = this->rdsPTY;
    129c:	c0 91 00 06 	lds	r28, 0x0600	; 0x800600 <tx+0x1f>
    12a0:	dc 2f       	mov	r29, r28
    12a2:	d2 95       	swap	r29
    12a4:	dd 0f       	add	r29, r29
    12a6:	d0 7e       	andi	r29, 0xE0	; 224
    12a8:	c6 95       	lsr	r28
    12aa:	c6 95       	lsr	r28
    12ac:	c6 95       	lsr	r28
    12ae:	c3 70       	andi	r28, 0x03	; 3
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:1457
  b2.group0Field.trafficProgramCode = this->rdsTP;  
    12b0:	80 91 01 06 	lds	r24, 0x0601	; 0x800601 <tx+0x20>
    12b4:	80 fb       	bst	r24, 0
    12b6:	c2 f9       	bld	r28, 2
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:1458
  b2.group0Field.versionCode = 1; // 0B - Station Name
    12b8:	c8 60       	ori	r28, 0x08	; 8
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:1459
  b2.group0Field.groupType = 0;  
    12ba:	cf 70       	andi	r28, 0x0F	; 15
_Z7sendRDSv():
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:1467
  // Therefore, through trial and error, transmitting the same RT message three or more times
  // made  this function works. 
  // It is important to ensure that the 2A or 2B groups are transmitted continuously and in 
  // sync so that receivers can correctly piece together the parts of the text and display 
  // them to the listener without interruptions.
  for ( uint8_t k  = 0; k < this->rdsRepeatGroup; k++) { 
    12bc:	e1 2c       	mov	r14, r1
    12be:	46 01       	movw	r8, r12
    12c0:	88 e0       	ldi	r24, 0x08	; 8
    12c2:	88 0e       	add	r8, r24
    12c4:	91 1c       	adc	r9, r1
rdsSendPS():
    12c6:	80 91 f4 05 	lds	r24, 0x05F4	; 0x8005f4 <tx+0x13>
    12ca:	e8 16       	cp	r14, r24
    12cc:	b0 f4       	brcc	.+44     	; 0x12fa <sendRDS()+0xe4>
    12ce:	86 01       	movw	r16, r12
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:1469
    for (uint8_t i = 0; i < 8; i+=2) { 
      b4.byteContent[0] = ps[i]; 
    12d0:	f8 01       	movw	r30, r16
    12d2:	20 81       	ld	r18, Z
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:1470
      b4.byteContent[1] = ps[i+1];
    12d4:	31 81       	ldd	r19, Z+1	; 0x01
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:1471
      this->rdsSendGroup(b1, b2, b3, b4);
    12d6:	a5 01       	movw	r20, r10
    12d8:	6d 2f       	mov	r22, r29
    12da:	7c 2f       	mov	r23, r28
    12dc:	c5 01       	movw	r24, r10
    12de:	0e 94 2c 07 	call	0xe58	; 0xe58 <QN8066::rdsSendGroup(RDS_BLOCK1, RDS_BLOCK2, RDS_BLOCK3, RDS_BLOCK4) [clone .constprop.33]>
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:1472
      b2.group0Field.address++; 
    12e2:	81 e0       	ldi	r24, 0x01	; 1
    12e4:	8d 0f       	add	r24, r29
    12e6:	83 70       	andi	r24, 0x03	; 3
    12e8:	dc 7f       	andi	r29, 0xFC	; 252
    12ea:	d8 2b       	or	r29, r24
    12ec:	0e 5f       	subi	r16, 0xFE	; 254
    12ee:	1f 4f       	sbci	r17, 0xFF	; 255
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:1468
  // made  this function works. 
  // It is important to ensure that the 2A or 2B groups are transmitted continuously and in 
  // sync so that receivers can correctly piece together the parts of the text and display 
  // them to the listener without interruptions.
  for ( uint8_t k  = 0; k < this->rdsRepeatGroup; k++) { 
    for (uint8_t i = 0; i < 8; i+=2) { 
    12f0:	80 16       	cp	r8, r16
    12f2:	91 06       	cpc	r9, r17
    12f4:	69 f7       	brne	.-38     	; 0x12d0 <sendRDS()+0xba>
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:1467
  // Therefore, through trial and error, transmitting the same RT message three or more times
  // made  this function works. 
  // It is important to ensure that the 2A or 2B groups are transmitted continuously and in 
  // sync so that receivers can correctly piece together the parts of the text and display 
  // them to the listener without interruptions.
  for ( uint8_t k  = 0; k < this->rdsRepeatGroup; k++) { 
    12f6:	e3 94       	inc	r14
    12f8:	e6 cf       	rjmp	.-52     	; 0x12c6 <sendRDS()+0xb0>
_Z7sendRDSv():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:728
    idxRdsPS++;
    12fa:	81 e0       	ldi	r24, 0x01	; 1
    12fc:	8f 0d       	add	r24, r15
    12fe:	80 93 14 05 	sts	0x0514, r24	; 0x800514 <idxRdsPS>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:729
    rdsTimePS = millis();
    1302:	0e 94 b6 02 	call	0x56c	; 0x56c <millis>
    1306:	60 93 07 06 	sts	0x0607, r22	; 0x800607 <rdsTimePS>
    130a:	70 93 08 06 	sts	0x0608, r23	; 0x800608 <rdsTimePS+0x1>
    130e:	80 93 09 06 	sts	0x0609, r24	; 0x800609 <rdsTimePS+0x2>
    1312:	90 93 0a 06 	sts	0x060A, r25	; 0x80060a <rdsTimePS+0x3>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:733
  }

  // RT refreshing control
  if ((millis() - rdsTimeRT) > RDS_RT_REFRESH_TIME) {
    1316:	0e 94 b6 02 	call	0x56c	; 0x56c <millis>
    131a:	00 91 03 06 	lds	r16, 0x0603	; 0x800603 <rdsTimeRT>
    131e:	10 91 04 06 	lds	r17, 0x0604	; 0x800604 <rdsTimeRT+0x1>
    1322:	20 91 05 06 	lds	r18, 0x0605	; 0x800605 <rdsTimeRT+0x2>
    1326:	30 91 06 06 	lds	r19, 0x0606	; 0x800606 <rdsTimeRT+0x3>
    132a:	60 1b       	sub	r22, r16
    132c:	71 0b       	sbc	r23, r17
    132e:	82 0b       	sbc	r24, r18
    1330:	93 0b       	sbc	r25, r19
    1332:	69 39       	cpi	r22, 0x99	; 153
    1334:	7a 43       	sbci	r23, 0x3A	; 58
    1336:	81 05       	cpc	r24, r1
    1338:	91 05       	cpc	r25, r1
    133a:	08 f4       	brcc	.+2      	; 0x133e <sendRDS()+0x128>
    133c:	77 c0       	rjmp	.+238    	; 0x142c <sendRDS()+0x216>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:734
    if (idxRdsRT > lastRdsRT) idxRdsRT = 0;
    133e:	80 91 13 05 	lds	r24, 0x0513	; 0x800513 <idxRdsRT>
    1342:	85 30       	cpi	r24, 0x05	; 5
    1344:	10 f0       	brcs	.+4      	; 0x134a <sendRDS()+0x134>
    1346:	10 92 13 05 	sts	0x0513, r1	; 0x800513 <idxRdsRT>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:735
    delay(100);
    134a:	64 e6       	ldi	r22, 0x64	; 100
    134c:	70 e0       	ldi	r23, 0x00	; 0
    134e:	80 e0       	ldi	r24, 0x00	; 0
    1350:	90 e0       	ldi	r25, 0x00	; 0
    1352:	0e 94 83 02 	call	0x506	; 0x506 <delay>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:736
    tx.rdsSendRTMessage(rdsRTmsg[idxRdsRT]);     // See rdsSendRTMessage in https://pu2clr.github.io/QN8066/extras/apidoc/html/index.html
    1356:	d0 91 13 05 	lds	r29, 0x0513	; 0x800513 <idxRdsRT>
    135a:	ed 2f       	mov	r30, r29
    135c:	f0 e0       	ldi	r31, 0x00	; 0
    135e:	ee 0f       	add	r30, r30
    1360:	ff 1f       	adc	r31, r31
    1362:	ea 52       	subi	r30, 0x2A	; 42
    1364:	fe 4f       	sbci	r31, 0xFE	; 254
    1366:	e0 80       	ld	r14, Z
    1368:	f1 80       	ldd	r15, Z+1	; 0x01
rdsSendRTMessage():
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:1502
 * @endcode  
 */
void QN8066::rdsSendRTMessage(char *rt) {

    // Flushes any previus data
    this->rdsSetTxToggle();
    136a:	0e 94 17 07 	call	0xe2e	; 0xe2e <QN8066::rdsSetTxToggle() [clone .constprop.34]>
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:1504

    int textLen = strlen(rt);
    136e:	f7 01       	movw	r30, r14
    1370:	01 90       	ld	r0, Z+
    1372:	00 20       	and	r0, r0
    1374:	e9 f7       	brne	.-6      	; 0x1370 <sendRDS()+0x15a>
    1376:	8f 01       	movw	r16, r30
    1378:	0e 19       	sub	r16, r14
    137a:	1f 09       	sbc	r17, r15
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:1505
    int numGroups = (textLen + 3) / 4; // Each group can contain 4 characters
    137c:	0e 5f       	subi	r16, 0xFE	; 254
    137e:	1f 4f       	sbci	r17, 0xFF	; 255
    1380:	15 95       	asr	r17
    1382:	07 95       	ror	r16
    1384:	15 95       	asr	r17
    1386:	07 95       	ror	r16
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:1507
    RDS_BLOCK1 block1;
    block1.pi = this->rdsPI;
    1388:	c0 90 fe 05 	lds	r12, 0x05FE	; 0x8005fe <tx+0x1d>
    138c:	d0 90 ff 05 	lds	r13, 0x05FF	; 0x8005ff <tx+0x1e>
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:1510
    static bool toggle = false;

    toggle = !toggle;
    1390:	80 91 12 05 	lds	r24, 0x0512	; 0x800512 <QN8066::rdsSendRTMessage(char*)::toggle>
    1394:	91 e0       	ldi	r25, 0x01	; 1
    1396:	89 27       	eor	r24, r25
    1398:	80 93 12 05 	sts	0x0512, r24	; 0x800512 <QN8066::rdsSendRTMessage(char*)::toggle>
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:1513

    RDS_BLOCK2 block2; 
    block2.raw = 0;
    139c:	b1 2c       	mov	r11, r1
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:1514
    block2.group2Field.textABFlag = toggle;
    139e:	80 fb       	bst	r24, 0
    13a0:	b4 f8       	bld	r11, 4
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:1515
    block2.group2Field.programType = this->rdsPTY;
    13a2:	c0 91 00 06 	lds	r28, 0x0600	; 0x800600 <tx+0x1f>
    13a6:	8c 2f       	mov	r24, r28
    13a8:	82 95       	swap	r24
    13aa:	88 0f       	add	r24, r24
    13ac:	80 7e       	andi	r24, 0xE0	; 224
    13ae:	fb 2d       	mov	r31, r11
    13b0:	ff 71       	andi	r31, 0x1F	; 31
    13b2:	bf 2e       	mov	r11, r31
    13b4:	b8 2a       	or	r11, r24
    13b6:	c6 95       	lsr	r28
    13b8:	c6 95       	lsr	r28
    13ba:	c6 95       	lsr	r28
    13bc:	c3 70       	andi	r28, 0x03	; 3
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:1516
    block2.group2Field.trafficProgramCode = this->rdsTP;
    13be:	80 91 01 06 	lds	r24, 0x0601	; 0x800601 <tx+0x20>
    13c2:	80 fb       	bst	r24, 0
    13c4:	c2 f9       	bld	r28, 2
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:1518
    block2.group2Field.versionCode = 0; // Version A
    block2.group2Field.groupType = 2;  // Group 2
    13c6:	c7 70       	andi	r28, 0x07	; 7
    13c8:	c0 62       	ori	r28, 0x20	; 32
_Z7sendRDSv():
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:1526
    // Therefore, through trial and error, transmitting the same RT message three or more times
    // made  this function feasible.
    // It is important to ensure that the 2A or 2B groups are transmitted continuously and in 
    // sync so that receivers can correctly piece together the parts of the text and display 
    // them to the listener without interruptions.    
    for ( uint8_t k  = 0; k < this->rdsRepeatGroup; k++) { 
    13ca:	91 2c       	mov	r9, r1
rdsSendRTMessage():
    13cc:	80 91 f4 05 	lds	r24, 0x05F4	; 0x8005f4 <tx+0x13>
    13d0:	98 16       	cp	r9, r24
    13d2:	f8 f4       	brcc	.+62     	; 0x1412 <sendRDS()+0x1fc>
_Z7sendRDSv():
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:1527
      for (uint8_t i = 0; i < numGroups; i++) {
    13d4:	a1 2c       	mov	r10, r1
rdsSendRTMessage():
    13d6:	ea 2d       	mov	r30, r10
    13d8:	f0 e0       	ldi	r31, 0x00	; 0
    13da:	e0 17       	cp	r30, r16
    13dc:	f1 07       	cpc	r31, r17
    13de:	bc f4       	brge	.+46     	; 0x140e <sendRDS()+0x1f8>
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:1528
          block2.group2Field.address = i; 
    13e0:	8a 2d       	mov	r24, r10
    13e2:	8f 70       	andi	r24, 0x0F	; 15
    13e4:	2b 2d       	mov	r18, r11
    13e6:	20 7f       	andi	r18, 0xF0	; 240
    13e8:	b2 2e       	mov	r11, r18
    13ea:	b8 2a       	or	r11, r24
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:1530
          RDS_BLOCK3 block3; 
          block3.byteContent[0] = rt[i * 4];
    13ec:	ee 0f       	add	r30, r30
    13ee:	ff 1f       	adc	r31, r31
    13f0:	ee 0f       	add	r30, r30
    13f2:	ff 1f       	adc	r31, r31
    13f4:	ee 0d       	add	r30, r14
    13f6:	ff 1d       	adc	r31, r15
    13f8:	40 81       	ld	r20, Z
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:1531
          block3.byteContent[1] = rt[i * 4 + 1];
    13fa:	51 81       	ldd	r21, Z+1	; 0x01
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:1533
          RDS_BLOCK4 block4;
          block4.byteContent[0] = rt[i * 4 + 2];
    13fc:	22 81       	ldd	r18, Z+2	; 0x02
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:1534
          block4.byteContent[1] = rt[i * 4 + 3]; 
    13fe:	33 81       	ldd	r19, Z+3	; 0x03
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:1535
          this->rdsSendGroup(block1, block2, block3, block4);
    1400:	6b 2d       	mov	r22, r11
    1402:	7c 2f       	mov	r23, r28
    1404:	c6 01       	movw	r24, r12
    1406:	0e 94 2c 07 	call	0xe58	; 0xe58 <QN8066::rdsSendGroup(RDS_BLOCK1, RDS_BLOCK2, RDS_BLOCK3, RDS_BLOCK4) [clone .constprop.33]>
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:1527
    // made  this function feasible.
    // It is important to ensure that the 2A or 2B groups are transmitted continuously and in 
    // sync so that receivers can correctly piece together the parts of the text and display 
    // them to the listener without interruptions.    
    for ( uint8_t k  = 0; k < this->rdsRepeatGroup; k++) { 
      for (uint8_t i = 0; i < numGroups; i++) {
    140a:	a3 94       	inc	r10
    140c:	e4 cf       	rjmp	.-56     	; 0x13d6 <sendRDS()+0x1c0>
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:1526
    // Therefore, through trial and error, transmitting the same RT message three or more times
    // made  this function feasible.
    // It is important to ensure that the 2A or 2B groups are transmitted continuously and in 
    // sync so that receivers can correctly piece together the parts of the text and display 
    // them to the listener without interruptions.    
    for ( uint8_t k  = 0; k < this->rdsRepeatGroup; k++) { 
    140e:	93 94       	inc	r9
    1410:	dd cf       	rjmp	.-70     	; 0x13cc <sendRDS()+0x1b6>
_Z7sendRDSv():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:737
    idxRdsRT++;
    1412:	df 5f       	subi	r29, 0xFF	; 255
    1414:	d0 93 13 05 	sts	0x0513, r29	; 0x800513 <idxRdsRT>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:738
    rdsTimeRT = millis();
    1418:	0e 94 b6 02 	call	0x56c	; 0x56c <millis>
    141c:	60 93 03 06 	sts	0x0603, r22	; 0x800603 <rdsTimeRT>
    1420:	70 93 04 06 	sts	0x0604, r23	; 0x800604 <rdsTimeRT+0x1>
    1424:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <rdsTimeRT+0x2>
    1428:	90 93 06 06 	sts	0x0606, r25	; 0x800606 <rdsTimeRT+0x3>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:740
  }
}
    142c:	df 91       	pop	r29
    142e:	cf 91       	pop	r28
    1430:	1f 91       	pop	r17
    1432:	0f 91       	pop	r16
    1434:	ff 90       	pop	r15
    1436:	ef 90       	pop	r14
    1438:	df 90       	pop	r13
    143a:	cf 90       	pop	r12
    143c:	bf 90       	pop	r11
    143e:	af 90       	pop	r10
    1440:	9f 90       	pop	r9
    1442:	8f 90       	pop	r8
    1444:	08 95       	ret

00001446 <showStatus(unsigned char)>:
_Z10showStatush():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:489
  sprintf(strPower, "%d%%  ", currentPower);
  lcd.setCursor(0, 1);
  lcd.print(strPower);
}
// Shows the general current transmitter status
void showStatus(uint8_t page) {
    1446:	ff 92       	push	r15
    1448:	0f 93       	push	r16
    144a:	1f 93       	push	r17
    144c:	cf 93       	push	r28
    144e:	df 93       	push	r29
    1450:	cd b7       	in	r28, 0x3d	; 61
    1452:	de b7       	in	r29, 0x3e	; 62
    1454:	6b 97       	sbiw	r28, 0x1b	; 27
    1456:	0f b6       	in	r0, 0x3f	; 63
    1458:	f8 94       	cli
    145a:	de bf       	out	0x3e, r29	; 62
    145c:	0f be       	out	0x3f, r0	; 63
    145e:	cd bf       	out	0x3d, r28	; 61
    1460:	f8 2e       	mov	r15, r24
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:493
  char strFrequency[7];
  char str[20];

  lcd.clear();
    1462:	0e 94 a2 03 	call	0x744	; 0x744 <LiquidCrystal::clear() [clone .constprop.28]>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:494
  checkQN8066();
    1466:	0e 94 8b 08 	call	0x1116	; 0x1116 <checkQN8066()>
    146a:	8e 01       	movw	r16, r28
    146c:	0f 5f       	subi	r16, 0xFF	; 255
    146e:	1f 4f       	sbci	r17, 0xFF	; 255
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:495
  if (page == 0) {
    1470:	f1 10       	cpse	r15, r1
    1472:	74 c0       	rjmp	.+232    	; 0x155c <showStatus(unsigned char)+0x116>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:496
    tx.convertToChar(txFrequency, strFrequency, 4, 3, ',');  // Convert the selected frequency a array of char
    1474:	be 01       	movw	r22, r28
    1476:	6b 5e       	subi	r22, 0xEB	; 235
    1478:	7f 4f       	sbci	r23, 0xFF	; 255
    147a:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <txFrequency>
    147e:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <txFrequency+0x1>
    1482:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <QN8066::convertToChar(unsigned int, char*, unsigned char, unsigned char, unsigned char, bool) [clone .constprop.17]>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:497
    lcd.setCursor(0, 0);
    1486:	60 e0       	ldi	r22, 0x00	; 0
    1488:	80 e0       	ldi	r24, 0x00	; 0
    148a:	0e 94 93 03 	call	0x726	; 0x726 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.40]>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:498
    lcd.print(strFrequency);
    148e:	ce 01       	movw	r24, r28
    1490:	45 96       	adiw	r24, 0x15	; 21
    1492:	0e 94 ee 07 	call	0xfdc	; 0xfdc <Print::print(char const*) [clone .constprop.37]>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:499
    lcd.print("MHz");
    1496:	8b e1       	ldi	r24, 0x1B	; 27
    1498:	92 e0       	ldi	r25, 0x02	; 2
    149a:	0e 94 ee 07 	call	0xfdc	; 0xfdc <Print::print(char const*) [clone .constprop.37]>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:500
    lcd.setCursor(10, 0);
    149e:	60 e0       	ldi	r22, 0x00	; 0
    14a0:	8a e0       	ldi	r24, 0x0A	; 10
    14a2:	0e 94 93 03 	call	0x726	; 0x726 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.40]>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:502
    // lcd.print(  tabMonoStereo[idxStereoMono].desc );
    lcd.print(keyValue[KEY_MONO_ESTEREO].value[keyValue[KEY_MONO_ESTEREO].key].desc);  // Mono Stereo
    14a6:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <keyValue+0x6>
    14aa:	e0 91 80 01 	lds	r30, 0x0180	; 0x800180 <keyValue+0x7>
    14ae:	f0 91 81 01 	lds	r31, 0x0181	; 0x800181 <keyValue+0x8>
    14b2:	23 e0       	ldi	r18, 0x03	; 3
    14b4:	82 02       	muls	r24, r18
    14b6:	e0 0d       	add	r30, r0
    14b8:	f1 1d       	adc	r31, r1
    14ba:	11 24       	eor	r1, r1
    14bc:	81 81       	ldd	r24, Z+1	; 0x01
    14be:	92 81       	ldd	r25, Z+2	; 0x02
    14c0:	0e 94 ee 07 	call	0xfdc	; 0xfdc <Print::print(char const*) [clone .constprop.37]>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:503
    lcd.setCursor(0, 1);
    14c4:	61 e0       	ldi	r22, 0x01	; 1
    14c6:	80 e0       	ldi	r24, 0x00	; 0
    14c8:	0e 94 93 03 	call	0x726	; 0x726 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.40]>
getStatus3():
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:183
 *}
 * @endcode 
 */
qn8066_status3 QN8066::getStatus3() {
  qn8066_status3 value;
  value.raw = this->getRegister(QN_STATUS3);
    14cc:	8a e1       	ldi	r24, 0x1A	; 26
    14ce:	0e 94 07 06 	call	0xc0e	; 0xc0e <QN8066::getRegister(unsigned char) [clone .constprop.55]>
getAudioPeakValue():
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:1061
 * void loop() {
 * }
 * @endcode   
 */
int QN8066::getAudioPeakValue() {
  return this->getStatus3().arg.aud_pk * 45;
    14d2:	68 2f       	mov	r22, r24
    14d4:	66 95       	lsr	r22
    14d6:	66 95       	lsr	r22
    14d8:	66 95       	lsr	r22
    14da:	6f 70       	andi	r22, 0x0F	; 15
    14dc:	8d e2       	ldi	r24, 0x2D	; 45
    14de:	68 9f       	mul	r22, r24
    14e0:	b0 01       	movw	r22, r0
    14e2:	11 24       	eor	r1, r1
print():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/Print.cpp:97
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
    14e4:	07 2e       	mov	r0, r23
    14e6:	00 0c       	add	r0, r0
    14e8:	88 0b       	sbc	r24, r24
    14ea:	99 0b       	sbc	r25, r25
    14ec:	4a e0       	ldi	r20, 0x0A	; 10
    14ee:	0e 94 a0 07 	call	0xf40	; 0xf40 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.13]>
_Z10showStatush():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:505
    lcd.print(tx.getAudioPeakValue());
    lcd.print("mV");
    14f2:	8f e1       	ldi	r24, 0x1F	; 31
    14f4:	92 e0       	ldi	r25, 0x02	; 2
    14f6:	0e 94 ee 07 	call	0xfdc	; 0xfdc <Print::print(char const*) [clone .constprop.37]>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:506
    lcd.setCursor(10, 1);
    14fa:	61 e0       	ldi	r22, 0x01	; 1
    14fc:	8a e0       	ldi	r24, 0x0A	; 10
    14fe:	0e 94 93 03 	call	0x726	; 0x726 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.40]>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:507
    sprintf(str, "PA:%d%%", pwmPowerDuty * 100 / 255);
    1502:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <pwmPowerDuty>
    1506:	24 e6       	ldi	r18, 0x64	; 100
    1508:	82 9f       	mul	r24, r18
    150a:	c0 01       	movw	r24, r0
    150c:	11 24       	eor	r1, r1
    150e:	6f ef       	ldi	r22, 0xFF	; 255
    1510:	70 e0       	ldi	r23, 0x00	; 0
    1512:	0e 94 ff 14 	call	0x29fe	; 0x29fe <__divmodhi4>
    1516:	7f 93       	push	r23
    1518:	6f 93       	push	r22
    151a:	82 e2       	ldi	r24, 0x22	; 34
    151c:	92 e0       	ldi	r25, 0x02	; 2
    151e:	9f 93       	push	r25
    1520:	8f 93       	push	r24
    1522:	1f 93       	push	r17
    1524:	0f 93       	push	r16
    1526:	0e 94 4a 15 	call	0x2a94	; 0x2a94 <sprintf>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:508
    lcd.print(str);
    152a:	c8 01       	movw	r24, r16
    152c:	0e 94 ee 07 	call	0xfdc	; 0xfdc <Print::print(char const*) [clone .constprop.37]>
_ZN6QN806614resetAudioPeakEv():
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.h:959
   * }
   * void loop() {
   * }
   * @endcode  
   */
  inline void resetAudioPeak() {this->setToggleTxPdClear();};
    1530:	0e 94 90 07 	call	0xf20	; 0xf20 <QN8066::setToggleTxPdClear() [clone .constprop.14]>
    1534:	0f 90       	pop	r0
    1536:	0f 90       	pop	r0
    1538:	0f 90       	pop	r0
    153a:	0f 90       	pop	r0
    153c:	0f 90       	pop	r0
    153e:	0f 90       	pop	r0
_Z10showStatush():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:535
    lcd.print(str);
    lcd.setCursor(0, 1);
    sprintf(str, "RDS ERR: %d", tx.rdsGetError());
    lcd.print(str);
  }
  lcd.display();
    1540:	0e 94 a9 03 	call	0x752	; 0x752 <LiquidCrystal::display() [clone .constprop.27]>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:536
}
    1544:	6b 96       	adiw	r28, 0x1b	; 27
    1546:	0f b6       	in	r0, 0x3f	; 63
    1548:	f8 94       	cli
    154a:	de bf       	out	0x3e, r29	; 62
    154c:	0f be       	out	0x3f, r0	; 63
    154e:	cd bf       	out	0x3d, r28	; 61
    1550:	df 91       	pop	r29
    1552:	cf 91       	pop	r28
    1554:	1f 91       	pop	r17
    1556:	0f 91       	pop	r16
    1558:	ff 90       	pop	r15
    155a:	08 95       	ret
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:510
    lcd.print("mV");
    lcd.setCursor(10, 1);
    sprintf(str, "PA:%d%%", pwmPowerDuty * 100 / 255);
    lcd.print(str);
    tx.resetAudioPeak();
  } else if (page == 1) {
    155c:	81 e0       	ldi	r24, 0x01	; 1
    155e:	f8 12       	cpse	r15, r24
    1560:	5a c0       	rjmp	.+180    	; 0x1616 <showStatus(unsigned char)+0x1d0>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:511
    lcd.setCursor(0, 0);
    1562:	60 e0       	ldi	r22, 0x00	; 0
    1564:	80 e0       	ldi	r24, 0x00	; 0
    1566:	0e 94 93 03 	call	0x726	; 0x726 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.40]>
getFsmStateCode():
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:1582
 * }
 * @endcode   
 */
uint8_t QN8066:: getFsmStateCode() {
  qn8066_status1 s1;
  s1.raw = this->getRegister(QN_STATUS1);
    156a:	8a e0       	ldi	r24, 0x0A	; 10
    156c:	0e 94 07 06 	call	0xc0e	; 0xc0e <QN8066::getRegister(unsigned char) [clone .constprop.55]>
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:1583
  return s1.arg.FSM;
    1570:	82 95       	swap	r24
    1572:	8f 70       	andi	r24, 0x0F	; 15
_Z10showStatush():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:512
    sprintf(str, "FSM: %d", tx.getFsmStateCode());
    1574:	1f 92       	push	r1
    1576:	8f 93       	push	r24
    1578:	8a e2       	ldi	r24, 0x2A	; 42
    157a:	92 e0       	ldi	r25, 0x02	; 2
    157c:	9f 93       	push	r25
    157e:	8f 93       	push	r24
    1580:	1f 93       	push	r17
    1582:	0f 93       	push	r16
    1584:	0e 94 4a 15 	call	0x2a94	; 0x2a94 <sprintf>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:513
    lcd.print(str);
    1588:	c8 01       	movw	r24, r16
    158a:	0e 94 ee 07 	call	0xfdc	; 0xfdc <Print::print(char const*) [clone .constprop.37]>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:514
    sprintf(str, "RIN:%s", keyValue[KEY_INPEDANCE].value[keyValue[KEY_INPEDANCE].key].desc);
    158e:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <keyValue+0xf>
    1592:	23 e0       	ldi	r18, 0x03	; 3
    1594:	f2 2e       	mov	r15, r18
    1596:	e0 91 89 01 	lds	r30, 0x0189	; 0x800189 <keyValue+0x10>
    159a:	f0 91 8a 01 	lds	r31, 0x018A	; 0x80018a <keyValue+0x11>
    159e:	9f 2d       	mov	r25, r15
    15a0:	89 02       	muls	r24, r25
    15a2:	e0 0d       	add	r30, r0
    15a4:	f1 1d       	adc	r31, r1
    15a6:	11 24       	eor	r1, r1
    15a8:	82 81       	ldd	r24, Z+2	; 0x02
    15aa:	8f 93       	push	r24
    15ac:	81 81       	ldd	r24, Z+1	; 0x01
    15ae:	8f 93       	push	r24
    15b0:	82 e3       	ldi	r24, 0x32	; 50
    15b2:	92 e0       	ldi	r25, 0x02	; 2
    15b4:	9f 93       	push	r25
    15b6:	8f 93       	push	r24
    15b8:	1f 93       	push	r17
    15ba:	0f 93       	push	r16
    15bc:	0e 94 4a 15 	call	0x2a94	; 0x2a94 <sprintf>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:515
    lcd.setCursor(9, 0);
    15c0:	60 e0       	ldi	r22, 0x00	; 0
    15c2:	89 e0       	ldi	r24, 0x09	; 9
    15c4:	0e 94 93 03 	call	0x726	; 0x726 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.40]>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:516
    lcd.print(str);
    15c8:	c8 01       	movw	r24, r16
    15ca:	0e 94 ee 07 	call	0xfdc	; 0xfdc <Print::print(char const*) [clone .constprop.37]>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:517
    lcd.setCursor(0, 1);
    15ce:	61 e0       	ldi	r22, 0x01	; 1
    15d0:	80 e0       	ldi	r24, 0x00	; 0
    15d2:	0e 94 93 03 	call	0x726	; 0x726 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.40]>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:518
    sprintf(str, "DEV.: %s", keyValue[KEY_FREQ_DERIVATION].value[keyValue[KEY_FREQ_DERIVATION].key].desc);
    15d6:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <keyValue+0x1b>
    15da:	e0 91 95 01 	lds	r30, 0x0195	; 0x800195 <keyValue+0x1c>
    15de:	f0 91 96 01 	lds	r31, 0x0196	; 0x800196 <keyValue+0x1d>
    15e2:	2f 2d       	mov	r18, r15
    15e4:	82 02       	muls	r24, r18
    15e6:	e0 0d       	add	r30, r0
    15e8:	f1 1d       	adc	r31, r1
    15ea:	11 24       	eor	r1, r1
    15ec:	82 81       	ldd	r24, Z+2	; 0x02
    15ee:	8f 93       	push	r24
    15f0:	81 81       	ldd	r24, Z+1	; 0x01
    15f2:	8f 93       	push	r24
    15f4:	89 e3       	ldi	r24, 0x39	; 57
    15f6:	92 e0       	ldi	r25, 0x02	; 2
    15f8:	9f 93       	push	r25
    15fa:	8f 93       	push	r24
    15fc:	1f 93       	push	r17
    15fe:	0f 93       	push	r16
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:532
  } else {
    sprintf(str, "%s PTY:%2d", tx.rdsGetPS(), tx.rdsGetPTY());
    lcd.setCursor(0, 0);
    lcd.print(str);
    lcd.setCursor(0, 1);
    sprintf(str, "RDS ERR: %d", tx.rdsGetError());
    1600:	0e 94 4a 15 	call	0x2a94	; 0x2a94 <sprintf>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:533
    lcd.print(str);
    1604:	c8 01       	movw	r24, r16
    1606:	0e 94 ee 07 	call	0xfdc	; 0xfdc <Print::print(char const*) [clone .constprop.37]>
    160a:	0f b6       	in	r0, 0x3f	; 63
    160c:	f8 94       	cli
    160e:	de bf       	out	0x3e, r29	; 62
    1610:	0f be       	out	0x3f, r0	; 63
    1612:	cd bf       	out	0x3d, r28	; 61
    1614:	95 cf       	rjmp	.-214    	; 0x1540 <showStatus(unsigned char)+0xfa>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:520
    lcd.setCursor(9, 0);
    lcd.print(str);
    lcd.setCursor(0, 1);
    sprintf(str, "DEV.: %s", keyValue[KEY_FREQ_DERIVATION].value[keyValue[KEY_FREQ_DERIVATION].key].desc);
    lcd.print(str);
  } else if (page == 2) {
    1616:	92 e0       	ldi	r25, 0x02	; 2
    1618:	f9 12       	cpse	r15, r25
    161a:	3a c0       	rjmp	.+116    	; 0x1690 <showStatus(unsigned char)+0x24a>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:521
    sprintf(str, "BG:%s", keyValue[KEY_BUFFER_GAIN].value[keyValue[KEY_BUFFER_GAIN].key].desc);
    161c:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <keyValue+0x1e>
    1620:	93 e0       	ldi	r25, 0x03	; 3
    1622:	f9 2e       	mov	r15, r25
    1624:	e0 91 98 01 	lds	r30, 0x0198	; 0x800198 <keyValue+0x1f>
    1628:	f0 91 99 01 	lds	r31, 0x0199	; 0x800199 <keyValue+0x20>
    162c:	2f 2d       	mov	r18, r15
    162e:	82 02       	muls	r24, r18
    1630:	e0 0d       	add	r30, r0
    1632:	f1 1d       	adc	r31, r1
    1634:	11 24       	eor	r1, r1
    1636:	82 81       	ldd	r24, Z+2	; 0x02
    1638:	8f 93       	push	r24
    163a:	81 81       	ldd	r24, Z+1	; 0x01
    163c:	8f 93       	push	r24
    163e:	82 e4       	ldi	r24, 0x42	; 66
    1640:	92 e0       	ldi	r25, 0x02	; 2
    1642:	9f 93       	push	r25
    1644:	8f 93       	push	r24
    1646:	1f 93       	push	r17
    1648:	0f 93       	push	r16
    164a:	0e 94 4a 15 	call	0x2a94	; 0x2a94 <sprintf>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:522
    lcd.setCursor(0, 0);
    164e:	60 e0       	ldi	r22, 0x00	; 0
    1650:	80 e0       	ldi	r24, 0x00	; 0
    1652:	0e 94 93 03 	call	0x726	; 0x726 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.40]>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:523
    lcd.print(str);
    1656:	c8 01       	movw	r24, r16
    1658:	0e 94 ee 07 	call	0xfdc	; 0xfdc <Print::print(char const*) [clone .constprop.37]>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:524
    lcd.setCursor(0, 1);
    165c:	61 e0       	ldi	r22, 0x01	; 1
    165e:	80 e0       	ldi	r24, 0x00	; 0
    1660:	0e 94 93 03 	call	0x726	; 0x726 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.40]>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:525
    sprintf(str, "PIL.:%s", keyValue[KEY_GAIN_PILOT].value[keyValue[KEY_GAIN_PILOT].key].desc);
    1664:	80 91 91 01 	lds	r24, 0x0191	; 0x800191 <keyValue+0x18>
    1668:	e0 91 92 01 	lds	r30, 0x0192	; 0x800192 <keyValue+0x19>
    166c:	f0 91 93 01 	lds	r31, 0x0193	; 0x800193 <keyValue+0x1a>
    1670:	9f 2d       	mov	r25, r15
    1672:	89 02       	muls	r24, r25
    1674:	e0 0d       	add	r30, r0
    1676:	f1 1d       	adc	r31, r1
    1678:	11 24       	eor	r1, r1
    167a:	82 81       	ldd	r24, Z+2	; 0x02
    167c:	8f 93       	push	r24
    167e:	81 81       	ldd	r24, Z+1	; 0x01
    1680:	8f 93       	push	r24
    1682:	88 e4       	ldi	r24, 0x48	; 72
    1684:	92 e0       	ldi	r25, 0x02	; 2
    1686:	9f 93       	push	r25
    1688:	8f 93       	push	r24
    168a:	1f 93       	push	r17
    168c:	0f 93       	push	r16
    168e:	b8 cf       	rjmp	.-144    	; 0x1600 <showStatus(unsigned char)+0x1ba>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:528
    lcd.print(str);
  } else {
    sprintf(str, "%s PTY:%2d", tx.rdsGetPS(), tx.rdsGetPTY());
    1690:	80 91 00 06 	lds	r24, 0x0600	; 0x800600 <tx+0x1f>
    1694:	1f 92       	push	r1
    1696:	8f 93       	push	r24
    1698:	85 ef       	ldi	r24, 0xF5	; 245
    169a:	95 e0       	ldi	r25, 0x05	; 5
    169c:	9f 93       	push	r25
    169e:	8f 93       	push	r24
    16a0:	80 e5       	ldi	r24, 0x50	; 80
    16a2:	92 e0       	ldi	r25, 0x02	; 2
    16a4:	9f 93       	push	r25
    16a6:	8f 93       	push	r24
    16a8:	1f 93       	push	r17
    16aa:	0f 93       	push	r16
    16ac:	0e 94 4a 15 	call	0x2a94	; 0x2a94 <sprintf>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:529
    lcd.setCursor(0, 0);
    16b0:	60 e0       	ldi	r22, 0x00	; 0
    16b2:	80 e0       	ldi	r24, 0x00	; 0
    16b4:	0e 94 93 03 	call	0x726	; 0x726 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.40]>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:530
    lcd.print(str);
    16b8:	c8 01       	movw	r24, r16
    16ba:	0e 94 ee 07 	call	0xfdc	; 0xfdc <Print::print(char const*) [clone .constprop.37]>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:531
    lcd.setCursor(0, 1);
    16be:	61 e0       	ldi	r22, 0x01	; 1
    16c0:	80 e0       	ldi	r24, 0x00	; 0
    16c2:	0e 94 93 03 	call	0x726	; 0x726 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.40]>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:532
    sprintf(str, "RDS ERR: %d", tx.rdsGetError());
    16c6:	80 91 02 06 	lds	r24, 0x0602	; 0x800602 <tx+0x21>
    16ca:	1f 92       	push	r1
    16cc:	8f 93       	push	r24
    16ce:	8b e5       	ldi	r24, 0x5B	; 91
    16d0:	92 e0       	ldi	r25, 0x02	; 2
    16d2:	9f 93       	push	r25
    16d4:	8f 93       	push	r24
    16d6:	1f 93       	push	r17
    16d8:	0f 93       	push	r16
    16da:	92 cf       	rjmp	.-220    	; 0x1600 <showStatus(unsigned char)+0x1ba>

000016dc <showPower()>:
_Z9showPowerv():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:480
  lcd.setCursor(0, 1);
  lcd.print(strFrequency);
  lcd.display();
}
// Shows the current power in percent (duty cycle)
void showPower() {
    16dc:	0f 93       	push	r16
    16de:	1f 93       	push	r17
    16e0:	cf 93       	push	r28
    16e2:	df 93       	push	r29
    16e4:	00 d0       	rcall	.+0      	; 0x16e6 <showPower()+0xa>
    16e6:	00 d0       	rcall	.+0      	; 0x16e8 <showPower()+0xc>
    16e8:	00 d0       	rcall	.+0      	; 0x16ea <showPower()+0xe>
    16ea:	1f 92       	push	r1
    16ec:	cd b7       	in	r28, 0x3d	; 61
    16ee:	de b7       	in	r29, 0x3e	; 62
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:483
  char strPower[7];
  // uint16_t currentPower = (uint16_t)(pwmPowerDuty * 7 / 255);
  uint16_t currentPower = (uint16_t)(pwmPowerDuty * 100 / 255);
    16f0:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <pwmPowerDuty>
    16f4:	24 e6       	ldi	r18, 0x64	; 100
    16f6:	82 9f       	mul	r24, r18
    16f8:	c0 01       	movw	r24, r0
    16fa:	11 24       	eor	r1, r1
    16fc:	6f ef       	ldi	r22, 0xFF	; 255
    16fe:	70 e0       	ldi	r23, 0x00	; 0
    1700:	0e 94 ff 14 	call	0x29fe	; 0x29fe <__divmodhi4>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:484
  sprintf(strPower, "%d%%  ", currentPower);
    1704:	7f 93       	push	r23
    1706:	6f 93       	push	r22
    1708:	87 e6       	ldi	r24, 0x67	; 103
    170a:	92 e0       	ldi	r25, 0x02	; 2
    170c:	9f 93       	push	r25
    170e:	8f 93       	push	r24
    1710:	8e 01       	movw	r16, r28
    1712:	0f 5f       	subi	r16, 0xFF	; 255
    1714:	1f 4f       	sbci	r17, 0xFF	; 255
    1716:	1f 93       	push	r17
    1718:	0f 93       	push	r16
    171a:	0e 94 4a 15 	call	0x2a94	; 0x2a94 <sprintf>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:485
  lcd.setCursor(0, 1);
    171e:	61 e0       	ldi	r22, 0x01	; 1
    1720:	80 e0       	ldi	r24, 0x00	; 0
    1722:	0e 94 93 03 	call	0x726	; 0x726 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.40]>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:486
  lcd.print(strPower);
    1726:	c8 01       	movw	r24, r16
    1728:	0e 94 ee 07 	call	0xfdc	; 0xfdc <Print::print(char const*) [clone .constprop.37]>
    172c:	0f 90       	pop	r0
    172e:	0f 90       	pop	r0
    1730:	0f 90       	pop	r0
    1732:	0f 90       	pop	r0
    1734:	0f 90       	pop	r0
    1736:	0f 90       	pop	r0
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:487
}
    1738:	27 96       	adiw	r28, 0x07	; 7
    173a:	0f b6       	in	r0, 0x3f	; 63
    173c:	f8 94       	cli
    173e:	de bf       	out	0x3e, r29	; 62
    1740:	0f be       	out	0x3f, r0	; 63
    1742:	cd bf       	out	0x3d, r28	; 61
    1744:	df 91       	pop	r29
    1746:	cf 91       	pop	r28
    1748:	1f 91       	pop	r17
    174a:	0f 91       	pop	r16
    174c:	08 95       	ret

0000174e <showMenu(unsigned char)>:
_Z8showMenuh():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:558
      return ENCODER_RIGHT;
  } while (browse == ENCODER_NO_ACTION);
  return BT_MENU_PRESSED;
}
// Shows current menu data
void showMenu(uint8_t idx) {
    174e:	ef 92       	push	r14
    1750:	ff 92       	push	r15
    1752:	1f 93       	push	r17
    1754:	cf 93       	push	r28
    1756:	df 93       	push	r29
    1758:	18 2f       	mov	r17, r24
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:559
  lcd.clear();
    175a:	0e 94 a2 03 	call	0x744	; 0x744 <LiquidCrystal::clear() [clone .constprop.28]>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:560
  lcd.setCursor(0, 0);
    175e:	60 e0       	ldi	r22, 0x00	; 0
    1760:	80 e0       	ldi	r24, 0x00	; 0
    1762:	0e 94 93 03 	call	0x726	; 0x726 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.40]>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:561
  lcd.print(menu[idx]);
    1766:	e1 2e       	mov	r14, r17
    1768:	f1 2c       	mov	r15, r1
    176a:	e7 01       	movw	r28, r14
    176c:	cc 0f       	add	r28, r28
    176e:	dd 1f       	adc	r29, r29
    1770:	fe 01       	movw	r30, r28
    1772:	e4 54       	subi	r30, 0x44	; 68
    1774:	fe 4f       	sbci	r31, 0xFE	; 254
    1776:	80 81       	ld	r24, Z
    1778:	91 81       	ldd	r25, Z+1	; 0x01
    177a:	0e 94 ee 07 	call	0xfdc	; 0xfdc <Print::print(char const*) [clone .constprop.37]>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:562
  if (keyValue[idx].value != NULL) {
    177e:	ce 0d       	add	r28, r14
    1780:	df 1d       	adc	r29, r15
    1782:	c7 58       	subi	r28, 0x87	; 135
    1784:	de 4f       	sbci	r29, 0xFE	; 254
    1786:	89 81       	ldd	r24, Y+1	; 0x01
    1788:	9a 81       	ldd	r25, Y+2	; 0x02
    178a:	89 2b       	or	r24, r25
    178c:	a9 f0       	breq	.+42     	; 0x17b8 <showMenu(unsigned char)+0x6a>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:563
    lcd.setCursor(0, 1);
    178e:	61 e0       	ldi	r22, 0x01	; 1
    1790:	80 e0       	ldi	r24, 0x00	; 0
    1792:	0e 94 93 03 	call	0x726	; 0x726 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.40]>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:564
    lcd.print(keyValue[idx].value[keyValue[idx].key].desc);
    1796:	88 81       	ld	r24, Y
    1798:	e9 81       	ldd	r30, Y+1	; 0x01
    179a:	fa 81       	ldd	r31, Y+2	; 0x02
    179c:	93 e0       	ldi	r25, 0x03	; 3
    179e:	89 02       	muls	r24, r25
    17a0:	e0 0d       	add	r30, r0
    17a2:	f1 1d       	adc	r31, r1
    17a4:	11 24       	eor	r1, r1
    17a6:	81 81       	ldd	r24, Z+1	; 0x01
    17a8:	92 81       	ldd	r25, Z+2	; 0x02
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:570
  } else if (idx == 0) {
    showFrequency();
  } else if (idx == 1) {
    showPower();
  }
}
    17aa:	df 91       	pop	r29
    17ac:	cf 91       	pop	r28
    17ae:	1f 91       	pop	r17
    17b0:	ff 90       	pop	r15
    17b2:	ef 90       	pop	r14
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:564
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print(menu[idx]);
  if (keyValue[idx].value != NULL) {
    lcd.setCursor(0, 1);
    lcd.print(keyValue[idx].value[keyValue[idx].key].desc);
    17b4:	0c 94 ee 07 	jmp	0xfdc	; 0xfdc <Print::print(char const*) [clone .constprop.37]>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:565
  } else if (idx == 0) {
    17b8:	11 11       	cpse	r17, r1
    17ba:	07 c0       	rjmp	.+14     	; 0x17ca <showMenu(unsigned char)+0x7c>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:570
    showFrequency();
  } else if (idx == 1) {
    showPower();
  }
}
    17bc:	df 91       	pop	r29
    17be:	cf 91       	pop	r28
    17c0:	1f 91       	pop	r17
    17c2:	ff 90       	pop	r15
    17c4:	ef 90       	pop	r14
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:566
  lcd.print(menu[idx]);
  if (keyValue[idx].value != NULL) {
    lcd.setCursor(0, 1);
    lcd.print(keyValue[idx].value[keyValue[idx].key].desc);
  } else if (idx == 0) {
    showFrequency();
    17c6:	0c 94 67 08 	jmp	0x10ce	; 0x10ce <showFrequency()>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:567
  } else if (idx == 1) {
    17ca:	11 30       	cpi	r17, 0x01	; 1
    17cc:	39 f4       	brne	.+14     	; 0x17dc <showMenu(unsigned char)+0x8e>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:570
    showPower();
  }
}
    17ce:	df 91       	pop	r29
    17d0:	cf 91       	pop	r28
    17d2:	1f 91       	pop	r17
    17d4:	ff 90       	pop	r15
    17d6:	ef 90       	pop	r14
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:568
    lcd.setCursor(0, 1);
    lcd.print(keyValue[idx].value[keyValue[idx].key].desc);
  } else if (idx == 0) {
    showFrequency();
  } else if (idx == 1) {
    showPower();
    17d8:	0c 94 6e 0b 	jmp	0x16dc	; 0x16dc <showPower()>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:570
  }
}
    17dc:	df 91       	pop	r29
    17de:	cf 91       	pop	r28
    17e0:	1f 91       	pop	r17
    17e2:	ff 90       	pop	r15
    17e4:	ef 90       	pop	r14
    17e6:	08 95       	ret

000017e8 <__vector_16>:
__vector_16():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:159
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    17e8:	1f 92       	push	r1
    17ea:	0f 92       	push	r0
    17ec:	0f b6       	in	r0, 0x3f	; 63
    17ee:	0f 92       	push	r0
    17f0:	11 24       	eor	r1, r1
    17f2:	2f 93       	push	r18
    17f4:	3f 93       	push	r19
    17f6:	8f 93       	push	r24
    17f8:	9f 93       	push	r25
    17fa:	af 93       	push	r26
    17fc:	bf 93       	push	r27
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:167
  static unsigned char timer0_exact = 0;
#endif

  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access, so this saves time)
  unsigned long m = timer0_millis;
    17fe:	80 91 5f 05 	lds	r24, 0x055F	; 0x80055f <timer0_millis>
    1802:	90 91 60 05 	lds	r25, 0x0560	; 0x800560 <timer0_millis+0x1>
    1806:	a0 91 61 05 	lds	r26, 0x0561	; 0x800561 <timer0_millis+0x2>
    180a:	b0 91 62 05 	lds	r27, 0x0562	; 0x800562 <timer0_millis+0x3>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:168
  unsigned char f = timer0_fract;
    180e:	30 91 5e 05 	lds	r19, 0x055E	; 0x80055e <timer0_fract>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:170

  f += FRACT_INC FRACT_INC_PLUS;
    1812:	23 e0       	ldi	r18, 0x03	; 3
    1814:	23 0f       	add	r18, r19
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:200
    ++f;
  }
#endif
#endif // CORRECT_EXACT_MILLIS

  if (f >= FRACT_MAX) {
    1816:	2d 37       	cpi	r18, 0x7D	; 125
    1818:	68 f1       	brcs	.+90     	; 0x1874 <__vector_16+0x8c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:201
    f -= FRACT_MAX;
    181a:	26 e8       	ldi	r18, 0x86	; 134
    181c:	23 0f       	add	r18, r19
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:202
    m += MILLIS_INC + 1;
    181e:	02 96       	adiw	r24, 0x02	; 2
    1820:	a1 1d       	adc	r26, r1
    1822:	b1 1d       	adc	r27, r1
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:208
  }
  else {
    m += MILLIS_INC;
  }

  timer0_fract = f;
    1824:	20 93 5e 05 	sts	0x055E, r18	; 0x80055e <timer0_fract>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:209
  timer0_millis = m;
    1828:	80 93 5f 05 	sts	0x055F, r24	; 0x80055f <timer0_millis>
    182c:	90 93 60 05 	sts	0x0560, r25	; 0x800560 <timer0_millis+0x1>
    1830:	a0 93 61 05 	sts	0x0561, r26	; 0x800561 <timer0_millis+0x2>
    1834:	b0 93 62 05 	sts	0x0562, r27	; 0x800562 <timer0_millis+0x3>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:211
#ifndef CORRECT_EXACT_MICROS
  timer0_overflow_count++;
    1838:	80 91 63 05 	lds	r24, 0x0563	; 0x800563 <timer0_overflow_count>
    183c:	90 91 64 05 	lds	r25, 0x0564	; 0x800564 <timer0_overflow_count+0x1>
    1840:	a0 91 65 05 	lds	r26, 0x0565	; 0x800565 <timer0_overflow_count+0x2>
    1844:	b0 91 66 05 	lds	r27, 0x0566	; 0x800566 <timer0_overflow_count+0x3>
    1848:	01 96       	adiw	r24, 0x01	; 1
    184a:	a1 1d       	adc	r26, r1
    184c:	b1 1d       	adc	r27, r1
    184e:	80 93 63 05 	sts	0x0563, r24	; 0x800563 <timer0_overflow_count>
    1852:	90 93 64 05 	sts	0x0564, r25	; 0x800564 <timer0_overflow_count+0x1>
    1856:	a0 93 65 05 	sts	0x0565, r26	; 0x800565 <timer0_overflow_count+0x2>
    185a:	b0 93 66 05 	sts	0x0566, r27	; 0x800566 <timer0_overflow_count+0x3>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:213
#endif
}
    185e:	bf 91       	pop	r27
    1860:	af 91       	pop	r26
    1862:	9f 91       	pop	r25
    1864:	8f 91       	pop	r24
    1866:	3f 91       	pop	r19
    1868:	2f 91       	pop	r18
    186a:	0f 90       	pop	r0
    186c:	0f be       	out	0x3f, r0	; 63
    186e:	0f 90       	pop	r0
    1870:	1f 90       	pop	r1
    1872:	18 95       	reti
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:205
  if (f >= FRACT_MAX) {
    f -= FRACT_MAX;
    m += MILLIS_INC + 1;
  }
  else {
    m += MILLIS_INC;
    1874:	01 96       	adiw	r24, 0x01	; 1
    1876:	a1 1d       	adc	r26, r1
    1878:	b1 1d       	adc	r27, r1
    187a:	d4 cf       	rjmp	.-88     	; 0x1824 <__vector_16+0x3c>

0000187c <__vector_2>:
__vector_2():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WInterrupts.c:489
|| defined(__AVR_ATmega48PB__)  || defined(__AVR_ATmega88__)  || defined(__AVR_ATmega88P__)  \
|| defined(__AVR_ATmega88PB__)  || defined(__AVR_ATmega168__) || defined(__AVR_ATmega168P__) \
|| defined(__AVR_ATmega168PB__) || defined(__AVR_ATmega328__) || defined(__AVR_ATmega328P__) \
|| defined(__AVR_ATmega328PB__)
  IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_0)
  IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_1)
    187c:	1f 92       	push	r1
    187e:	0f 92       	push	r0
    1880:	0f b6       	in	r0, 0x3f	; 63
    1882:	0f 92       	push	r0
    1884:	11 24       	eor	r1, r1
    1886:	2f 93       	push	r18
    1888:	3f 93       	push	r19
    188a:	4f 93       	push	r20
    188c:	5f 93       	push	r21
    188e:	6f 93       	push	r22
    1890:	7f 93       	push	r23
    1892:	8f 93       	push	r24
    1894:	9f 93       	push	r25
    1896:	af 93       	push	r26
    1898:	bf 93       	push	r27
    189a:	ef 93       	push	r30
    189c:	ff 93       	push	r31
    189e:	e0 91 74 01 	lds	r30, 0x0174	; 0x800174 <intFunc+0x2>
    18a2:	f0 91 75 01 	lds	r31, 0x0175	; 0x800175 <intFunc+0x3>
    18a6:	09 95       	icall
    18a8:	ff 91       	pop	r31
    18aa:	ef 91       	pop	r30
    18ac:	bf 91       	pop	r27
    18ae:	af 91       	pop	r26
    18b0:	9f 91       	pop	r25
    18b2:	8f 91       	pop	r24
    18b4:	7f 91       	pop	r23
    18b6:	6f 91       	pop	r22
    18b8:	5f 91       	pop	r21
    18ba:	4f 91       	pop	r20
    18bc:	3f 91       	pop	r19
    18be:	2f 91       	pop	r18
    18c0:	0f 90       	pop	r0
    18c2:	0f be       	out	0x3f, r0	; 63
    18c4:	0f 90       	pop	r0
    18c6:	1f 90       	pop	r1
    18c8:	18 95       	reti

000018ca <__vector_1>:
__vector_1():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WInterrupts.c:488
#elif defined(__AVR_ATmega8__)  || defined(__AVR_ATmega48__)  || defined(__AVR_ATmega48P__)  \
|| defined(__AVR_ATmega48PB__)  || defined(__AVR_ATmega88__)  || defined(__AVR_ATmega88P__)  \
|| defined(__AVR_ATmega88PB__)  || defined(__AVR_ATmega168__) || defined(__AVR_ATmega168P__) \
|| defined(__AVR_ATmega168PB__) || defined(__AVR_ATmega328__) || defined(__AVR_ATmega328P__) \
|| defined(__AVR_ATmega328PB__)
  IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_0)
    18ca:	1f 92       	push	r1
    18cc:	0f 92       	push	r0
    18ce:	0f b6       	in	r0, 0x3f	; 63
    18d0:	0f 92       	push	r0
    18d2:	11 24       	eor	r1, r1
    18d4:	2f 93       	push	r18
    18d6:	3f 93       	push	r19
    18d8:	4f 93       	push	r20
    18da:	5f 93       	push	r21
    18dc:	6f 93       	push	r22
    18de:	7f 93       	push	r23
    18e0:	8f 93       	push	r24
    18e2:	9f 93       	push	r25
    18e4:	af 93       	push	r26
    18e6:	bf 93       	push	r27
    18e8:	ef 93       	push	r30
    18ea:	ff 93       	push	r31
    18ec:	e0 91 72 01 	lds	r30, 0x0172	; 0x800172 <intFunc>
    18f0:	f0 91 73 01 	lds	r31, 0x0173	; 0x800173 <intFunc+0x1>
    18f4:	09 95       	icall
    18f6:	ff 91       	pop	r31
    18f8:	ef 91       	pop	r30
    18fa:	bf 91       	pop	r27
    18fc:	af 91       	pop	r26
    18fe:	9f 91       	pop	r25
    1900:	8f 91       	pop	r24
    1902:	7f 91       	pop	r23
    1904:	6f 91       	pop	r22
    1906:	5f 91       	pop	r21
    1908:	4f 91       	pop	r20
    190a:	3f 91       	pop	r19
    190c:	2f 91       	pop	r18
    190e:	0f 90       	pop	r0
    1910:	0f be       	out	0x3f, r0	; 63
    1912:	0f 90       	pop	r0
    1914:	1f 90       	pop	r1
    1916:	18 95       	reti

00001918 <__vector_24>:
__vector_24():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:534
  }
  return(flag);
}

ISR(TWI_vect)
{
    1918:	1f 92       	push	r1
    191a:	0f 92       	push	r0
    191c:	0f b6       	in	r0, 0x3f	; 63
    191e:	0f 92       	push	r0
    1920:	11 24       	eor	r1, r1
    1922:	2f 93       	push	r18
    1924:	3f 93       	push	r19
    1926:	4f 93       	push	r20
    1928:	5f 93       	push	r21
    192a:	6f 93       	push	r22
    192c:	7f 93       	push	r23
    192e:	8f 93       	push	r24
    1930:	9f 93       	push	r25
    1932:	af 93       	push	r26
    1934:	bf 93       	push	r27
    1936:	ef 93       	push	r30
    1938:	ff 93       	push	r31
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:535
  switch(TW_STATUS){
    193a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
    193e:	88 7f       	andi	r24, 0xF8	; 248
    1940:	80 36       	cpi	r24, 0x60	; 96
    1942:	09 f4       	brne	.+2      	; 0x1946 <__vector_24+0x2e>
    1944:	4a c0       	rjmp	.+148    	; 0x19da <__vector_24+0xc2>
    1946:	f0 f5       	brcc	.+124    	; 0x19c4 <__vector_24+0xac>
    1948:	88 32       	cpi	r24, 0x28	; 40
    194a:	09 f4       	brne	.+2      	; 0x194e <__vector_24+0x36>
    194c:	a7 c0       	rjmp	.+334    	; 0x1a9c <__vector_24+0x184>
    194e:	18 f5       	brcc	.+70     	; 0x1996 <__vector_24+0x7e>
    1950:	80 31       	cpi	r24, 0x10	; 16
    1952:	09 f4       	brne	.+2      	; 0x1956 <__vector_24+0x3e>
    1954:	9b c0       	rjmp	.+310    	; 0x1a8c <__vector_24+0x174>
    1956:	b8 f4       	brcc	.+46     	; 0x1986 <__vector_24+0x6e>
    1958:	88 23       	and	r24, r24
    195a:	09 f4       	brne	.+2      	; 0x195e <__vector_24+0x46>
    195c:	05 c1       	rjmp	.+522    	; 0x1b68 <__vector_24+0x250>
    195e:	88 30       	cpi	r24, 0x08	; 8
    1960:	09 f4       	brne	.+2      	; 0x1964 <__vector_24+0x4c>
    1962:	94 c0       	rjmp	.+296    	; 0x1a8c <__vector_24+0x174>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:696
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
      break;
  }
}
    1964:	ff 91       	pop	r31
    1966:	ef 91       	pop	r30
    1968:	bf 91       	pop	r27
    196a:	af 91       	pop	r26
    196c:	9f 91       	pop	r25
    196e:	8f 91       	pop	r24
    1970:	7f 91       	pop	r23
    1972:	6f 91       	pop	r22
    1974:	5f 91       	pop	r21
    1976:	4f 91       	pop	r20
    1978:	3f 91       	pop	r19
    197a:	2f 91       	pop	r18
    197c:	0f 90       	pop	r0
    197e:	0f be       	out	0x3f, r0	; 63
    1980:	0f 90       	pop	r0
    1982:	1f 90       	pop	r1
    1984:	18 95       	reti
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    1986:	88 31       	cpi	r24, 0x18	; 24
    1988:	09 f4       	brne	.+2      	; 0x198c <__vector_24+0x74>
    198a:	88 c0       	rjmp	.+272    	; 0x1a9c <__vector_24+0x184>
    198c:	80 32       	cpi	r24, 0x20	; 32
    198e:	51 f7       	brne	.-44     	; 0x1964 <__vector_24+0x4c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:570
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    1990:	80 93 93 05 	sts	0x0593, r24	; 0x800593 <twi_error>
    1994:	14 c0       	rjmp	.+40     	; 0x19be <__vector_24+0xa6>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    1996:	80 34       	cpi	r24, 0x40	; 64
    1998:	09 f4       	brne	.+2      	; 0x199c <__vector_24+0x84>
    199a:	a5 c0       	rjmp	.+330    	; 0x1ae6 <__vector_24+0x1ce>
    199c:	40 f4       	brcc	.+16     	; 0x19ae <__vector_24+0x96>
    199e:	80 33       	cpi	r24, 0x30	; 48
    19a0:	b9 f3       	breq	.-18     	; 0x1990 <__vector_24+0x78>
    19a2:	88 33       	cpi	r24, 0x38	; 56
    19a4:	f9 f6       	brne	.-66     	; 0x1964 <__vector_24+0x4c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:574
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    19a6:	80 93 93 05 	sts	0x0593, r24	; 0x800593 <twi_error>
twi_reply():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:421
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    19aa:	85 ec       	ldi	r24, 0xC5	; 197
    19ac:	bc c0       	rjmp	.+376    	; 0x1b26 <__vector_24+0x20e>
__vector_24():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    19ae:	80 35       	cpi	r24, 0x50	; 80
    19b0:	09 f4       	brne	.+2      	; 0x19b4 <__vector_24+0x9c>
    19b2:	89 c0       	rjmp	.+274    	; 0x1ac6 <__vector_24+0x1ae>
    19b4:	88 35       	cpi	r24, 0x58	; 88
    19b6:	09 f4       	brne	.+2      	; 0x19ba <__vector_24+0xa2>
    19b8:	9e c0       	rjmp	.+316    	; 0x1af6 <__vector_24+0x1de>
    19ba:	88 34       	cpi	r24, 0x48	; 72
    19bc:	99 f6       	brne	.-90     	; 0x1964 <__vector_24+0x4c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:693
    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
    19be:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <twi_stop>
    19c2:	d0 cf       	rjmp	.-96     	; 0x1964 <__vector_24+0x4c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    19c4:	88 39       	cpi	r24, 0x98	; 152
    19c6:	09 f4       	brne	.+2      	; 0x19ca <__vector_24+0xb2>
    19c8:	94 c0       	rjmp	.+296    	; 0x1af2 <__vector_24+0x1da>
    19ca:	38 f5       	brcc	.+78     	; 0x1a1a <__vector_24+0x102>
    19cc:	88 37       	cpi	r24, 0x78	; 120
    19ce:	29 f0       	breq	.+10     	; 0x19da <__vector_24+0xc2>
    19d0:	50 f4       	brcc	.+20     	; 0x19e6 <__vector_24+0xce>
    19d2:	88 36       	cpi	r24, 0x68	; 104
    19d4:	11 f0       	breq	.+4      	; 0x19da <__vector_24+0xc2>
    19d6:	80 37       	cpi	r24, 0x70	; 112
    19d8:	29 f6       	brne	.-118    	; 0x1964 <__vector_24+0x4c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:616
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    19da:	83 e0       	ldi	r24, 0x03	; 3
    19dc:	80 93 95 05 	sts	0x0595, r24	; 0x800595 <twi_state>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:618
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    19e0:	10 92 59 05 	sts	0x0559, r1	; 0x800559 <twi_rxBufferIndex>
    19e4:	57 c0       	rjmp	.+174    	; 0x1a94 <__vector_24+0x17c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    19e6:	88 38       	cpi	r24, 0x88	; 136
    19e8:	09 f4       	brne	.+2      	; 0x19ec <__vector_24+0xd4>
    19ea:	83 c0       	rjmp	.+262    	; 0x1af2 <__vector_24+0x1da>
    19ec:	80 39       	cpi	r24, 0x90	; 144
    19ee:	19 f0       	breq	.+6      	; 0x19f6 <__vector_24+0xde>
    19f0:	80 38       	cpi	r24, 0x80	; 128
    19f2:	09 f0       	breq	.+2      	; 0x19f6 <__vector_24+0xde>
    19f4:	b7 cf       	rjmp	.-146    	; 0x1964 <__vector_24+0x4c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:624
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
    19f6:	80 91 59 05 	lds	r24, 0x0559	; 0x800559 <twi_rxBufferIndex>
    19fa:	80 32       	cpi	r24, 0x20	; 32
    19fc:	08 f0       	brcs	.+2      	; 0x1a00 <__vector_24+0xe8>
    19fe:	79 c0       	rjmp	.+242    	; 0x1af2 <__vector_24+0x1da>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:626
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    1a00:	e0 91 59 05 	lds	r30, 0x0559	; 0x800559 <twi_rxBufferIndex>
    1a04:	81 e0       	ldi	r24, 0x01	; 1
    1a06:	8e 0f       	add	r24, r30
    1a08:	80 93 59 05 	sts	0x0559, r24	; 0x800559 <twi_rxBufferIndex>
    1a0c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    1a10:	f0 e0       	ldi	r31, 0x00	; 0
    1a12:	e7 5c       	subi	r30, 0xC7	; 199
    1a14:	fa 4f       	sbci	r31, 0xFA	; 250
    1a16:	80 83       	st	Z, r24
    1a18:	3d c0       	rjmp	.+122    	; 0x1a94 <__vector_24+0x17c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    1a1a:	80 3b       	cpi	r24, 0xB0	; 176
    1a1c:	39 f0       	breq	.+14     	; 0x1a2c <__vector_24+0x114>
    1a1e:	e0 f4       	brcc	.+56     	; 0x1a58 <__vector_24+0x140>
    1a20:	80 3a       	cpi	r24, 0xA0	; 160
    1a22:	09 f4       	brne	.+2      	; 0x1a26 <__vector_24+0x10e>
    1a24:	85 c0       	rjmp	.+266    	; 0x1b30 <__vector_24+0x218>
    1a26:	88 3a       	cpi	r24, 0xA8	; 168
    1a28:	09 f0       	breq	.+2      	; 0x1a2c <__vector_24+0x114>
    1a2a:	9c cf       	rjmp	.-200    	; 0x1964 <__vector_24+0x4c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:655

    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    1a2c:	84 e0       	ldi	r24, 0x04	; 4
    1a2e:	80 93 95 05 	sts	0x0595, r24	; 0x800595 <twi_state>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:657
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    1a32:	10 92 38 05 	sts	0x0538, r1	; 0x800538 <twi_txBufferIndex>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:659
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    1a36:	10 92 37 05 	sts	0x0537, r1	; 0x800537 <twi_txBufferLength>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:662
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    1a3a:	e0 91 69 05 	lds	r30, 0x0569	; 0x800569 <twi_onSlaveTransmit>
    1a3e:	f0 91 6a 05 	lds	r31, 0x056A	; 0x80056a <twi_onSlaveTransmit+0x1>
    1a42:	09 95       	icall
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:664
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    1a44:	80 91 37 05 	lds	r24, 0x0537	; 0x800537 <twi_txBufferLength>
    1a48:	81 11       	cpse	r24, r1
    1a4a:	0f c0       	rjmp	.+30     	; 0x1a6a <__vector_24+0x152>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:665
        twi_txBufferLength = 1;
    1a4c:	81 e0       	ldi	r24, 0x01	; 1
    1a4e:	80 93 37 05 	sts	0x0537, r24	; 0x800537 <twi_txBufferLength>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:666
        twi_txBuffer[0] = 0x00;
    1a52:	10 92 17 05 	sts	0x0517, r1	; 0x800517 <twi_txBuffer>
    1a56:	09 c0       	rjmp	.+18     	; 0x1a6a <__vector_24+0x152>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    1a58:	80 3c       	cpi	r24, 0xC0	; 192
    1a5a:	09 f4       	brne	.+2      	; 0x1a5e <__vector_24+0x146>
    1a5c:	a6 cf       	rjmp	.-180    	; 0x19aa <__vector_24+0x92>
    1a5e:	88 3c       	cpi	r24, 0xC8	; 200
    1a60:	09 f4       	brne	.+2      	; 0x1a64 <__vector_24+0x14c>
    1a62:	a3 cf       	rjmp	.-186    	; 0x19aa <__vector_24+0x92>
    1a64:	88 3b       	cpi	r24, 0xB8	; 184
    1a66:	09 f0       	breq	.+2      	; 0x1a6a <__vector_24+0x152>
    1a68:	7d cf       	rjmp	.-262    	; 0x1964 <__vector_24+0x4c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:672
      }
      // transmit first byte from buffer, fall
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    1a6a:	e0 91 38 05 	lds	r30, 0x0538	; 0x800538 <twi_txBufferIndex>
    1a6e:	81 e0       	ldi	r24, 0x01	; 1
    1a70:	8e 0f       	add	r24, r30
    1a72:	80 93 38 05 	sts	0x0538, r24	; 0x800538 <twi_txBufferIndex>
    1a76:	f0 e0       	ldi	r31, 0x00	; 0
    1a78:	e9 5e       	subi	r30, 0xE9	; 233
    1a7a:	fa 4f       	sbci	r31, 0xFA	; 250
    1a7c:	80 81       	ld	r24, Z
    1a7e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:674
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    1a82:	90 91 38 05 	lds	r25, 0x0538	; 0x800538 <twi_txBufferIndex>
    1a86:	80 91 37 05 	lds	r24, 0x0537	; 0x800537 <twi_txBufferLength>
    1a8a:	31 c0       	rjmp	.+98     	; 0x1aee <__vector_24+0x1d6>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:540
  switch(TW_STATUS){
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    1a8c:	80 91 8e 05 	lds	r24, 0x058E	; 0x80058e <twi_slarw>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:550
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    1a90:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
twi_reply():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:421
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1a94:	85 ec       	ldi	r24, 0xC5	; 197
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:423
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    1a96:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    1a9a:	64 cf       	rjmp	.-312    	; 0x1964 <__vector_24+0x4c>
__vector_24():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:548

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop
      if(twi_masterBufferIndex < twi_masterBufferLength){
    1a9c:	90 91 90 05 	lds	r25, 0x0590	; 0x800590 <twi_masterBufferIndex>
    1aa0:	80 91 8f 05 	lds	r24, 0x058F	; 0x80058f <twi_masterBufferLength>
    1aa4:	98 17       	cp	r25, r24
    1aa6:	b8 f5       	brcc	.+110    	; 0x1b16 <__vector_24+0x1fe>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:550
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    1aa8:	80 91 91 05 	lds	r24, 0x0591	; 0x800591 <twi_masterBuffer>
    1aac:	90 91 92 05 	lds	r25, 0x0592	; 0x800592 <twi_masterBuffer+0x1>
    1ab0:	e0 91 90 05 	lds	r30, 0x0590	; 0x800590 <twi_masterBufferIndex>
    1ab4:	21 e0       	ldi	r18, 0x01	; 1
    1ab6:	2e 0f       	add	r18, r30
    1ab8:	20 93 90 05 	sts	0x0590, r18	; 0x800590 <twi_masterBufferIndex>
    1abc:	e8 0f       	add	r30, r24
    1abe:	f9 2f       	mov	r31, r25
    1ac0:	f1 1d       	adc	r31, r1
    1ac2:	80 81       	ld	r24, Z
    1ac4:	e5 cf       	rjmp	.-54     	; 0x1a90 <__vector_24+0x178>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:581
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    1ac6:	20 91 91 05 	lds	r18, 0x0591	; 0x800591 <twi_masterBuffer>
    1aca:	30 91 92 05 	lds	r19, 0x0592	; 0x800592 <twi_masterBuffer+0x1>
    1ace:	e0 91 90 05 	lds	r30, 0x0590	; 0x800590 <twi_masterBufferIndex>
    1ad2:	81 e0       	ldi	r24, 0x01	; 1
    1ad4:	8e 0f       	add	r24, r30
    1ad6:	80 93 90 05 	sts	0x0590, r24	; 0x800590 <twi_masterBufferIndex>
    1ada:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    1ade:	e2 0f       	add	r30, r18
    1ae0:	f3 2f       	mov	r31, r19
    1ae2:	f1 1d       	adc	r31, r1
    1ae4:	80 83       	st	Z, r24
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:585
      /* fall through */
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    1ae6:	90 91 90 05 	lds	r25, 0x0590	; 0x800590 <twi_masterBufferIndex>
    1aea:	80 91 8f 05 	lds	r24, 0x058F	; 0x80058f <twi_masterBufferLength>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:674
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    1aee:	98 17       	cp	r25, r24
    1af0:	88 f2       	brcs	.-94     	; 0x1a94 <__vector_24+0x17c>
twi_reply():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:423
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    1af2:	85 e8       	ldi	r24, 0x85	; 133
    1af4:	d0 cf       	rjmp	.-96     	; 0x1a96 <__vector_24+0x17e>
__vector_24():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:593
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    1af6:	20 91 91 05 	lds	r18, 0x0591	; 0x800591 <twi_masterBuffer>
    1afa:	30 91 92 05 	lds	r19, 0x0592	; 0x800592 <twi_masterBuffer+0x1>
    1afe:	e0 91 90 05 	lds	r30, 0x0590	; 0x800590 <twi_masterBufferIndex>
    1b02:	81 e0       	ldi	r24, 0x01	; 1
    1b04:	8e 0f       	add	r24, r30
    1b06:	80 93 90 05 	sts	0x0590, r24	; 0x800590 <twi_masterBufferIndex>
    1b0a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    1b0e:	e2 0f       	add	r30, r18
    1b10:	f3 2f       	mov	r31, r19
    1b12:	f1 1d       	adc	r31, r1
    1b14:	80 83       	st	Z, r24
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:594
  if (twi_sendStop)
    1b16:	80 91 94 05 	lds	r24, 0x0594	; 0x800594 <twi_sendStop>
    1b1a:	81 11       	cpse	r24, r1
    1b1c:	50 cf       	rjmp	.-352    	; 0x19be <__vector_24+0xa6>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:597
          twi_stop();
  else {
    twi_inRepStart = true;  // we're going to send the START
    1b1e:	81 e0       	ldi	r24, 0x01	; 1
    1b20:	80 93 8d 05 	sts	0x058D, r24	; 0x80058d <twi_inRepStart>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:601
    // don't enable the interrupt. We'll generate the start, but we
    // avoid handling the interrupt until we're in the next transaction,
    // at the point where we would normally issue the start.
    TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    1b24:	84 ea       	ldi	r24, 0xA4	; 164
twi_reply():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:421
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1b26:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
__vector_24():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:685
    case TW_ST_DATA_NACK: // received nack, we are done
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    1b2a:	10 92 95 05 	sts	0x0595, r1	; 0x800595 <twi_state>
    1b2e:	1a cf       	rjmp	.-460    	; 0x1964 <__vector_24+0x4c>
twi_releaseBus():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:474
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    1b30:	85 ec       	ldi	r24, 0xC5	; 197
    1b32:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:477

  // update twi state
  twi_state = TWI_READY;
    1b36:	10 92 95 05 	sts	0x0595, r1	; 0x800595 <twi_state>
__vector_24():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:637
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
    1b3a:	80 91 59 05 	lds	r24, 0x0559	; 0x800559 <twi_rxBufferIndex>
    1b3e:	80 32       	cpi	r24, 0x20	; 32
    1b40:	30 f4       	brcc	.+12     	; 0x1b4e <__vector_24+0x236>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:638
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    1b42:	e0 91 59 05 	lds	r30, 0x0559	; 0x800559 <twi_rxBufferIndex>
    1b46:	f0 e0       	ldi	r31, 0x00	; 0
    1b48:	e7 5c       	subi	r30, 0xC7	; 199
    1b4a:	fa 4f       	sbci	r31, 0xFA	; 250
    1b4c:	10 82       	st	Z, r1
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:641
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    1b4e:	60 91 59 05 	lds	r22, 0x0559	; 0x800559 <twi_rxBufferIndex>
    1b52:	70 e0       	ldi	r23, 0x00	; 0
    1b54:	e0 91 67 05 	lds	r30, 0x0567	; 0x800567 <twi_onSlaveReceive>
    1b58:	f0 91 68 05 	lds	r31, 0x0568	; 0x800568 <twi_onSlaveReceive+0x1>
    1b5c:	89 e3       	ldi	r24, 0x39	; 57
    1b5e:	95 e0       	ldi	r25, 0x05	; 5
    1b60:	09 95       	icall
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:643
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    1b62:	10 92 59 05 	sts	0x0559, r1	; 0x800559 <twi_rxBufferIndex>
    1b66:	fe ce       	rjmp	.-516    	; 0x1964 <__vector_24+0x4c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:692

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    1b68:	10 92 93 05 	sts	0x0593, r1	; 0x800593 <twi_error>
    1b6c:	28 cf       	rjmp	.-432    	; 0x19be <__vector_24+0xa6>

00001b6e <global constructors keyed to 65535_0_Rotary.cpp.o.2658>:
_GLOBAL__I_65535_0_Rotary.cpp.o.2658():
    1b6e:	cf 93       	push	r28
    1b70:	df 93       	push	r29
    1b72:	ea eb       	ldi	r30, 0xBA	; 186
    1b74:	f5 e0       	ldi	r31, 0x05	; 5
    1b76:	13 82       	std	Z+3, r1	; 0x03
    1b78:	12 82       	std	Z+2, r1	; 0x02
    1b7a:	88 ee       	ldi	r24, 0xE8	; 232
    1b7c:	93 e0       	ldi	r25, 0x03	; 3
    1b7e:	a0 e0       	ldi	r26, 0x00	; 0
    1b80:	b0 e0       	ldi	r27, 0x00	; 0
    1b82:	84 83       	std	Z+4, r24	; 0x04
    1b84:	95 83       	std	Z+5, r25	; 0x05
    1b86:	a6 83       	std	Z+6, r26	; 0x06
    1b88:	b7 83       	std	Z+7, r27	; 0x07
    1b8a:	8e ee       	ldi	r24, 0xEE	; 238
    1b8c:	91 e0       	ldi	r25, 0x01	; 1
    1b8e:	91 83       	std	Z+1, r25	; 0x01
    1b90:	80 83       	st	Z, r24
    1b92:	0e 94 b6 02 	call	0x56c	; 0x56c <millis>
    1b96:	60 93 0f 06 	sts	0x060F, r22	; 0x80060f <stopRDSTime>
    1b9a:	70 93 10 06 	sts	0x0610, r23	; 0x800610 <stopRDSTime+0x1>
    1b9e:	80 93 11 06 	sts	0x0611, r24	; 0x800611 <stopRDSTime+0x2>
    1ba2:	90 93 12 06 	sts	0x0612, r25	; 0x800612 <stopRDSTime+0x3>
    1ba6:	0e 94 b6 02 	call	0x56c	; 0x56c <millis>
    1baa:	60 93 0b 06 	sts	0x060B, r22	; 0x80060b <showStatusTime>
    1bae:	70 93 0c 06 	sts	0x060C, r23	; 0x80060c <showStatusTime+0x1>
    1bb2:	80 93 0d 06 	sts	0x060D, r24	; 0x80060d <showStatusTime+0x2>
    1bb6:	90 93 0e 06 	sts	0x060E, r25	; 0x80060e <showStatusTime+0x3>
    1bba:	0e 94 b6 02 	call	0x56c	; 0x56c <millis>
    1bbe:	60 93 07 06 	sts	0x0607, r22	; 0x800607 <rdsTimePS>
    1bc2:	70 93 08 06 	sts	0x0608, r23	; 0x800608 <rdsTimePS+0x1>
    1bc6:	80 93 09 06 	sts	0x0609, r24	; 0x800609 <rdsTimePS+0x2>
    1bca:	90 93 0a 06 	sts	0x060A, r25	; 0x80060a <rdsTimePS+0x3>
    1bce:	0e 94 b6 02 	call	0x56c	; 0x56c <millis>
    1bd2:	60 93 03 06 	sts	0x0603, r22	; 0x800603 <rdsTimeRT>
    1bd6:	70 93 04 06 	sts	0x0604, r23	; 0x800604 <rdsTimeRT+0x1>
    1bda:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <rdsTimeRT+0x2>
    1bde:	90 93 06 06 	sts	0x0606, r25	; 0x800606 <rdsTimeRT+0x3>
    1be2:	c1 ee       	ldi	r28, 0xE1	; 225
    1be4:	d5 e0       	ldi	r29, 0x05	; 5
    1be6:	88 ee       	ldi	r24, 0xE8	; 232
    1be8:	93 e0       	ldi	r25, 0x03	; 3
    1bea:	99 83       	std	Y+1, r25	; 0x01
    1bec:	88 83       	st	Y, r24
    1bee:	9b 83       	std	Y+3, r25	; 0x03
    1bf0:	8a 83       	std	Y+2, r24	; 0x02
    1bf2:	8c e3       	ldi	r24, 0x3C	; 60
    1bf4:	8a 8b       	std	Y+18, r24	; 0x12
    1bf6:	85 e0       	ldi	r24, 0x05	; 5
    1bf8:	8b 8b       	std	Y+19, r24	; 0x13
    1bfa:	99 e0       	ldi	r25, 0x09	; 9
    1bfc:	ee e6       	ldi	r30, 0x6E	; 110
    1bfe:	f2 e0       	ldi	r31, 0x02	; 2
    1c00:	a5 ef       	ldi	r26, 0xF5	; 245
    1c02:	b5 e0       	ldi	r27, 0x05	; 5
    1c04:	01 90       	ld	r0, Z+
    1c06:	0d 92       	st	X+, r0
    1c08:	9a 95       	dec	r25
    1c0a:	e1 f7       	brne	.-8      	; 0x1c04 <global constructors keyed to 65535_0_Rotary.cpp.o.2658+0x96>
    1c0c:	2b e9       	ldi	r18, 0x9B	; 155
    1c0e:	31 e8       	ldi	r19, 0x81	; 129
    1c10:	3e 8f       	std	Y+30, r19	; 0x1e
    1c12:	2d 8f       	std	Y+29, r18	; 0x1d
    1c14:	8f 8f       	std	Y+31, r24	; 0x1f
    1c16:	18 a2       	std	Y+32, r1	; 0x20
    1c18:	19 a2       	std	Y+33, r1	; 0x21
    1c1a:	e9 ec       	ldi	r30, 0xC9	; 201
    1c1c:	f5 e0       	ldi	r31, 0x05	; 5
    1c1e:	13 82       	std	Z+3, r1	; 0x03
    1c20:	12 82       	std	Z+2, r1	; 0x02
    1c22:	20 e0       	ldi	r18, 0x00	; 0
    1c24:	32 e0       	ldi	r19, 0x02	; 2
    1c26:	31 83       	std	Z+1, r19	; 0x01
    1c28:	20 83       	st	Z, r18
    1c2a:	9c e0       	ldi	r25, 0x0C	; 12
    1c2c:	94 83       	std	Z+4, r25	; 0x04
    1c2e:	9f ef       	ldi	r25, 0xFF	; 255
    1c30:	95 83       	std	Z+5, r25	; 0x05
    1c32:	9d e0       	ldi	r25, 0x0D	; 13
    1c34:	96 83       	std	Z+6, r25	; 0x06
    1c36:	97 e0       	ldi	r25, 0x07	; 7
    1c38:	97 83       	std	Z+7, r25	; 0x07
    1c3a:	96 e0       	ldi	r25, 0x06	; 6
    1c3c:	90 87       	std	Z+8, r25	; 0x08
    1c3e:	81 87       	std	Z+9, r24	; 0x09
    1c40:	84 e0       	ldi	r24, 0x04	; 4
    1c42:	82 87       	std	Z+10, r24	; 0x0a
    1c44:	13 86       	std	Z+11, r1	; 0x0b
    1c46:	14 86       	std	Z+12, r1	; 0x0c
    1c48:	15 86       	std	Z+13, r1	; 0x0d
    1c4a:	16 86       	std	Z+14, r1	; 0x0e
    1c4c:	17 86       	std	Z+15, r1	; 0x0f
    1c4e:	81 e0       	ldi	r24, 0x01	; 1
    1c50:	0e 94 b2 03 	call	0x764	; 0x764 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char) [clone .constprop.26]>
    1c54:	c6 ec       	ldi	r28, 0xC6	; 198
    1c56:	d5 e0       	ldi	r29, 0x05	; 5
    1c58:	82 e0       	ldi	r24, 0x02	; 2
    1c5a:	89 83       	std	Y+1, r24	; 0x01
    1c5c:	83 e0       	ldi	r24, 0x03	; 3
    1c5e:	8a 83       	std	Y+2, r24	; 0x02
    1c60:	60 e0       	ldi	r22, 0x00	; 0
    1c62:	82 e0       	ldi	r24, 0x02	; 2
    1c64:	0e 94 bf 01 	call	0x37e	; 0x37e <pinMode>
    1c68:	60 e0       	ldi	r22, 0x00	; 0
    1c6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c6c:	0e 94 bf 01 	call	0x37e	; 0x37e <pinMode>
    1c70:	61 e0       	ldi	r22, 0x01	; 1
    1c72:	89 81       	ldd	r24, Y+1	; 0x01
    1c74:	0e 94 5f 01 	call	0x2be	; 0x2be <digitalWrite>
    1c78:	61 e0       	ldi	r22, 0x01	; 1
    1c7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c7c:	0e 94 5f 01 	call	0x2be	; 0x2be <digitalWrite>
    1c80:	18 82       	st	Y, r1
    1c82:	df 91       	pop	r29
    1c84:	cf 91       	pop	r28
    1c86:	08 95       	ret

00001c88 <main>:
main():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
    1c88:	78 94       	sei
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:957

  // On the ATmega168, timer 0 is also used for fast hardware pwm
  // (using phase-correct PWM would mean that timer 0 overflowed half as often
  // resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
  TCCR0A |= _BV(WGM01) | _BV(WGM00);
    1c8a:	84 b5       	in	r24, 0x24	; 36
    1c8c:	83 60       	ori	r24, 0x03	; 3
    1c8e:	84 bd       	out	0x24, r24	; 36
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:972
  #if defined(WGM00) && defined(WGM01) // The ATmega8 doesn't have WGM00 and WGM01
    TCCR0 |= _BV(WGM01) | _BV(WGM00);
  #endif
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
  // This combination is for the standard 168/328/640/1280/1281/2560/2561
  TCCR0B |= _BV(CS01) | _BV(CS00);
    1c90:	85 b5       	in	r24, 0x25	; 37
    1c92:	83 60       	ori	r24, 0x03	; 3
    1c94:	85 bd       	out	0x25, r24	; 37
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:984

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
  TIMSK0 |= _BV(TOIE0);
    1c96:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
    1c9a:	81 60       	ori	r24, 0x01	; 1
    1c9c:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
    1ca0:	82 e0       	ldi	r24, 0x02	; 2
    1ca2:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:997
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
    1ca6:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
    1caa:	81 60       	ori	r24, 0x01	; 1
    1cac:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
    1cb0:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    1cb4:	81 60       	ori	r24, 0x01	; 1
    1cb6:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:1013

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
#elif defined(TCCR2B) && defined(CS22)
  TCCR2B |= _BV(CS22);
    1cba:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
    1cbe:	84 60       	ori	r24, 0x04	; 4
    1cc0:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:1022

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
#elif defined(TCCR2A) && defined(WGM20)
  TCCR2A |= _BV(WGM20);
    1cc4:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    1cc8:	81 60       	ori	r24, 0x01	; 1
    1cca:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:1050
#endif

#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
    1cce:	87 e8       	ldi	r24, 0x87	; 135
    1cd0:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:1070
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
#elif defined(UCSR0B)
  UCSR0B = 0;
    1cd4:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
setup():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:309
LiquidCrystal lcd(LCD_RS, LCD_E, LCD_D4, LCD_D5, LCD_D6, LCD_D7);
Rotary encoder = Rotary(ENCODER_PIN_A, ENCODER_PIN_B);

void setup() {

  pinMode(PWM_PA, OUTPUT);  // Sets the Arduino PIN to operate with with PWM
    1cd8:	61 e0       	ldi	r22, 0x01	; 1
    1cda:	89 e0       	ldi	r24, 0x09	; 9
    1cdc:	0e 94 bf 01 	call	0x37e	; 0x37e <pinMode>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:310
  pinMode(BT_MENU, INPUT_PULLUP);
    1ce0:	62 e0       	ldi	r22, 0x02	; 2
    1ce2:	8e e0       	ldi	r24, 0x0E	; 14
    1ce4:	0e 94 bf 01 	call	0x37e	; 0x37e <pinMode>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:313


  pinMode(ENCODER_PIN_A, INPUT_PULLUP);
    1ce8:	62 e0       	ldi	r22, 0x02	; 2
    1cea:	82 e0       	ldi	r24, 0x02	; 2
    1cec:	0e 94 bf 01 	call	0x37e	; 0x37e <pinMode>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:314
  pinMode(ENCODER_PIN_B, INPUT_PULLUP);  
    1cf0:	62 e0       	ldi	r22, 0x02	; 2
    1cf2:	83 e0       	ldi	r24, 0x03	; 3
    1cf4:	0e 94 bf 01 	call	0x37e	; 0x37e <pinMode>
attachInterrupt():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WInterrupts.c:66

void attachInterrupt(uint8_t interruptNum, void (*userFunc)(void), int mode)
{
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS)
  {
    intFunc[interruptNum] = userFunc;
    1cf8:	2a ed       	ldi	r18, 0xDA	; 218
    1cfa:	35 e0       	ldi	r19, 0x05	; 5
    1cfc:	30 93 73 01 	sts	0x0173, r19	; 0x800173 <intFunc+0x1>
    1d00:	20 93 72 01 	sts	0x0172, r18	; 0x800172 <intFunc>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WInterrupts.c:231
      #elif defined(__AVR_ATmega48__) || defined(__AVR_ATmega48P__)  || defined(__AVR_ATmega48PB__)  \
      || defined(__AVR_ATmega88__)    || defined(__AVR_ATmega88P__)  || defined(__AVR_ATmega88PB__)  \
      || defined(__AVR_ATmega168__)   || defined(__AVR_ATmega168P__) || defined(__AVR_ATmega168PB__) \
      || defined(__AVR_ATmega328__)   || defined(__AVR_ATmega328P__) || defined(__AVR_ATmega328PB__)
        case 0:
          EICRA = (EICRA & ~((1 << ISC00) | (1 << ISC01))) | (mode << ISC00);
    1d04:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
    1d08:	8c 7f       	andi	r24, 0xFC	; 252
    1d0a:	81 60       	ori	r24, 0x01	; 1
    1d0c:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WInterrupts.c:232
          EIMSK |= (1 << INT0);
    1d10:	e8 9a       	sbi	0x1d, 0	; 29
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WInterrupts.c:66

void attachInterrupt(uint8_t interruptNum, void (*userFunc)(void), int mode)
{
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS)
  {
    intFunc[interruptNum] = userFunc;
    1d12:	30 93 75 01 	sts	0x0175, r19	; 0x800175 <intFunc+0x3>
    1d16:	20 93 74 01 	sts	0x0174, r18	; 0x800174 <intFunc+0x2>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WInterrupts.c:235
        case 0:
          EICRA = (EICRA & ~((1 << ISC00) | (1 << ISC01))) | (mode << ISC00);
          EIMSK |= (1 << INT0);
          break;
        case 1:
          EICRA = (EICRA & ~((1 << ISC10) | (1 << ISC11))) | (mode << ISC10);
    1d1a:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
    1d1e:	83 7f       	andi	r24, 0xF3	; 243
    1d20:	84 60       	ori	r24, 0x04	; 4
    1d22:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WInterrupts.c:236
          EIMSK |= (1 << INT1);
    1d26:	e9 9a       	sbi	0x1d, 1	; 29
twi_setFrequency():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:142
 * Input    Clock frequency
 * Output   none
 */
void twi_setFrequency(uint32_t frequency)
{
  TWBR = ((F_CPU / frequency) - 16) / 2;
    1d28:	8c e0       	ldi	r24, 0x0C	; 12
    1d2a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
setup():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:324
  attachInterrupt(digitalPinToInterrupt(ENCODER_PIN_B), rotaryEncoder, CHANGE);



  tx.setI2CFastMode();
  lcd.begin(16, 2);
    1d2e:	82 e0       	ldi	r24, 0x02	; 2
    1d30:	0e 94 b2 03 	call	0x764	; 0x764 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char) [clone .constprop.26]>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:327

  // If you want to reset the eeprom, keep the BT_MENU button pressed during statup
  if (digitalRead(BT_MENU) == LOW) {
    1d34:	8e e0       	ldi	r24, 0x0E	; 14
    1d36:	0e 94 36 01 	call	0x26c	; 0x26c <digitalRead>
    1d3a:	89 2b       	or	r24, r25
    1d3c:	b9 f4       	brne	.+46     	; 0x1d6c <main+0xe4>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:328
    lcd.clear();
    1d3e:	0e 94 a2 03 	call	0x744	; 0x744 <LiquidCrystal::clear() [clone .constprop.28]>
operator=():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/EEPROM/src/EEPROM.h:47
    operator uint8_t() const             { return **this; }
    
    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
    1d42:	60 e0       	ldi	r22, 0x00	; 0
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	80 e0       	ldi	r24, 0x00	; 0
    1d48:	0e 94 a6 14 	call	0x294c	; 0x294c <eeprom_write_byte>
setup():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:330
    EEPROM.write(eeprom_address, 0);
    lcd.setCursor(0, 0);
    1d4c:	60 e0       	ldi	r22, 0x00	; 0
    1d4e:	80 e0       	ldi	r24, 0x00	; 0
    1d50:	0e 94 93 03 	call	0x726	; 0x726 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.40]>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:331
    lcd.print("RESET TO DEFAULT");
    1d54:	87 e7       	ldi	r24, 0x77	; 119
    1d56:	92 e0       	ldi	r25, 0x02	; 2
    1d58:	0e 94 ee 07 	call	0xfdc	; 0xfdc <Print::print(char const*) [clone .constprop.37]>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:332
    delay(3000);
    1d5c:	68 eb       	ldi	r22, 0xB8	; 184
    1d5e:	7b e0       	ldi	r23, 0x0B	; 11
    1d60:	80 e0       	ldi	r24, 0x00	; 0
    1d62:	90 e0       	ldi	r25, 0x00	; 0
    1d64:	0e 94 83 02 	call	0x506	; 0x506 <delay>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:333
    lcd.clear();
    1d68:	0e 94 a2 03 	call	0x744	; 0x744 <LiquidCrystal::clear() [clone .constprop.28]>
showSplash():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:463
  enablePWM(pwmPowerDuty);  // PWM duty cycle anable
  showFrequency();
}
// Shows the first message after turn the transmitter on
void showSplash() {
  lcd.setCursor(0, 0);
    1d6c:	60 e0       	ldi	r22, 0x00	; 0
    1d6e:	80 e0       	ldi	r24, 0x00	; 0
    1d70:	0e 94 93 03 	call	0x726	; 0x726 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.40]>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:464
  lcd.print("PU2CLR-QN8066");
    1d74:	88 e8       	ldi	r24, 0x88	; 136
    1d76:	92 e0       	ldi	r25, 0x02	; 2
    1d78:	0e 94 ee 07 	call	0xfdc	; 0xfdc <Print::print(char const*) [clone .constprop.37]>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:465
  delay(1000);
    1d7c:	68 ee       	ldi	r22, 0xE8	; 232
    1d7e:	73 e0       	ldi	r23, 0x03	; 3
    1d80:	80 e0       	ldi	r24, 0x00	; 0
    1d82:	90 e0       	ldi	r25, 0x00	; 0
    1d84:	0e 94 83 02 	call	0x506	; 0x506 <delay>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:466
  lcd.setCursor(0, 1);
    1d88:	61 e0       	ldi	r22, 0x01	; 1
    1d8a:	80 e0       	ldi	r24, 0x00	; 0
    1d8c:	0e 94 93 03 	call	0x726	; 0x726 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.40]>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:467
  lcd.print("Arduino Library");
    1d90:	86 e9       	ldi	r24, 0x96	; 150
    1d92:	92 e0       	ldi	r25, 0x02	; 2
    1d94:	0e 94 ee 07 	call	0xfdc	; 0xfdc <Print::print(char const*) [clone .constprop.37]>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:468
  lcd.display();
    1d98:	0e 94 a9 03 	call	0x752	; 0x752 <LiquidCrystal::display() [clone .constprop.27]>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:469
  delay(1000);
    1d9c:	68 ee       	ldi	r22, 0xE8	; 232
    1d9e:	73 e0       	ldi	r23, 0x03	; 3
    1da0:	80 e0       	ldi	r24, 0x00	; 0
    1da2:	90 e0       	ldi	r25, 0x00	; 0
    1da4:	0e 94 83 02 	call	0x506	; 0x506 <delay>
setup():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:337
    delay(3000);
    lcd.clear();
  }

  showSplash();
  delay(2000);
    1da8:	60 ed       	ldi	r22, 0xD0	; 208
    1daa:	77 e0       	ldi	r23, 0x07	; 7
    1dac:	80 e0       	ldi	r24, 0x00	; 0
    1dae:	90 e0       	ldi	r25, 0x00	; 0
    1db0:	0e 94 83 02 	call	0x506	; 0x506 <delay>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:339

  lcd.clear();
    1db4:	0e 94 a2 03 	call	0x744	; 0x744 <LiquidCrystal::clear() [clone .constprop.28]>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:341

  checkQN8066();
    1db8:	0e 94 8b 08 	call	0x1116	; 0x1116 <checkQN8066()>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:344

  // Check the EEPROM content. If it contains valid data, read it (previous setup).
  if (EEPROM.read(eeprom_address) == app_id) {
    1dbc:	90 e0       	ldi	r25, 0x00	; 0
    1dbe:	80 e0       	ldi	r24, 0x00	; 0
    1dc0:	0e 94 09 09 	call	0x1212	; 0x1212 <EEPROMClass::read(int) [clone .isra.13]>
    1dc4:	86 35       	cpi	r24, 0x56	; 86
    1dc6:	09 f0       	breq	.+2      	; 0x1dca <main+0x142>
    1dc8:	ca c1       	rjmp	.+916    	; 0x215e <main+0x4d6>
readAllTransmitterInformation():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:433
  EEPROM.update(eeprom_address + 12, keyValue[KEY_BUFFER_GAIN].key);
  EEPROM.update(eeprom_address + 13, keyValue[KEY_RDS_FREQ_DEV].key);
}
// Read the previous transmitter setup
void readAllTransmitterInformation() {
  txFrequency = EEPROM.read(eeprom_address + 1) << 8;
    1dca:	81 e0       	ldi	r24, 0x01	; 1
    1dcc:	90 e0       	ldi	r25, 0x00	; 0
    1dce:	0e 94 09 09 	call	0x1212	; 0x1212 <EEPROMClass::read(int) [clone .isra.13]>
    1dd2:	c8 2f       	mov	r28, r24
    1dd4:	d0 e0       	ldi	r29, 0x00	; 0
    1dd6:	dc 2f       	mov	r29, r28
    1dd8:	cc 27       	eor	r28, r28
    1dda:	d0 93 77 01 	sts	0x0177, r29	; 0x800177 <txFrequency+0x1>
    1dde:	c0 93 76 01 	sts	0x0176, r28	; 0x800176 <txFrequency>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:434
  txFrequency |= EEPROM.read(eeprom_address + 2);
    1de2:	82 e0       	ldi	r24, 0x02	; 2
    1de4:	90 e0       	ldi	r25, 0x00	; 0
    1de6:	0e 94 09 09 	call	0x1212	; 0x1212 <EEPROMClass::read(int) [clone .isra.13]>
    1dea:	c8 2b       	or	r28, r24
    1dec:	d0 93 77 01 	sts	0x0177, r29	; 0x800177 <txFrequency+0x1>
    1df0:	c0 93 76 01 	sts	0x0176, r28	; 0x800176 <txFrequency>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:435
  pwmPowerDuty = EEPROM.read(eeprom_address + 3);
    1df4:	83 e0       	ldi	r24, 0x03	; 3
    1df6:	90 e0       	ldi	r25, 0x00	; 0
    1df8:	0e 94 09 09 	call	0x1212	; 0x1212 <EEPROMClass::read(int) [clone .isra.13]>
    1dfc:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <pwmPowerDuty>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:436
  keyValue[KEY_MONO_ESTEREO].key = EEPROM.read(eeprom_address + 4);
    1e00:	84 e0       	ldi	r24, 0x04	; 4
    1e02:	90 e0       	ldi	r25, 0x00	; 0
    1e04:	0e 94 09 09 	call	0x1212	; 0x1212 <EEPROMClass::read(int) [clone .isra.13]>
    1e08:	80 93 7f 01 	sts	0x017F, r24	; 0x80017f <keyValue+0x6>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:437
  keyValue[KEY_PRE_EMPHASIS].key = EEPROM.read(eeprom_address + 5);
    1e0c:	85 e0       	ldi	r24, 0x05	; 5
    1e0e:	90 e0       	ldi	r25, 0x00	; 0
    1e10:	0e 94 09 09 	call	0x1212	; 0x1212 <EEPROMClass::read(int) [clone .isra.13]>
    1e14:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <keyValue+0x9>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:438
  keyValue[KEY_RDS].key = EEPROM.read(eeprom_address + 6);
    1e18:	86 e0       	ldi	r24, 0x06	; 6
    1e1a:	90 e0       	ldi	r25, 0x00	; 0
    1e1c:	0e 94 09 09 	call	0x1212	; 0x1212 <EEPROMClass::read(int) [clone .isra.13]>
    1e20:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <keyValue+0xc>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:439
  keyValue[KEY_INPEDANCE].key = EEPROM.read(eeprom_address + 7);
    1e24:	87 e0       	ldi	r24, 0x07	; 7
    1e26:	90 e0       	ldi	r25, 0x00	; 0
    1e28:	0e 94 09 09 	call	0x1212	; 0x1212 <EEPROMClass::read(int) [clone .isra.13]>
    1e2c:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <keyValue+0xf>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:440
  keyValue[KEY_SOFT_CLIP_ENABLE].key = EEPROM.read(eeprom_address + 8);
    1e30:	88 e0       	ldi	r24, 0x08	; 8
    1e32:	90 e0       	ldi	r25, 0x00	; 0
    1e34:	0e 94 09 09 	call	0x1212	; 0x1212 <EEPROMClass::read(int) [clone .isra.13]>
    1e38:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <keyValue+0x12>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:441
  keyValue[KEY_SOFT_CLIP_THRESHOLD].key = EEPROM.read(eeprom_address + 9);
    1e3c:	89 e0       	ldi	r24, 0x09	; 9
    1e3e:	90 e0       	ldi	r25, 0x00	; 0
    1e40:	0e 94 09 09 	call	0x1212	; 0x1212 <EEPROMClass::read(int) [clone .isra.13]>
    1e44:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <keyValue+0x15>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:442
  keyValue[KEY_GAIN_PILOT].key = EEPROM.read(eeprom_address + 10);
    1e48:	8a e0       	ldi	r24, 0x0A	; 10
    1e4a:	90 e0       	ldi	r25, 0x00	; 0
    1e4c:	0e 94 09 09 	call	0x1212	; 0x1212 <EEPROMClass::read(int) [clone .isra.13]>
    1e50:	80 93 91 01 	sts	0x0191, r24	; 0x800191 <keyValue+0x18>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:443
  keyValue[KEY_FREQ_DERIVATION].key = EEPROM.read(eeprom_address + 11);
    1e54:	8b e0       	ldi	r24, 0x0B	; 11
    1e56:	90 e0       	ldi	r25, 0x00	; 0
    1e58:	0e 94 09 09 	call	0x1212	; 0x1212 <EEPROMClass::read(int) [clone .isra.13]>
    1e5c:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <keyValue+0x1b>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:444
  keyValue[KEY_BUFFER_GAIN].key = EEPROM.read(eeprom_address + 12);
    1e60:	8c e0       	ldi	r24, 0x0C	; 12
    1e62:	90 e0       	ldi	r25, 0x00	; 0
    1e64:	0e 94 09 09 	call	0x1212	; 0x1212 <EEPROMClass::read(int) [clone .isra.13]>
    1e68:	80 93 97 01 	sts	0x0197, r24	; 0x800197 <keyValue+0x1e>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:445
  keyValue[KEY_RDS_FREQ_DEV].key = EEPROM.read(eeprom_address + 13);
    1e6c:	8d e0       	ldi	r24, 0x0D	; 13
    1e6e:	90 e0       	ldi	r25, 0x00	; 0
    1e70:	0e 94 09 09 	call	0x1212	; 0x1212 <EEPROMClass::read(int) [clone .isra.13]>
    1e74:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <keyValue+0x21>
setup():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:353
    txFrequency = 1069;
    pwmPowerDuty = 50;
    saveAllTransmitterInformation();
  }

  enablePWM(0);  // PWM disable
    1e78:	80 e0       	ldi	r24, 0x00	; 0
    1e7a:	0e 94 c7 05 	call	0xb8e	; 0xb8e <enablePWM(unsigned char)>
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:283
                   bool mono, bool rds, 
                   uint8_t PreEmphasis,  uint8_t xtalInj, uint8_t imageRejection,
                   uint8_t txSoftClipThreshold,  uint8_t oneMinutOff, uint8_t gainTxPLT,
                   uint8_t txFreqDev,  uint8_t rdsLineIn, uint8_t rdsFreqDev, 
                   uint8_t inInpedance, uint8_t txAgcDig, uint8_t txAgcBuffer, uint8_t txSoftClip ) {
  delay(200); // Chip power-up time
    1e7e:	68 ec       	ldi	r22, 0xC8	; 200
    1e80:	70 e0       	ldi	r23, 0x00	; 0
    1e82:	80 e0       	ldi	r24, 0x00	; 0
    1e84:	90 e0       	ldi	r25, 0x00	; 0
    1e86:	0e 94 83 02 	call	0x506	; 0x506 <delay>
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:285

  this->xtal_div = xtalDiv;
    1e8a:	88 ee       	ldi	r24, 0xE8	; 232
    1e8c:	93 e0       	ldi	r25, 0x03	; 3
    1e8e:	90 93 e4 05 	sts	0x05E4, r25	; 0x8005e4 <tx+0x3>
    1e92:	80 93 e3 05 	sts	0x05E3, r24	; 0x8005e3 <tx+0x2>
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:287

  this->system1.raw = 0B11100011;
    1e96:	83 ee       	ldi	r24, 0xE3	; 227
    1e98:	80 93 e5 05 	sts	0x05E5, r24	; 0x8005e5 <tx+0x4>
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:288
  this->system2.raw = 0;
    1e9c:	10 92 e6 05 	sts	0x05E6, r1	; 0x8005e6 <tx+0x5>
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:293
  this->system2.arg.tx_mono = mono;   // Default stereo
  this->system2.arg.tx_rdsen = rds;   // RDS ON
  this->system2.arg.tc = PreEmphasis; // Default 50

  this->cca.raw = this->getRegister(QN_CCA);
    1ea0:	82 e0       	ldi	r24, 0x02	; 2
    1ea2:	0e 94 07 06 	call	0xc0e	; 0xc0e <QN8066::getRegister(unsigned char) [clone .constprop.55]>
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:296
  this->cca.arg.xtal_inj = xtalInj;
  this->cca.arg.imr = imageRejection;
  this->cca.arg.SNR_CCA_TH = 0B010000;
    1ea6:	80 e5       	ldi	r24, 0x50	; 80
    1ea8:	80 93 e8 05 	sts	0x05E8, r24	; 0x8005e8 <tx+0x7>
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:298

  this->gplt.raw = this->getRegister(QN_GPLT);
    1eac:	87 e2       	ldi	r24, 0x27	; 39
    1eae:	0e 94 07 06 	call	0xc0e	; 0xc0e <QN8066::getRegister(unsigned char) [clone .constprop.55]>
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:299
  this->gplt.arg.GAIN_TXPLT = gainTxPLT;
    1eb2:	89 e3       	ldi	r24, 0x39	; 57
    1eb4:	80 93 e7 05 	sts	0x05E7, r24	; 0x8005e7 <tx+0x6>
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:304
  this->gplt.arg.t1m_sel = oneMinutOff;
  this->gplt.arg.tx_sftclpth = txSoftClipThreshold; 

  // FDEV register 
  this->fdev.raw = txFreqDev; 
    1eb8:	8d e7       	ldi	r24, 0x7D	; 125
    1eba:	80 93 e9 05 	sts	0x05E9, r24	; 0x8005e9 <tx+0x8>
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:314

  // this->int_ctrl.raw = this->getRegister(QN_INT_CTRL); 

  // REG_VGA
  // this->reg_vga.raw = this->getRegister(QN_REG_VGA);
  this->reg_vga.arg.RIN = inInpedance;
    1ebe:	81 e1       	ldi	r24, 0x11	; 17
    1ec0:	80 93 ef 05 	sts	0x05EF, r24	; 0x8005ef <tx+0xe>
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:317
  this->reg_vga.arg.TXAGC_GDB = txAgcDig; 
  this->reg_vga.arg.TXAGC_GVGA = txAgcBuffer;
  this->reg_vga.arg.tx_sftclpen = txSoftClip;
    1ec4:	8c e3       	ldi	r24, 0x3C	; 60
    1ec6:	80 93 f0 05 	sts	0x05F0, r24	; 0x8005f0 <tx+0xf>
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:320


  Wire.begin();
    1eca:	0e 94 8d 01 	call	0x31a	; 0x31a <TwoWire::begin() [clone .constprop.21]>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:356

  tx.setup();
  tx.setTX(txFrequency);
    1ece:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <txFrequency>
    1ed2:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <txFrequency+0x1>
    1ed6:	0e 94 2f 05 	call	0xa5e	; 0xa5e <QN8066::setTX(unsigned int) [clone .constprop.16]>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:357
  delay(500);
    1eda:	64 ef       	ldi	r22, 0xF4	; 244
    1edc:	71 e0       	ldi	r23, 0x01	; 1
    1ede:	80 e0       	ldi	r24, 0x00	; 0
    1ee0:	90 e0       	ldi	r25, 0x00	; 0
    1ee2:	0e 94 83 02 	call	0x506	; 0x506 <delay>
_ZN6QN806614resetAudioPeakEv():
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.h:959
    1ee6:	0e 94 90 07 	call	0xf20	; 0xf20 <QN8066::setToggleTxPdClear() [clone .constprop.14]>
setup():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:365

  // Due to the architecture of the KIT, the PWM interferes with I2C communication.
  // Therefore, before changing the transmitter's configuration parameters, it must be disabled (Duty 0).

  // Sets the transmitter with the previous setup parameters
  tx.setTxInputImpedance(keyValue[KEY_INPEDANCE].value[keyValue[KEY_INPEDANCE].key].idx);  // 40Kohm
    1eea:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <keyValue+0xf>
    1eee:	c3 e0       	ldi	r28, 0x03	; 3
    1ef0:	e0 91 89 01 	lds	r30, 0x0189	; 0x800189 <keyValue+0x10>
    1ef4:	f0 91 8a 01 	lds	r31, 0x018A	; 0x80018a <keyValue+0x11>
    1ef8:	8c 02       	muls	r24, r28
    1efa:	e0 0d       	add	r30, r0
    1efc:	f1 1d       	adc	r31, r1
    1efe:	11 24       	eor	r1, r1
    1f00:	80 81       	ld	r24, Z
    1f02:	0e 94 62 06 	call	0xcc4	; 0xcc4 <QN8066::setTxInputImpedance(unsigned char) [clone .constprop.54]>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:366
  tx.setTxPilotGain(keyValue[KEY_GAIN_PILOT].value[keyValue[KEY_GAIN_PILOT].key].idx);
    1f06:	80 91 91 01 	lds	r24, 0x0191	; 0x800191 <keyValue+0x18>
    1f0a:	e0 91 92 01 	lds	r30, 0x0192	; 0x800192 <keyValue+0x19>
    1f0e:	f0 91 93 01 	lds	r31, 0x0193	; 0x800193 <keyValue+0x1a>
    1f12:	8c 02       	muls	r24, r28
    1f14:	e0 0d       	add	r30, r0
    1f16:	f1 1d       	adc	r31, r1
    1f18:	11 24       	eor	r1, r1
    1f1a:	80 81       	ld	r24, Z
setTxPilotGain():
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:549
 * @endcode  
 */
void QN8066::setTxPilotGain(uint8_t value) {
  qn8066_gplt gptl;

  if (value > 6 && value < 11) {
    1f1c:	99 ef       	ldi	r25, 0xF9	; 249
    1f1e:	98 0f       	add	r25, r24
    1f20:	94 30       	cpi	r25, 0x04	; 4
    1f22:	10 f4       	brcc	.+4      	; 0x1f28 <main+0x2a0>
    1f24:	0e 94 74 06 	call	0xce8	; 0xce8 <QN8066::setTxPilotGain(unsigned char) [clone .part.1] [clone .constprop.53]>
setup():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:367
  tx.setTxSoftClippingEnable(keyValue[KEY_SOFT_CLIP_ENABLE].value[keyValue[KEY_SOFT_CLIP_ENABLE].key].idx);
    1f28:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <keyValue+0x12>
    1f2c:	e0 91 8c 01 	lds	r30, 0x018C	; 0x80018c <keyValue+0x13>
    1f30:	f0 91 8d 01 	lds	r31, 0x018D	; 0x80018d <keyValue+0x14>
    1f34:	23 e0       	ldi	r18, 0x03	; 3
    1f36:	82 02       	muls	r24, r18
    1f38:	e0 0d       	add	r30, r0
    1f3a:	f1 1d       	adc	r31, r1
    1f3c:	11 24       	eor	r1, r1
    1f3e:	81 e0       	ldi	r24, 0x01	; 1
    1f40:	90 81       	ld	r25, Z
    1f42:	91 11       	cpse	r25, r1
    1f44:	01 c0       	rjmp	.+2      	; 0x1f48 <main+0x2c0>
    1f46:	80 e0       	ldi	r24, 0x00	; 0
    1f48:	0e 94 8b 06 	call	0xd16	; 0xd16 <QN8066::setTxSoftClippingEnable(bool) [clone .constprop.51]>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:368
  tx.setTxSoftClipThreshold(keyValue[KEY_SOFT_CLIP_THRESHOLD].value[keyValue[KEY_SOFT_CLIP_THRESHOLD].key].idx);
    1f4c:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <keyValue+0x15>
    1f50:	c3 e0       	ldi	r28, 0x03	; 3
    1f52:	e0 91 8f 01 	lds	r30, 0x018F	; 0x80018f <keyValue+0x16>
    1f56:	f0 91 90 01 	lds	r31, 0x0190	; 0x800190 <keyValue+0x17>
    1f5a:	8c 02       	muls	r24, r28
    1f5c:	e0 0d       	add	r30, r0
    1f5e:	f1 1d       	adc	r31, r1
    1f60:	11 24       	eor	r1, r1
    1f62:	80 81       	ld	r24, Z
    1f64:	0e 94 a4 06 	call	0xd48	; 0xd48 <QN8066::setTxSoftClipThreshold(unsigned char) [clone .constprop.50]>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:369
  tx.setPreEmphasis(keyValue[KEY_PRE_EMPHASIS].value[keyValue[KEY_PRE_EMPHASIS].key].idx);
    1f68:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <keyValue+0x9>
    1f6c:	e0 91 83 01 	lds	r30, 0x0183	; 0x800183 <keyValue+0xa>
    1f70:	f0 91 84 01 	lds	r31, 0x0184	; 0x800184 <keyValue+0xb>
    1f74:	8c 02       	muls	r24, r28
    1f76:	e0 0d       	add	r30, r0
    1f78:	f1 1d       	adc	r31, r1
    1f7a:	11 24       	eor	r1, r1
    1f7c:	80 81       	ld	r24, Z
    1f7e:	0e 94 b9 06 	call	0xd72	; 0xd72 <QN8066::setPreEmphasis(unsigned char) [clone .constprop.49]>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:370
  tx.rdsTxEnable(keyValue[KEY_RDS].value[keyValue[KEY_RDS].key].idx);
    1f82:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <keyValue+0xc>
    1f86:	e0 91 86 01 	lds	r30, 0x0186	; 0x800186 <keyValue+0xd>
    1f8a:	f0 91 87 01 	lds	r31, 0x0187	; 0x800187 <keyValue+0xe>
    1f8e:	8c 02       	muls	r24, r28
    1f90:	e0 0d       	add	r30, r0
    1f92:	f1 1d       	adc	r31, r1
    1f94:	11 24       	eor	r1, r1
    1f96:	81 e0       	ldi	r24, 0x01	; 1
    1f98:	90 81       	ld	r25, Z
    1f9a:	91 11       	cpse	r25, r1
    1f9c:	01 c0       	rjmp	.+2      	; 0x1fa0 <main+0x318>
    1f9e:	80 e0       	ldi	r24, 0x00	; 0
    1fa0:	0e 94 cd 06 	call	0xd9a	; 0xd9a <QN8066::rdsTxEnable(bool) [clone .constprop.48]>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:371
  tx.setTxMono(keyValue[KEY_MONO_ESTEREO].value[keyValue[KEY_MONO_ESTEREO].key].idx);
    1fa4:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <keyValue+0x6>
    1fa8:	c3 e0       	ldi	r28, 0x03	; 3
    1faa:	e0 91 80 01 	lds	r30, 0x0180	; 0x800180 <keyValue+0x7>
    1fae:	f0 91 81 01 	lds	r31, 0x0181	; 0x800181 <keyValue+0x8>
    1fb2:	8c 02       	muls	r24, r28
    1fb4:	e0 0d       	add	r30, r0
    1fb6:	f1 1d       	adc	r31, r1
    1fb8:	11 24       	eor	r1, r1
    1fba:	80 81       	ld	r24, Z
    1fbc:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <QN8066::setTxMono(unsigned char) [clone .constprop.47]>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:372
  tx.setTxInputBufferGain(keyValue[KEY_BUFFER_GAIN].value[keyValue[KEY_BUFFER_GAIN].key].idx);
    1fc0:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <keyValue+0x1e>
    1fc4:	e0 91 98 01 	lds	r30, 0x0198	; 0x800198 <keyValue+0x1f>
    1fc8:	f0 91 99 01 	lds	r31, 0x0199	; 0x800199 <keyValue+0x20>
    1fcc:	8c 02       	muls	r24, r28
    1fce:	e0 0d       	add	r30, r0
    1fd0:	f1 1d       	adc	r31, r1
    1fd2:	11 24       	eor	r1, r1
    1fd4:	80 81       	ld	r24, Z
    1fd6:	0e 94 f4 06 	call	0xde8	; 0xde8 <QN8066::setTxInputBufferGain(unsigned char) [clone .constprop.46]>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:373
  tx.rdsSetFrequencyDerivation(keyValue[KEY_RDS_FREQ_DEV].value[keyValue[KEY_RDS_FREQ_DEV].key].idx);
    1fda:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <keyValue+0x21>
    1fde:	e0 91 9b 01 	lds	r30, 0x019B	; 0x80019b <keyValue+0x22>
    1fe2:	f0 91 9c 01 	lds	r31, 0x019C	; 0x80019c <keyValue+0x23>
    1fe6:	8c 02       	muls	r24, r28
    1fe8:	e0 0d       	add	r30, r0
    1fea:	f1 1d       	adc	r31, r1
    1fec:	11 24       	eor	r1, r1
    1fee:	80 81       	ld	r24, Z
    1ff0:	0e 94 08 07 	call	0xe10	; 0xe10 <QN8066::rdsSetFrequencyDerivation(unsigned char) [clone .constprop.45]>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:375

  showStatus(lcdPage);
    1ff4:	80 91 5c 05 	lds	r24, 0x055C	; 0x80055c <lcdPage>
    1ff8:	0e 94 23 0a 	call	0x1446	; 0x1446 <showStatus(unsigned char)>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:378

  // Checking RDS setup
  if (keyValue[KEY_RDS].value[keyValue[KEY_RDS].key].idx == 1) {
    1ffc:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <keyValue+0xc>
    2000:	e0 91 86 01 	lds	r30, 0x0186	; 0x800186 <keyValue+0xd>
    2004:	f0 91 87 01 	lds	r31, 0x0187	; 0x800187 <keyValue+0xe>
    2008:	8c 02       	muls	r24, r28
    200a:	e0 0d       	add	r30, r0
    200c:	f1 1d       	adc	r31, r1
    200e:	11 24       	eor	r1, r1
    2010:	80 81       	ld	r24, Z
    2012:	81 30       	cpi	r24, 0x01	; 1
    2014:	b9 f4       	brne	.+46     	; 0x2044 <main+0x3bc>
rdsSetPI():
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:1197
 */
void QN8066::rdsSetPI(uint8_t countryId, uint8_t programId, uint8_t reference) {
  RDS_BLOCK1 pi; 
  pi.field.countryId = countryId;
  pi.field.programId = programId;
  pi.field.reference = reference;
    2016:	8b e9       	ldi	r24, 0x9B	; 155
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:1198
  this->rdsPI = pi.pi;
    2018:	80 93 fe 05 	sts	0x05FE, r24	; 0x8005fe <tx+0x1d>
    201c:	80 e4       	ldi	r24, 0x40	; 64
    201e:	80 93 ff 05 	sts	0x05FF, r24	; 0x8005ff <tx+0x1e>
rdsInitTx():
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:1179
 * @endcode   
 */
void QN8066::rdsInitTx(uint8_t countryId, uint8_t programId, uint8_t reference, uint8_t pty, uint8_t rdsSyncTime, uint8_t rdsRepeatGroup) {
  // this->setRegister(0x6E, 0B10110111);  // TEST - Stop Auto Gain Correction (AGC)
  this->rdsSetPI(countryId, programId, reference );
  this->rdsSyncTime = rdsSyncTime; 
    2022:	82 e3       	ldi	r24, 0x32	; 50
    2024:	80 93 f3 05 	sts	0x05F3, r24	; 0x8005f3 <tx+0x12>
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:1180
  this->rdsRepeatGroup = rdsRepeatGroup;
    2028:	85 e0       	ldi	r24, 0x05	; 5
    202a:	80 93 f4 05 	sts	0x05F4, r24	; 0x8005f4 <tx+0x13>
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:1181
  this->rdsPTY = pty;
    202e:	88 e0       	ldi	r24, 0x08	; 8
    2030:	80 93 00 06 	sts	0x0600, r24	; 0x800600 <tx+0x1f>
/Users/rcaratti/Documents/Arduino/libraries/QN8066/src/QN8066.cpp:1182
  delay(100);
    2034:	64 e6       	ldi	r22, 0x64	; 100
    2036:	70 e0       	ldi	r23, 0x00	; 0
    2038:	80 e0       	ldi	r24, 0x00	; 0
    203a:	90 e0       	ldi	r25, 0x00	; 0
    203c:	0e 94 83 02 	call	0x506	; 0x506 <delay>
setup():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:380
    tx.rdsInitTx(0x8, 0x1, 0x9B, 8 , 50 , 5 );  // RDS transmission configuration. See: https://pu2clr.github.io/QN8066/extras/apidoc/html/index.html
    sendRDS();              // Control the RDS PS and RT messages with this function
    2040:	0e 94 0b 09 	call	0x1216	; 0x1216 <sendRDS()>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:386
  }

  // Adjust clock divider (Timer0) 
  // TCCR0B = (TCCR0B & 0b11111000) | 0x02; // Increases the clock of PWM to 62.5 kHz.

  enablePWM(pwmPowerDuty);  // It is about 1/5 of the max power. At 50 duty cycle, it is between 1 and 1,4 W
    2044:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <pwmPowerDuty>
    2048:	0e 94 c7 05 	call	0xb8e	; 0xb8e <enablePWM(unsigned char)>
doMenu():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:693
      break;
    case 10:
      runAction([](uint8_t value) {tx.setTxInputBufferGain(value);}, &keyValue[idxMenu], 1, 0, 5);
      break;
    case 11:
      runAction([](uint8_t value) {tx.rdsSetFrequencyDerivation(value);}, &keyValue[idxMenu], 1, 0, 5);
    204c:	c3 e0       	ldi	r28, 0x03	; 3
loop():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:771
  if (menuLevel == 0) {
    showStatus(lcdPage);
    while ((key = checkEncoder()) == ENCODER_NO_ACTION) {

      // RDS UNDER CONSTRUCTION...
      if (keyValue[KEY_RDS].value[keyValue[KEY_RDS].key].idx == 1  && !stopRDSforWhile )   {
    204e:	23 e0       	ldi	r18, 0x03	; 3
    2050:	92 2e       	mov	r9, r18
doPower():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:607
        pwmPowerDuty = 0;
    } else if (key == ENCODER_RIGHT) {
      if (pwmPowerDuty <= 225)
        pwmPowerDuty += pwmDutyStep;
      else
        pwmPowerDuty = 255;
    2052:	88 24       	eor	r8, r8
    2054:	8a 94       	dec	r8
doFrequency():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:583
        txFrequency = 1080;
      else
        txFrequency -= STEP_FREQ;
    } else if (key == 1) {
      if (txFrequency > 1080)  // if more than 108 MHz
        txFrequency = 640;
    2056:	00 e8       	ldi	r16, 0x80	; 128
    2058:	12 e0       	ldi	r17, 0x02	; 2
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:578
  showFrequency();
  int8_t key = browseParameter();
  while (key != BT_MENU_PRESSED) {
    if (key == -1) {
      if (txFrequency < 640)  // If less than 64 MHz
        txFrequency = 1080;
    205a:	38 e3       	ldi	r19, 0x38	; 56
    205c:	e3 2e       	mov	r14, r19
    205e:	34 e0       	ldi	r19, 0x04	; 4
    2060:	f3 2e       	mov	r15, r19
main():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:704
    default:
      break;
  }
  enablePWM(pwmPowerDuty);          // Turn the PWM on again.
  saveAllTransmitterInformation();  // Saves the current modified data to the EEPROM
  return 1;
    2062:	d1 e0       	ldi	r29, 0x01	; 1
loop():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:807
    showMenu(menuIdx);
    key = browseParameter();
    while (key != BT_MENU_PRESSED) {
      if (key == ENCODER_LEFT) {
        if (menuIdx == 0)
          menuIdx = lastMenu;
    2064:	8c e0       	ldi	r24, 0x0C	; 12
    2066:	78 2e       	mov	r7, r24
main():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/main.cpp:47
  
  setup();
    
  for (;;) {
    loop();
    if (serialEventRun) serialEventRun();
    2068:	90 e0       	ldi	r25, 0x00	; 0
    206a:	c9 2e       	mov	r12, r25
    206c:	90 e0       	ldi	r25, 0x00	; 0
    206e:	d9 2e       	mov	r13, r25
loop():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:766
}

// Main loop
void loop() {
  int8_t key;
  if (menuLevel == 0) {
    2070:	80 91 5d 05 	lds	r24, 0x055D	; 0x80055d <menuLevel>
    2074:	81 11       	cpse	r24, r1
    2076:	c5 c0       	rjmp	.+394    	; 0x2202 <main+0x57a>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:767
    showStatus(lcdPage);
    2078:	80 91 5c 05 	lds	r24, 0x055C	; 0x80055c <lcdPage>
    207c:	0e 94 23 0a 	call	0x1446	; 0x1446 <showStatus(unsigned char)>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:768
    while ((key = checkEncoder()) == ENCODER_NO_ACTION) {
    2080:	0e 94 93 05 	call	0xb26	; 0xb26 <checkEncoder()>
    2084:	b8 2e       	mov	r11, r24
    2086:	20 91 85 01 	lds	r18, 0x0185	; 0x800185 <keyValue+0xc>
    208a:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <keyValue+0xd>
    208e:	90 91 87 01 	lds	r25, 0x0187	; 0x800187 <keyValue+0xe>
    2092:	b1 10       	cpse	r11, r1
    2094:	70 c0       	rjmp	.+224    	; 0x2176 <main+0x4ee>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:771

      // RDS UNDER CONSTRUCTION...
      if (keyValue[KEY_RDS].value[keyValue[KEY_RDS].key].idx == 1  && !stopRDSforWhile )   {
    2096:	2c 02       	muls	r18, r28
    2098:	80 0d       	add	r24, r0
    209a:	91 1d       	adc	r25, r1
    209c:	11 24       	eor	r1, r1
    209e:	fc 01       	movw	r30, r24
    20a0:	80 81       	ld	r24, Z
    20a2:	81 30       	cpi	r24, 0x01	; 1
    20a4:	31 f4       	brne	.+12     	; 0x20b2 <main+0x42a>
    20a6:	80 91 5b 05 	lds	r24, 0x055B	; 0x80055b <stopRDSforWhile>
    20aa:	81 11       	cpse	r24, r1
    20ac:	02 c0       	rjmp	.+4      	; 0x20b2 <main+0x42a>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:772
        sendRDS();
    20ae:	0e 94 0b 09 	call	0x1216	; 0x1216 <sendRDS()>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:775
      }

      if (keyValue[KEY_RDS].value[keyValue[KEY_RDS].key].idx == 1 && stopRDSforWhile && (millis() - stopRDSTime) > STOP_RDS_TIME ) { 
    20b2:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <keyValue+0xc>
    20b6:	e0 91 86 01 	lds	r30, 0x0186	; 0x800186 <keyValue+0xd>
    20ba:	f0 91 87 01 	lds	r31, 0x0187	; 0x800187 <keyValue+0xe>
    20be:	8c 02       	muls	r24, r28
    20c0:	e0 0d       	add	r30, r0
    20c2:	f1 1d       	adc	r31, r1
    20c4:	11 24       	eor	r1, r1
    20c6:	80 81       	ld	r24, Z
    20c8:	81 30       	cpi	r24, 0x01	; 1
    20ca:	31 f5       	brne	.+76     	; 0x2118 <main+0x490>
    20cc:	80 91 5b 05 	lds	r24, 0x055B	; 0x80055b <stopRDSforWhile>
    20d0:	88 23       	and	r24, r24
    20d2:	11 f1       	breq	.+68     	; 0x2118 <main+0x490>
    20d4:	0e 94 b6 02 	call	0x56c	; 0x56c <millis>
    20d8:	20 91 0f 06 	lds	r18, 0x060F	; 0x80060f <stopRDSTime>
    20dc:	30 91 10 06 	lds	r19, 0x0610	; 0x800610 <stopRDSTime+0x1>
    20e0:	40 91 11 06 	lds	r20, 0x0611	; 0x800611 <stopRDSTime+0x2>
    20e4:	50 91 12 06 	lds	r21, 0x0612	; 0x800612 <stopRDSTime+0x3>
    20e8:	62 1b       	sub	r22, r18
    20ea:	73 0b       	sbc	r23, r19
    20ec:	84 0b       	sbc	r24, r20
    20ee:	95 0b       	sbc	r25, r21
    20f0:	61 31       	cpi	r22, 0x11	; 17
    20f2:	77 42       	sbci	r23, 0x27	; 39
    20f4:	81 05       	cpc	r24, r1
    20f6:	91 05       	cpc	r25, r1
    20f8:	78 f0       	brcs	.+30     	; 0x2118 <main+0x490>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:776
        stopRDSforWhile = false; 
    20fa:	10 92 5b 05 	sts	0x055B, r1	; 0x80055b <stopRDSforWhile>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:777
        tx.rdsTxEnable(true);
    20fe:	81 e0       	ldi	r24, 0x01	; 1
    2100:	0e 94 cd 06 	call	0xd9a	; 0xd9a <QN8066::rdsTxEnable(bool) [clone .constprop.48]>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:778
        stopRDSTime = millis();
    2104:	0e 94 b6 02 	call	0x56c	; 0x56c <millis>
    2108:	60 93 0f 06 	sts	0x060F, r22	; 0x80060f <stopRDSTime>
    210c:	70 93 10 06 	sts	0x0610, r23	; 0x800610 <stopRDSTime+0x1>
    2110:	80 93 11 06 	sts	0x0611, r24	; 0x800611 <stopRDSTime+0x2>
    2114:	90 93 12 06 	sts	0x0612, r25	; 0x800612 <stopRDSTime+0x3>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:782
      }

      // Refresh Status
      if ((millis() - showStatusTime) > STATUS_REFRESH_TIME) {
    2118:	0e 94 b6 02 	call	0x56c	; 0x56c <millis>
    211c:	20 91 0b 06 	lds	r18, 0x060B	; 0x80060b <showStatusTime>
    2120:	30 91 0c 06 	lds	r19, 0x060C	; 0x80060c <showStatusTime+0x1>
    2124:	40 91 0d 06 	lds	r20, 0x060D	; 0x80060d <showStatusTime+0x2>
    2128:	50 91 0e 06 	lds	r21, 0x060E	; 0x80060e <showStatusTime+0x3>
    212c:	62 1b       	sub	r22, r18
    212e:	73 0b       	sbc	r23, r19
    2130:	84 0b       	sbc	r24, r20
    2132:	95 0b       	sbc	r25, r21
    2134:	69 38       	cpi	r22, 0x89	; 137
    2136:	73 41       	sbci	r23, 0x13	; 19
    2138:	81 05       	cpc	r24, r1
    213a:	91 05       	cpc	r25, r1
    213c:	08 f4       	brcc	.+2      	; 0x2140 <main+0x4b8>
    213e:	a0 cf       	rjmp	.-192    	; 0x2080 <main+0x3f8>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:783
        showStatus(lcdPage);
    2140:	80 91 5c 05 	lds	r24, 0x055C	; 0x80055c <lcdPage>
    2144:	0e 94 23 0a 	call	0x1446	; 0x1446 <showStatus(unsigned char)>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:784
        showStatusTime = millis();
    2148:	0e 94 b6 02 	call	0x56c	; 0x56c <millis>
    214c:	60 93 0b 06 	sts	0x060B, r22	; 0x80060b <showStatusTime>
    2150:	70 93 0c 06 	sts	0x060C, r23	; 0x80060c <showStatusTime+0x1>
    2154:	80 93 0d 06 	sts	0x060D, r24	; 0x80060d <showStatusTime+0x2>
    2158:	90 93 0e 06 	sts	0x060E, r25	; 0x80060e <showStatusTime+0x3>
    215c:	91 cf       	rjmp	.-222    	; 0x2080 <main+0x3f8>
setup():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:348
  // Check the EEPROM content. If it contains valid data, read it (previous setup).
  if (EEPROM.read(eeprom_address) == app_id) {
    readAllTransmitterInformation();
  } else {
    // Defult values
    txFrequency = 1069;
    215e:	8d e2       	ldi	r24, 0x2D	; 45
    2160:	94 e0       	ldi	r25, 0x04	; 4
    2162:	90 93 77 01 	sts	0x0177, r25	; 0x800177 <txFrequency+0x1>
    2166:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <txFrequency>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:349
    pwmPowerDuty = 50;
    216a:	82 e3       	ldi	r24, 0x32	; 50
    216c:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <pwmPowerDuty>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:350
    saveAllTransmitterInformation();
    2170:	0e 94 ba 08 	call	0x1174	; 0x1174 <saveAllTransmitterInformation()>
    2174:	81 ce       	rjmp	.-766    	; 0x1e78 <main+0x1f0>
loop():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:788
        showStatus(lcdPage);
        showStatusTime = millis();
      }
    }
    // If you RDS is configured, stop for a while the RDS processing to improve the encoder and buttons response. 
    stopRDSforWhile = true;
    2176:	d0 93 5b 05 	sts	0x055B, r29	; 0x80055b <stopRDSforWhile>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:789
    if (keyValue[KEY_RDS].value[keyValue[KEY_RDS].key].idx == 1) tx.rdsTxEnable(false);
    217a:	2c 02       	muls	r18, r28
    217c:	80 0d       	add	r24, r0
    217e:	91 1d       	adc	r25, r1
    2180:	11 24       	eor	r1, r1
    2182:	fc 01       	movw	r30, r24
    2184:	80 81       	ld	r24, Z
    2186:	81 30       	cpi	r24, 0x01	; 1
    2188:	19 f4       	brne	.+6      	; 0x2190 <main+0x508>
    218a:	80 e0       	ldi	r24, 0x00	; 0
    218c:	0e 94 cd 06 	call	0xd9a	; 0xd9a <QN8066::rdsTxEnable(bool) [clone .constprop.48]>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:790
    if (key == ENCODER_LEFT) {  // Down Pressed
    2190:	ff ef       	ldi	r31, 0xFF	; 255
    2192:	bf 12       	cpse	r11, r31
    2194:	25 c0       	rjmp	.+74     	; 0x21e0 <main+0x558>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:791
      lcdPage--;
    2196:	80 91 5c 05 	lds	r24, 0x055C	; 0x80055c <lcdPage>
    219a:	81 50       	subi	r24, 0x01	; 1
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:792
      if (lcdPage < 0) lcdPage = 3;
    219c:	87 fd       	sbrc	r24, 7
    219e:	03 c0       	rjmp	.+6      	; 0x21a6 <main+0x51e>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:795
      showStatus(lcdPage);
    } else if (key == ENCODER_RIGHT) {  // Up Pressed
      lcdPage++;
    21a0:	80 93 5c 05 	sts	0x055C, r24	; 0x80055c <lcdPage>
    21a4:	02 c0       	rjmp	.+4      	; 0x21aa <main+0x522>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:792
    // If you RDS is configured, stop for a while the RDS processing to improve the encoder and buttons response. 
    stopRDSforWhile = true;
    if (keyValue[KEY_RDS].value[keyValue[KEY_RDS].key].idx == 1) tx.rdsTxEnable(false);
    if (key == ENCODER_LEFT) {  // Down Pressed
      lcdPage--;
      if (lcdPage < 0) lcdPage = 3;
    21a6:	90 92 5c 05 	sts	0x055C, r9	; 0x80055c <lcdPage>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:797
      showStatus(lcdPage);
    } else if (key == ENCODER_RIGHT) {  // Up Pressed
      lcdPage++;
      if (lcdPage > 3) lcdPage = 0;
      showStatus(lcdPage);
    21aa:	80 91 5c 05 	lds	r24, 0x055C	; 0x80055c <lcdPage>
    21ae:	0e 94 23 0a 	call	0x1446	; 0x1446 <showStatus(unsigned char)>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:824
    menuLevel = 2;
  } else if (menuLevel == 2) {
    menuLevel = doMenu(menuIdx);
  }

  stopRDSTime = millis();           // Back RDS only on main manu / main screen
    21b2:	0e 94 b6 02 	call	0x56c	; 0x56c <millis>
    21b6:	60 93 0f 06 	sts	0x060F, r22	; 0x80060f <stopRDSTime>
    21ba:	70 93 10 06 	sts	0x0610, r23	; 0x800610 <stopRDSTime+0x1>
    21be:	80 93 11 06 	sts	0x0611, r24	; 0x800611 <stopRDSTime+0x2>
    21c2:	90 93 12 06 	sts	0x0612, r25	; 0x800612 <stopRDSTime+0x3>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:826

  delay(5);
    21c6:	65 e0       	ldi	r22, 0x05	; 5
    21c8:	70 e0       	ldi	r23, 0x00	; 0
    21ca:	80 e0       	ldi	r24, 0x00	; 0
    21cc:	90 e0       	ldi	r25, 0x00	; 0
    21ce:	0e 94 83 02 	call	0x506	; 0x506 <delay>
main():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/main.cpp:47
    21d2:	c1 14       	cp	r12, r1
    21d4:	d1 04       	cpc	r13, r1
    21d6:	09 f4       	brne	.+2      	; 0x21da <main+0x552>
    21d8:	4b cf       	rjmp	.-362    	; 0x2070 <main+0x3e8>
    21da:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    21de:	41 cf       	rjmp	.-382    	; 0x2062 <main+0x3da>
loop():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:794
    if (keyValue[KEY_RDS].value[keyValue[KEY_RDS].key].idx == 1) tx.rdsTxEnable(false);
    if (key == ENCODER_LEFT) {  // Down Pressed
      lcdPage--;
      if (lcdPage < 0) lcdPage = 3;
      showStatus(lcdPage);
    } else if (key == ENCODER_RIGHT) {  // Up Pressed
    21e0:	21 e0       	ldi	r18, 0x01	; 1
    21e2:	b2 12       	cpse	r11, r18
    21e4:	08 c0       	rjmp	.+16     	; 0x21f6 <main+0x56e>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:795
      lcdPage++;
    21e6:	80 91 5c 05 	lds	r24, 0x055C	; 0x80055c <lcdPage>
    21ea:	8f 5f       	subi	r24, 0xFF	; 255
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:796
      if (lcdPage > 3) lcdPage = 0;
    21ec:	84 30       	cpi	r24, 0x04	; 4
    21ee:	c4 f2       	brlt	.-80     	; 0x21a0 <main+0x518>
    21f0:	10 92 5c 05 	sts	0x055C, r1	; 0x80055c <lcdPage>
    21f4:	da cf       	rjmp	.-76     	; 0x21aa <main+0x522>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:798
      showStatus(lcdPage);
    } else if ( key == BT_MENU_PRESSED  ) {  // Menu Pressed
    21f6:	82 e0       	ldi	r24, 0x02	; 2
    21f8:	b8 12       	cpse	r11, r24
    21fa:	db cf       	rjmp	.-74     	; 0x21b2 <main+0x52a>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:799
      menuLevel = 1;
    21fc:	d0 93 5d 05 	sts	0x055D, r29	; 0x80055d <menuLevel>
    2200:	d8 cf       	rjmp	.-80     	; 0x21b2 <main+0x52a>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:801
    } 
  } else if (menuLevel == 1) {
    2202:	81 30       	cpi	r24, 0x01	; 1
    2204:	f9 f4       	brne	.+62     	; 0x2244 <main+0x5bc>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:802
    showMenu(menuIdx);
    2206:	80 91 5a 05 	lds	r24, 0x055A	; 0x80055a <menuIdx>
    220a:	0e 94 a7 0b 	call	0x174e	; 0x174e <showMenu(unsigned char)>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:803
    key = browseParameter();
    220e:	0e 94 bd 05 	call	0xb7a	; 0xb7a <browseParameter()>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:804
    while (key != BT_MENU_PRESSED) {
    2212:	82 30       	cpi	r24, 0x02	; 2
    2214:	09 f4       	brne	.+2      	; 0x2218 <main+0x590>
    2216:	11 c1       	rjmp	.+546    	; 0x243a <main+0x7b2>
    2218:	90 91 5a 05 	lds	r25, 0x055A	; 0x80055a <menuIdx>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:805
      if (key == ENCODER_LEFT) {
    221c:	8f 3f       	cpi	r24, 0xFF	; 255
    221e:	49 f4       	brne	.+18     	; 0x2232 <main+0x5aa>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:806
        if (menuIdx == 0)
    2220:	91 11       	cpse	r25, r1
    2222:	03 c0       	rjmp	.+6      	; 0x222a <main+0x5a2>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:807
          menuIdx = lastMenu;
    2224:	70 92 5a 05 	sts	0x055A, r7	; 0x80055a <menuIdx>
    2228:	ee cf       	rjmp	.-36     	; 0x2206 <main+0x57e>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:809
        else
          menuIdx--;
    222a:	91 50       	subi	r25, 0x01	; 1
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:814
      } else if (key == ENCODER_RIGHT) {
        if (menuIdx == lastMenu)
          menuIdx = 0;
        else
          menuIdx++;
    222c:	90 93 5a 05 	sts	0x055A, r25	; 0x80055a <menuIdx>
    2230:	ea cf       	rjmp	.-44     	; 0x2206 <main+0x57e>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:810
      if (key == ENCODER_LEFT) {
        if (menuIdx == 0)
          menuIdx = lastMenu;
        else
          menuIdx--;
      } else if (key == ENCODER_RIGHT) {
    2232:	81 30       	cpi	r24, 0x01	; 1
    2234:	41 f7       	brne	.-48     	; 0x2206 <main+0x57e>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:811
        if (menuIdx == lastMenu)
    2236:	9c 30       	cpi	r25, 0x0C	; 12
    2238:	19 f4       	brne	.+6      	; 0x2240 <main+0x5b8>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:812
          menuIdx = 0;
    223a:	10 92 5a 05 	sts	0x055A, r1	; 0x80055a <menuIdx>
    223e:	e3 cf       	rjmp	.-58     	; 0x2206 <main+0x57e>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:814
        else
          menuIdx++;
    2240:	9f 5f       	subi	r25, 0xFF	; 255
    2242:	f4 cf       	rjmp	.-24     	; 0x222c <main+0x5a4>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:820
      }
      showMenu(menuIdx);
      key = browseParameter();
    }
    menuLevel = 2;
  } else if (menuLevel == 2) {
    2244:	82 30       	cpi	r24, 0x02	; 2
    2246:	09 f0       	breq	.+2      	; 0x224a <main+0x5c2>
    2248:	b4 cf       	rjmp	.-152    	; 0x21b2 <main+0x52a>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:821
    menuLevel = doMenu(menuIdx);
    224a:	b0 90 5a 05 	lds	r11, 0x055A	; 0x80055a <menuIdx>
doMenu():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:652
  }
  // menuLevel = 0;
}
// // Processes the current menu option selected
uint8_t doMenu(uint8_t idxMenu) {
  enablePWM(0);  // The PWM seems to interfere with the communication with the QN8066.
    224e:	80 e0       	ldi	r24, 0x00	; 0
    2250:	0e 94 c7 05 	call	0xb8e	; 0xb8e <enablePWM(unsigned char)>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:653
  delay(PUSH_MIN_DELAY);
    2254:	68 ec       	ldi	r22, 0xC8	; 200
    2256:	70 e0       	ldi	r23, 0x00	; 0
    2258:	80 e0       	ldi	r24, 0x00	; 0
    225a:	90 e0       	ldi	r25, 0x00	; 0
    225c:	0e 94 83 02 	call	0x506	; 0x506 <delay>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:654
  switch (idxMenu) {
    2260:	9c e0       	ldi	r25, 0x0C	; 12
    2262:	9b 15       	cp	r25, r11
    2264:	08 f4       	brcc	.+2      	; 0x2268 <main+0x5e0>
    2266:	8b c0       	rjmp	.+278    	; 0x237e <main+0x6f6>
    2268:	eb 2d       	mov	r30, r11
    226a:	0b 2c       	mov	r0, r11
    226c:	00 0c       	add	r0, r0
    226e:	ff 0b       	sbc	r31, r31
    2270:	e4 5c       	subi	r30, 0xC4	; 196
    2272:	fe 4e       	sbci	r31, 0xEE	; 238
    2274:	0c 94 35 15 	jmp	0x2a6a	; 0x2a6a <__tablejump2__>
    2278:	49 11       	cpse	r20, r9
    227a:	8c 11       	cpse	r24, r12
    227c:	b5 11       	cpse	r27, r5
    227e:	c7 11       	cpse	r28, r7
    2280:	d0 11       	cpse	r29, r0
    2282:	d9 11       	cpse	r29, r9
    2284:	e2 11       	cpse	r30, r2
    2286:	eb 11       	cpse	r30, r11
    2288:	f4 11       	cpse	r31, r4
    228a:	fd 11       	cpse	r31, r13
    228c:	06 12       	cpse	r0, r22
    228e:	0f 12       	cpse	r0, r31
    2290:	18 12       	cpse	r1, r24
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:656
    case 0:
      lcd.setCursor(9, 1);
    2292:	61 e0       	ldi	r22, 0x01	; 1
    2294:	89 e0       	ldi	r24, 0x09	; 9
    2296:	0e 94 93 03 	call	0x726	; 0x726 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.40]>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:657
      lcd.print("<<");  // it just indicates the edit mode
    229a:	86 ea       	ldi	r24, 0xA6	; 166
    229c:	92 e0       	ldi	r25, 0x02	; 2
    229e:	0e 94 ee 07 	call	0xfdc	; 0xfdc <Print::print(char const*) [clone .constprop.37]>
doFrequency():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:573
    showPower();
  }
}
// Processes the change to a new frequency
void doFrequency() {
  showFrequency();
    22a2:	0e 94 67 08 	call	0x10ce	; 0x10ce <showFrequency()>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:574
  int8_t key = browseParameter();
    22a6:	0e 94 bd 05 	call	0xb7a	; 0xb7a <browseParameter()>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:575
  while (key != BT_MENU_PRESSED) {
    22aa:	82 30       	cpi	r24, 0x02	; 2
    22ac:	09 f4       	brne	.+2      	; 0x22b0 <main+0x628>
    22ae:	67 c0       	rjmp	.+206    	; 0x237e <main+0x6f6>
    22b0:	20 91 76 01 	lds	r18, 0x0176	; 0x800176 <txFrequency>
    22b4:	30 91 77 01 	lds	r19, 0x0177	; 0x800177 <txFrequency+0x1>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:576
    if (key == -1) {
    22b8:	8f 3f       	cpi	r24, 0xFF	; 255
    22ba:	01 f5       	brne	.+64     	; 0x22fc <main+0x674>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:577
      if (txFrequency < 640)  // If less than 64 MHz
    22bc:	20 38       	cpi	r18, 0x80	; 128
    22be:	e2 e0       	ldi	r30, 0x02	; 2
    22c0:	3e 07       	cpc	r19, r30
    22c2:	a8 f4       	brcc	.+42     	; 0x22ee <main+0x666>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:578
        txFrequency = 1080;
    22c4:	f0 92 77 01 	sts	0x0177, r15	; 0x800177 <txFrequency+0x1>
    22c8:	e0 92 76 01 	sts	0x0176, r14	; 0x800176 <txFrequency>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:587
      if (txFrequency > 1080)  // if more than 108 MHz
        txFrequency = 640;
      else
        txFrequency += STEP_FREQ;
    }
    switchTxFrequency(txFrequency);
    22cc:	a0 90 76 01 	lds	r10, 0x0176	; 0x800176 <txFrequency>
    22d0:	b0 90 77 01 	lds	r11, 0x0177	; 0x800177 <txFrequency+0x1>
switchTxFrequency():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:456
  analogWrite(PWM_PA, value);  // Turn PA off
  delay(100);
}
// Switches the the current frequency to a new frequency
void switchTxFrequency(uint16_t freq) {
  enablePWM(0);  // PWM duty cycle disabled
    22d4:	80 e0       	ldi	r24, 0x00	; 0
    22d6:	0e 94 c7 05 	call	0xb8e	; 0xb8e <enablePWM(unsigned char)>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:457
  tx.setTX(txFrequency = freq);
    22da:	c5 01       	movw	r24, r10
    22dc:	0e 94 2f 05 	call	0xa5e	; 0xa5e <QN8066::setTX(unsigned int) [clone .constprop.16]>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:458
  enablePWM(pwmPowerDuty);  // PWM duty cycle anable
    22e0:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <pwmPowerDuty>
    22e4:	0e 94 c7 05 	call	0xb8e	; 0xb8e <enablePWM(unsigned char)>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:459
  showFrequency();
    22e8:	0e 94 67 08 	call	0x10ce	; 0x10ce <showFrequency()>
    22ec:	da cf       	rjmp	.-76     	; 0x22a2 <main+0x61a>
doFrequency():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:580
  while (key != BT_MENU_PRESSED) {
    if (key == -1) {
      if (txFrequency < 640)  // If less than 64 MHz
        txFrequency = 1080;
      else
        txFrequency -= STEP_FREQ;
    22ee:	21 50       	subi	r18, 0x01	; 1
    22f0:	31 09       	sbc	r19, r1
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:585
    } else if (key == 1) {
      if (txFrequency > 1080)  // if more than 108 MHz
        txFrequency = 640;
      else
        txFrequency += STEP_FREQ;
    22f2:	30 93 77 01 	sts	0x0177, r19	; 0x800177 <txFrequency+0x1>
    22f6:	20 93 76 01 	sts	0x0176, r18	; 0x800176 <txFrequency>
    22fa:	e8 cf       	rjmp	.-48     	; 0x22cc <main+0x644>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:581
    if (key == -1) {
      if (txFrequency < 640)  // If less than 64 MHz
        txFrequency = 1080;
      else
        txFrequency -= STEP_FREQ;
    } else if (key == 1) {
    22fc:	81 30       	cpi	r24, 0x01	; 1
    22fe:	31 f7       	brne	.-52     	; 0x22cc <main+0x644>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:582
      if (txFrequency > 1080)  // if more than 108 MHz
    2300:	29 33       	cpi	r18, 0x39	; 57
    2302:	f4 e0       	ldi	r31, 0x04	; 4
    2304:	3f 07       	cpc	r19, r31
    2306:	28 f0       	brcs	.+10     	; 0x2312 <main+0x68a>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:583
        txFrequency = 640;
    2308:	10 93 77 01 	sts	0x0177, r17	; 0x800177 <txFrequency+0x1>
    230c:	00 93 76 01 	sts	0x0176, r16	; 0x800176 <txFrequency>
    2310:	dd cf       	rjmp	.-70     	; 0x22cc <main+0x644>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:585
      else
        txFrequency += STEP_FREQ;
    2312:	2f 5f       	subi	r18, 0xFF	; 255
    2314:	3f 4f       	sbci	r19, 0xFF	; 255
    2316:	ed cf       	rjmp	.-38     	; 0x22f2 <main+0x66a>
doMenu():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:661
      lcd.setCursor(9, 1);
      lcd.print("<<");  // it just indicates the edit mode
      doFrequency();
      break;
    case 1:
      lcd.setCursor(9, 1);
    2318:	61 e0       	ldi	r22, 0x01	; 1
    231a:	89 e0       	ldi	r24, 0x09	; 9
    231c:	0e 94 93 03 	call	0x726	; 0x726 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.40]>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:662
      lcd.print("<<");  // it just indicates the edit mode
    2320:	86 ea       	ldi	r24, 0xA6	; 166
    2322:	92 e0       	ldi	r25, 0x02	; 2
    2324:	0e 94 ee 07 	call	0xfdc	; 0xfdc <Print::print(char const*) [clone .constprop.37]>
doPower():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:595
  }
  // menuLevel = 0;
}
// // Processes the change to a new power (PWM duty cycle)
void doPower() {
  showPower();
    2328:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <showPower()>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:596
  int8_t key = browseParameter();
    232c:	0e 94 bd 05 	call	0xb7a	; 0xb7a <browseParameter()>
    2330:	90 91 78 01 	lds	r25, 0x0178	; 0x800178 <pwmPowerDuty>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:597
  while (key != BT_MENU_PRESSED) {
    2334:	82 30       	cpi	r24, 0x02	; 2
    2336:	19 f1       	breq	.+70     	; 0x237e <main+0x6f6>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:598
    if (key == ENCODER_LEFT) {
    2338:	8f 3f       	cpi	r24, 0xFF	; 255
    233a:	71 f4       	brne	.+28     	; 0x2358 <main+0x6d0>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:599
      if (pwmPowerDuty >= 25)
    233c:	99 31       	cpi	r25, 0x19	; 25
    233e:	20 f0       	brcs	.+8      	; 0x2348 <main+0x6c0>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:600
        pwmPowerDuty -= pwmDutyStep;
    2340:	99 51       	subi	r25, 0x19	; 25
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:605
      else
        pwmPowerDuty = 0;
    } else if (key == ENCODER_RIGHT) {
      if (pwmPowerDuty <= 225)
        pwmPowerDuty += pwmDutyStep;
    2342:	90 93 78 01 	sts	0x0178, r25	; 0x800178 <pwmPowerDuty>
    2346:	02 c0       	rjmp	.+4      	; 0x234c <main+0x6c4>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:602
  while (key != BT_MENU_PRESSED) {
    if (key == ENCODER_LEFT) {
      if (pwmPowerDuty >= 25)
        pwmPowerDuty -= pwmDutyStep;
      else
        pwmPowerDuty = 0;
    2348:	10 92 78 01 	sts	0x0178, r1	; 0x800178 <pwmPowerDuty>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:609
      if (pwmPowerDuty <= 225)
        pwmPowerDuty += pwmDutyStep;
      else
        pwmPowerDuty = 255;
    }
    analogWrite(PWM_PA, pwmPowerDuty);
    234c:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <pwmPowerDuty>
    2350:	90 e0       	ldi	r25, 0x00	; 0
    2352:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <analogWrite.constprop.18>
    2356:	e8 cf       	rjmp	.-48     	; 0x2328 <main+0x6a0>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:603
    if (key == ENCODER_LEFT) {
      if (pwmPowerDuty >= 25)
        pwmPowerDuty -= pwmDutyStep;
      else
        pwmPowerDuty = 0;
    } else if (key == ENCODER_RIGHT) {
    2358:	81 30       	cpi	r24, 0x01	; 1
    235a:	c1 f7       	brne	.-16     	; 0x234c <main+0x6c4>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:604
      if (pwmPowerDuty <= 225)
    235c:	92 3e       	cpi	r25, 0xE2	; 226
    235e:	10 f4       	brcc	.+4      	; 0x2364 <main+0x6dc>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:605
        pwmPowerDuty += pwmDutyStep;
    2360:	97 5e       	subi	r25, 0xE7	; 231
    2362:	ef cf       	rjmp	.-34     	; 0x2342 <main+0x6ba>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:607
      else
        pwmPowerDuty = 255;
    2364:	80 92 78 01 	sts	0x0178, r8	; 0x800178 <pwmPowerDuty>
    2368:	f1 cf       	rjmp	.-30     	; 0x234c <main+0x6c4>
doMenu():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:666
      lcd.setCursor(9, 1);
      lcd.print("<<");  // it just indicates the edit mode
      doPower();
      break;
    case 2:
      runAction([](uint8_t value) {tx.setTxMono(value);}, &keyValue[idxMenu], 1, 0, 1);
    236a:	bc 9e       	mul	r11, r28
    236c:	b0 01       	movw	r22, r0
    236e:	11 24       	eor	r1, r1
    2370:	67 58       	subi	r22, 0x87	; 135
    2372:	7e 4f       	sbci	r23, 0xFE	; 254
    2374:	41 e0       	ldi	r20, 0x01	; 1
    2376:	82 ef       	ldi	r24, 0xF2	; 242
    2378:	96 e0       	ldi	r25, 0x06	; 6
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:690
      break;
    case 9:
      runAction([](uint8_t value) {tx.setTxFrequencyDerivation(value);},&keyValue[idxMenu], 1, 0, 5);
      break;
    case 10:
      runAction([](uint8_t value) {tx.setTxInputBufferGain(value);}, &keyValue[idxMenu], 1, 0, 5);
    237a:	0e 94 16 08 	call	0x102c	; 0x102c <runAction(void (*)(unsigned char), KeyValue*, unsigned char, unsigned char, unsigned char) [clone .constprop.1]>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:702
      return 0;
      break;
    default:
      break;
  }
  enablePWM(pwmPowerDuty);          // Turn the PWM on again.
    237e:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <pwmPowerDuty>
    2382:	0e 94 c7 05 	call	0xb8e	; 0xb8e <enablePWM(unsigned char)>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:703
  saveAllTransmitterInformation();  // Saves the current modified data to the EEPROM
    2386:	0e 94 ba 08 	call	0x1174	; 0x1174 <saveAllTransmitterInformation()>
main():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:704
  return 1;
    238a:	81 e0       	ldi	r24, 0x01	; 1
    238c:	56 c0       	rjmp	.+172    	; 0x243a <main+0x7b2>
doMenu():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:669
      break;
    case 2:
      runAction([](uint8_t value) {tx.setTxMono(value);}, &keyValue[idxMenu], 1, 0, 1);
      break;
    case 3:
      runAction([](uint8_t value) {tx.setPreEmphasis(value);},&keyValue[idxMenu], 1, 0, 1);
    238e:	bc 9e       	mul	r11, r28
    2390:	b0 01       	movw	r22, r0
    2392:	11 24       	eor	r1, r1
    2394:	67 58       	subi	r22, 0x87	; 135
    2396:	7e 4f       	sbci	r23, 0xFE	; 254
    2398:	41 e0       	ldi	r20, 0x01	; 1
    239a:	8b ec       	ldi	r24, 0xCB	; 203
    239c:	96 e0       	ldi	r25, 0x06	; 6
    239e:	ed cf       	rjmp	.-38     	; 0x237a <main+0x6f2>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:672
      break;
    case 4:
      runAction([](uint8_t value) {tx.rdsTxEnable(value);}, &keyValue[idxMenu], 1, 0, 1);
    23a0:	bc 9e       	mul	r11, r28
    23a2:	b0 01       	movw	r22, r0
    23a4:	11 24       	eor	r1, r1
    23a6:	67 58       	subi	r22, 0x87	; 135
    23a8:	7e 4f       	sbci	r23, 0xFE	; 254
    23aa:	41 e0       	ldi	r20, 0x01	; 1
    23ac:	89 ed       	ldi	r24, 0xD9	; 217
    23ae:	96 e0       	ldi	r25, 0x06	; 6
    23b0:	e4 cf       	rjmp	.-56     	; 0x237a <main+0x6f2>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:675
      break;
    case 5:
      runAction([](uint8_t value) {tx.setTxInputImpedance(value);}, &keyValue[idxMenu], 1, 0, 3);
    23b2:	bc 9e       	mul	r11, r28
    23b4:	b0 01       	movw	r22, r0
    23b6:	11 24       	eor	r1, r1
    23b8:	67 58       	subi	r22, 0x87	; 135
    23ba:	7e 4f       	sbci	r23, 0xFE	; 254
    23bc:	43 e0       	ldi	r20, 0x03	; 3
    23be:	82 e7       	ldi	r24, 0x72	; 114
    23c0:	96 e0       	ldi	r25, 0x06	; 6
    23c2:	db cf       	rjmp	.-74     	; 0x237a <main+0x6f2>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:678
      break;
    case 6:
      runAction([](uint8_t value) {tx.setTxSoftClippingEnable(value);}, &keyValue[idxMenu], 1, 0, 1);
    23c4:	bc 9e       	mul	r11, r28
    23c6:	b0 01       	movw	r22, r0
    23c8:	11 24       	eor	r1, r1
    23ca:	67 58       	subi	r22, 0x87	; 135
    23cc:	7e 4f       	sbci	r23, 0xFE	; 254
    23ce:	41 e0       	ldi	r20, 0x01	; 1
    23d0:	8d e9       	ldi	r24, 0x9D	; 157
    23d2:	96 e0       	ldi	r25, 0x06	; 6
    23d4:	d2 cf       	rjmp	.-92     	; 0x237a <main+0x6f2>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:681
      break;
    case 7:
      runAction([](uint8_t value) {tx.setTxSoftClipThreshold(value);},&keyValue[idxMenu], 1, 0, 3);
    23d6:	bc 9e       	mul	r11, r28
    23d8:	b0 01       	movw	r22, r0
    23da:	11 24       	eor	r1, r1
    23dc:	67 58       	subi	r22, 0x87	; 135
    23de:	7e 4f       	sbci	r23, 0xFE	; 254
    23e0:	43 e0       	ldi	r20, 0x03	; 3
    23e2:	87 eb       	ldi	r24, 0xB7	; 183
    23e4:	96 e0       	ldi	r25, 0x06	; 6
    23e6:	c9 cf       	rjmp	.-110    	; 0x237a <main+0x6f2>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:684
      break;
    case 8:
      runAction([](uint8_t value) {tx.setTxPilotGain(value);}, &keyValue[idxMenu], 1, 0, 3);
    23e8:	bc 9e       	mul	r11, r28
    23ea:	b0 01       	movw	r22, r0
    23ec:	11 24       	eor	r1, r1
    23ee:	67 58       	subi	r22, 0x87	; 135
    23f0:	7e 4f       	sbci	r23, 0xFE	; 254
    23f2:	43 e0       	ldi	r20, 0x03	; 3
    23f4:	84 e8       	ldi	r24, 0x84	; 132
    23f6:	96 e0       	ldi	r25, 0x06	; 6
    23f8:	c0 cf       	rjmp	.-128    	; 0x237a <main+0x6f2>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:687
      break;
    case 9:
      runAction([](uint8_t value) {tx.setTxFrequencyDerivation(value);},&keyValue[idxMenu], 1, 0, 5);
    23fa:	bc 9e       	mul	r11, r28
    23fc:	b0 01       	movw	r22, r0
    23fe:	11 24       	eor	r1, r1
    2400:	67 58       	subi	r22, 0x87	; 135
    2402:	7e 4f       	sbci	r23, 0xFE	; 254
    2404:	45 e0       	ldi	r20, 0x05	; 5
    2406:	87 eb       	ldi	r24, 0xB7	; 183
    2408:	95 e0       	ldi	r25, 0x05	; 5
    240a:	b7 cf       	rjmp	.-146    	; 0x237a <main+0x6f2>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:690
      break;
    case 10:
      runAction([](uint8_t value) {tx.setTxInputBufferGain(value);}, &keyValue[idxMenu], 1, 0, 5);
    240c:	bc 9e       	mul	r11, r28
    240e:	b0 01       	movw	r22, r0
    2410:	11 24       	eor	r1, r1
    2412:	67 58       	subi	r22, 0x87	; 135
    2414:	7e 4f       	sbci	r23, 0xFE	; 254
    2416:	45 e0       	ldi	r20, 0x05	; 5
    2418:	86 e0       	ldi	r24, 0x06	; 6
    241a:	97 e0       	ldi	r25, 0x07	; 7
    241c:	ae cf       	rjmp	.-164    	; 0x237a <main+0x6f2>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:693
      break;
    case 11:
      runAction([](uint8_t value) {tx.rdsSetFrequencyDerivation(value);}, &keyValue[idxMenu], 1, 0, 5);
    241e:	bc 9e       	mul	r11, r28
    2420:	b0 01       	movw	r22, r0
    2422:	11 24       	eor	r1, r1
    2424:	67 58       	subi	r22, 0x87	; 135
    2426:	7e 4f       	sbci	r23, 0xFE	; 254
    2428:	45 e0       	ldi	r20, 0x05	; 5
    242a:	85 e1       	ldi	r24, 0x15	; 21
    242c:	97 e0       	ldi	r25, 0x07	; 7
    242e:	a5 cf       	rjmp	.-182    	; 0x237a <main+0x6f2>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:696
      break;
    case 12:
      enablePWM(pwmPowerDuty);  // Turn the PWM on again.
    2430:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <pwmPowerDuty>
    2434:	0e 94 c7 05 	call	0xb8e	; 0xb8e <enablePWM(unsigned char)>
main():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:697
      return 0;
    2438:	80 e0       	ldi	r24, 0x00	; 0
loop():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/QN8066/QN8066/examples/03_LCD_16x2_AND_20x4/02_ATMEGA328/STANDALONE_ATMEGA328_ENCODER/STANDALONE_ATMEGA328_ENCODER.ino:821
      showMenu(menuIdx);
      key = browseParameter();
    }
    menuLevel = 2;
  } else if (menuLevel == 2) {
    menuLevel = doMenu(menuIdx);
    243a:	80 93 5d 05 	sts	0x055D, r24	; 0x80055d <menuLevel>
    243e:	b9 ce       	rjmp	.-654    	; 0x21b2 <main+0x52a>

00002440 <vfprintf>:
vfprintf():
    2440:	ab e0       	ldi	r26, 0x0B	; 11
    2442:	b0 e0       	ldi	r27, 0x00	; 0
    2444:	e6 e2       	ldi	r30, 0x26	; 38
    2446:	f2 e1       	ldi	r31, 0x12	; 18
    2448:	0c 94 b4 14 	jmp	0x2968	; 0x2968 <__prologue_saves__>
    244c:	7c 01       	movw	r14, r24
    244e:	3b 01       	movw	r6, r22
    2450:	8a 01       	movw	r16, r20
    2452:	fc 01       	movw	r30, r24
    2454:	17 82       	std	Z+7, r1	; 0x07
    2456:	16 82       	std	Z+6, r1	; 0x06
    2458:	83 81       	ldd	r24, Z+3	; 0x03
    245a:	81 ff       	sbrs	r24, 1
    245c:	c8 c1       	rjmp	.+912    	; 0x27ee <vfprintf+0x3ae>
    245e:	ce 01       	movw	r24, r28
    2460:	01 96       	adiw	r24, 0x01	; 1
    2462:	5c 01       	movw	r10, r24
    2464:	f7 01       	movw	r30, r14
    2466:	93 81       	ldd	r25, Z+3	; 0x03
    2468:	f3 01       	movw	r30, r6
    246a:	93 fd       	sbrc	r25, 3
    246c:	85 91       	lpm	r24, Z+
    246e:	93 ff       	sbrs	r25, 3
    2470:	81 91       	ld	r24, Z+
    2472:	3f 01       	movw	r6, r30
    2474:	88 23       	and	r24, r24
    2476:	09 f4       	brne	.+2      	; 0x247a <vfprintf+0x3a>
    2478:	53 c1       	rjmp	.+678    	; 0x2720 <vfprintf+0x2e0>
    247a:	85 32       	cpi	r24, 0x25	; 37
    247c:	39 f4       	brne	.+14     	; 0x248c <vfprintf+0x4c>
    247e:	93 fd       	sbrc	r25, 3
    2480:	85 91       	lpm	r24, Z+
    2482:	93 ff       	sbrs	r25, 3
    2484:	81 91       	ld	r24, Z+
    2486:	3f 01       	movw	r6, r30
    2488:	85 32       	cpi	r24, 0x25	; 37
    248a:	29 f4       	brne	.+10     	; 0x2496 <vfprintf+0x56>
    248c:	b7 01       	movw	r22, r14
    248e:	90 e0       	ldi	r25, 0x00	; 0
    2490:	0e 94 10 14 	call	0x2820	; 0x2820 <fputc>
    2494:	e7 cf       	rjmp	.-50     	; 0x2464 <vfprintf+0x24>
    2496:	91 2c       	mov	r9, r1
    2498:	21 2c       	mov	r2, r1
    249a:	31 2c       	mov	r3, r1
    249c:	ff e1       	ldi	r31, 0x1F	; 31
    249e:	f3 15       	cp	r31, r3
    24a0:	38 f0       	brcs	.+14     	; 0x24b0 <vfprintf+0x70>
    24a2:	8b 32       	cpi	r24, 0x2B	; 43
    24a4:	11 f1       	breq	.+68     	; 0x24ea <vfprintf+0xaa>
    24a6:	90 f4       	brcc	.+36     	; 0x24cc <vfprintf+0x8c>
    24a8:	80 32       	cpi	r24, 0x20	; 32
    24aa:	09 f1       	breq	.+66     	; 0x24ee <vfprintf+0xae>
    24ac:	83 32       	cpi	r24, 0x23	; 35
    24ae:	29 f1       	breq	.+74     	; 0x24fa <vfprintf+0xba>
    24b0:	37 fc       	sbrc	r3, 7
    24b2:	3c c0       	rjmp	.+120    	; 0x252c <vfprintf+0xec>
    24b4:	20 ed       	ldi	r18, 0xD0	; 208
    24b6:	28 0f       	add	r18, r24
    24b8:	2a 30       	cpi	r18, 0x0A	; 10
    24ba:	50 f5       	brcc	.+84     	; 0x2510 <vfprintf+0xd0>
    24bc:	36 fe       	sbrs	r3, 6
    24be:	20 c0       	rjmp	.+64     	; 0x2500 <vfprintf+0xc0>
    24c0:	8a e0       	ldi	r24, 0x0A	; 10
    24c2:	98 9e       	mul	r9, r24
    24c4:	20 0d       	add	r18, r0
    24c6:	11 24       	eor	r1, r1
    24c8:	92 2e       	mov	r9, r18
    24ca:	06 c0       	rjmp	.+12     	; 0x24d8 <vfprintf+0x98>
    24cc:	8d 32       	cpi	r24, 0x2D	; 45
    24ce:	91 f0       	breq	.+36     	; 0x24f4 <vfprintf+0xb4>
    24d0:	80 33       	cpi	r24, 0x30	; 48
    24d2:	71 f7       	brne	.-36     	; 0x24b0 <vfprintf+0x70>
    24d4:	68 94       	set
    24d6:	30 f8       	bld	r3, 0
    24d8:	f3 01       	movw	r30, r6
    24da:	93 fd       	sbrc	r25, 3
    24dc:	85 91       	lpm	r24, Z+
    24de:	93 ff       	sbrs	r25, 3
    24e0:	81 91       	ld	r24, Z+
    24e2:	3f 01       	movw	r6, r30
    24e4:	81 11       	cpse	r24, r1
    24e6:	da cf       	rjmp	.-76     	; 0x249c <vfprintf+0x5c>
    24e8:	21 c0       	rjmp	.+66     	; 0x252c <vfprintf+0xec>
    24ea:	68 94       	set
    24ec:	31 f8       	bld	r3, 1
    24ee:	68 94       	set
    24f0:	32 f8       	bld	r3, 2
    24f2:	f2 cf       	rjmp	.-28     	; 0x24d8 <vfprintf+0x98>
    24f4:	68 94       	set
    24f6:	33 f8       	bld	r3, 3
    24f8:	ef cf       	rjmp	.-34     	; 0x24d8 <vfprintf+0x98>
    24fa:	68 94       	set
    24fc:	34 f8       	bld	r3, 4
    24fe:	ec cf       	rjmp	.-40     	; 0x24d8 <vfprintf+0x98>
    2500:	ea e0       	ldi	r30, 0x0A	; 10
    2502:	2e 9e       	mul	r2, r30
    2504:	20 0d       	add	r18, r0
    2506:	11 24       	eor	r1, r1
    2508:	22 2e       	mov	r2, r18
    250a:	68 94       	set
    250c:	35 f8       	bld	r3, 5
    250e:	e4 cf       	rjmp	.-56     	; 0x24d8 <vfprintf+0x98>
    2510:	8e 32       	cpi	r24, 0x2E	; 46
    2512:	29 f4       	brne	.+10     	; 0x251e <vfprintf+0xde>
    2514:	36 fc       	sbrc	r3, 6
    2516:	04 c1       	rjmp	.+520    	; 0x2720 <vfprintf+0x2e0>
    2518:	68 94       	set
    251a:	36 f8       	bld	r3, 6
    251c:	dd cf       	rjmp	.-70     	; 0x24d8 <vfprintf+0x98>
    251e:	8c 36       	cpi	r24, 0x6C	; 108
    2520:	19 f4       	brne	.+6      	; 0x2528 <vfprintf+0xe8>
    2522:	68 94       	set
    2524:	37 f8       	bld	r3, 7
    2526:	d8 cf       	rjmp	.-80     	; 0x24d8 <vfprintf+0x98>
    2528:	88 36       	cpi	r24, 0x68	; 104
    252a:	b1 f2       	breq	.-84     	; 0x24d8 <vfprintf+0x98>
    252c:	98 2f       	mov	r25, r24
    252e:	9f 7d       	andi	r25, 0xDF	; 223
    2530:	95 54       	subi	r25, 0x45	; 69
    2532:	93 30       	cpi	r25, 0x03	; 3
    2534:	e0 f0       	brcs	.+56     	; 0x256e <vfprintf+0x12e>
    2536:	83 36       	cpi	r24, 0x63	; 99
    2538:	a1 f1       	breq	.+104    	; 0x25a2 <vfprintf+0x162>
    253a:	83 37       	cpi	r24, 0x73	; 115
    253c:	c1 f1       	breq	.+112    	; 0x25ae <vfprintf+0x16e>
    253e:	83 35       	cpi	r24, 0x53	; 83
    2540:	09 f0       	breq	.+2      	; 0x2544 <vfprintf+0x104>
    2542:	63 c0       	rjmp	.+198    	; 0x260a <vfprintf+0x1ca>
    2544:	28 01       	movw	r4, r16
    2546:	f2 e0       	ldi	r31, 0x02	; 2
    2548:	4f 0e       	add	r4, r31
    254a:	51 1c       	adc	r5, r1
    254c:	f8 01       	movw	r30, r16
    254e:	c0 80       	ld	r12, Z
    2550:	d1 80       	ldd	r13, Z+1	; 0x01
    2552:	69 2d       	mov	r22, r9
    2554:	70 e0       	ldi	r23, 0x00	; 0
    2556:	36 fc       	sbrc	r3, 6
    2558:	02 c0       	rjmp	.+4      	; 0x255e <vfprintf+0x11e>
    255a:	6f ef       	ldi	r22, 0xFF	; 255
    255c:	7f ef       	ldi	r23, 0xFF	; 255
    255e:	c6 01       	movw	r24, r12
    2560:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <strnlen_P>
    2564:	4c 01       	movw	r8, r24
    2566:	68 94       	set
    2568:	37 f8       	bld	r3, 7
    256a:	82 01       	movw	r16, r4
    256c:	0a c0       	rjmp	.+20     	; 0x2582 <vfprintf+0x142>
    256e:	0c 5f       	subi	r16, 0xFC	; 252
    2570:	1f 4f       	sbci	r17, 0xFF	; 255
    2572:	ff e3       	ldi	r31, 0x3F	; 63
    2574:	f9 83       	std	Y+1, r31	; 0x01
    2576:	88 24       	eor	r8, r8
    2578:	83 94       	inc	r8
    257a:	91 2c       	mov	r9, r1
    257c:	65 01       	movw	r12, r10
    257e:	e8 94       	clt
    2580:	37 f8       	bld	r3, 7
    2582:	33 fe       	sbrs	r3, 3
    2584:	2d c0       	rjmp	.+90     	; 0x25e0 <vfprintf+0x1a0>
    2586:	52 2c       	mov	r5, r2
    2588:	81 14       	cp	r8, r1
    258a:	91 04       	cpc	r9, r1
    258c:	71 f5       	brne	.+92     	; 0x25ea <vfprintf+0x1aa>
    258e:	55 20       	and	r5, r5
    2590:	09 f4       	brne	.+2      	; 0x2594 <vfprintf+0x154>
    2592:	68 cf       	rjmp	.-304    	; 0x2464 <vfprintf+0x24>
    2594:	b7 01       	movw	r22, r14
    2596:	80 e2       	ldi	r24, 0x20	; 32
    2598:	90 e0       	ldi	r25, 0x00	; 0
    259a:	0e 94 10 14 	call	0x2820	; 0x2820 <fputc>
    259e:	5a 94       	dec	r5
    25a0:	f6 cf       	rjmp	.-20     	; 0x258e <vfprintf+0x14e>
    25a2:	f8 01       	movw	r30, r16
    25a4:	80 81       	ld	r24, Z
    25a6:	89 83       	std	Y+1, r24	; 0x01
    25a8:	0e 5f       	subi	r16, 0xFE	; 254
    25aa:	1f 4f       	sbci	r17, 0xFF	; 255
    25ac:	e4 cf       	rjmp	.-56     	; 0x2576 <vfprintf+0x136>
    25ae:	28 01       	movw	r4, r16
    25b0:	f2 e0       	ldi	r31, 0x02	; 2
    25b2:	4f 0e       	add	r4, r31
    25b4:	51 1c       	adc	r5, r1
    25b6:	f8 01       	movw	r30, r16
    25b8:	c0 80       	ld	r12, Z
    25ba:	d1 80       	ldd	r13, Z+1	; 0x01
    25bc:	69 2d       	mov	r22, r9
    25be:	70 e0       	ldi	r23, 0x00	; 0
    25c0:	36 fc       	sbrc	r3, 6
    25c2:	02 c0       	rjmp	.+4      	; 0x25c8 <vfprintf+0x188>
    25c4:	6f ef       	ldi	r22, 0xFF	; 255
    25c6:	7f ef       	ldi	r23, 0xFF	; 255
    25c8:	c6 01       	movw	r24, r12
    25ca:	0e 94 05 14 	call	0x280a	; 0x280a <strnlen>
    25ce:	4c 01       	movw	r8, r24
    25d0:	82 01       	movw	r16, r4
    25d2:	d5 cf       	rjmp	.-86     	; 0x257e <vfprintf+0x13e>
    25d4:	b7 01       	movw	r22, r14
    25d6:	80 e2       	ldi	r24, 0x20	; 32
    25d8:	90 e0       	ldi	r25, 0x00	; 0
    25da:	0e 94 10 14 	call	0x2820	; 0x2820 <fputc>
    25de:	2a 94       	dec	r2
    25e0:	28 14       	cp	r2, r8
    25e2:	19 04       	cpc	r1, r9
    25e4:	09 f0       	breq	.+2      	; 0x25e8 <vfprintf+0x1a8>
    25e6:	b0 f7       	brcc	.-20     	; 0x25d4 <vfprintf+0x194>
    25e8:	ce cf       	rjmp	.-100    	; 0x2586 <vfprintf+0x146>
    25ea:	f6 01       	movw	r30, r12
    25ec:	37 fc       	sbrc	r3, 7
    25ee:	85 91       	lpm	r24, Z+
    25f0:	37 fe       	sbrs	r3, 7
    25f2:	81 91       	ld	r24, Z+
    25f4:	6f 01       	movw	r12, r30
    25f6:	b7 01       	movw	r22, r14
    25f8:	90 e0       	ldi	r25, 0x00	; 0
    25fa:	0e 94 10 14 	call	0x2820	; 0x2820 <fputc>
    25fe:	51 10       	cpse	r5, r1
    2600:	5a 94       	dec	r5
    2602:	f1 e0       	ldi	r31, 0x01	; 1
    2604:	8f 1a       	sub	r8, r31
    2606:	91 08       	sbc	r9, r1
    2608:	bf cf       	rjmp	.-130    	; 0x2588 <vfprintf+0x148>
    260a:	84 36       	cpi	r24, 0x64	; 100
    260c:	19 f0       	breq	.+6      	; 0x2614 <vfprintf+0x1d4>
    260e:	89 36       	cpi	r24, 0x69	; 105
    2610:	09 f0       	breq	.+2      	; 0x2614 <vfprintf+0x1d4>
    2612:	77 c0       	rjmp	.+238    	; 0x2702 <vfprintf+0x2c2>
    2614:	f8 01       	movw	r30, r16
    2616:	37 fe       	sbrs	r3, 7
    2618:	6b c0       	rjmp	.+214    	; 0x26f0 <vfprintf+0x2b0>
    261a:	60 81       	ld	r22, Z
    261c:	71 81       	ldd	r23, Z+1	; 0x01
    261e:	82 81       	ldd	r24, Z+2	; 0x02
    2620:	93 81       	ldd	r25, Z+3	; 0x03
    2622:	0c 5f       	subi	r16, 0xFC	; 252
    2624:	1f 4f       	sbci	r17, 0xFF	; 255
    2626:	f3 2d       	mov	r31, r3
    2628:	ff 76       	andi	r31, 0x6F	; 111
    262a:	3f 2e       	mov	r3, r31
    262c:	97 ff       	sbrs	r25, 7
    262e:	09 c0       	rjmp	.+18     	; 0x2642 <vfprintf+0x202>
    2630:	90 95       	com	r25
    2632:	80 95       	com	r24
    2634:	70 95       	com	r23
    2636:	61 95       	neg	r22
    2638:	7f 4f       	sbci	r23, 0xFF	; 255
    263a:	8f 4f       	sbci	r24, 0xFF	; 255
    263c:	9f 4f       	sbci	r25, 0xFF	; 255
    263e:	68 94       	set
    2640:	37 f8       	bld	r3, 7
    2642:	2a e0       	ldi	r18, 0x0A	; 10
    2644:	30 e0       	ldi	r19, 0x00	; 0
    2646:	a5 01       	movw	r20, r10
    2648:	0e 94 40 14 	call	0x2880	; 0x2880 <__ultoa_invert>
    264c:	c8 2e       	mov	r12, r24
    264e:	ca 18       	sub	r12, r10
    2650:	8c 2c       	mov	r8, r12
    2652:	43 2c       	mov	r4, r3
    2654:	36 fe       	sbrs	r3, 6
    2656:	0c c0       	rjmp	.+24     	; 0x2670 <vfprintf+0x230>
    2658:	e8 94       	clt
    265a:	40 f8       	bld	r4, 0
    265c:	c9 14       	cp	r12, r9
    265e:	40 f4       	brcc	.+16     	; 0x2670 <vfprintf+0x230>
    2660:	34 fe       	sbrs	r3, 4
    2662:	05 c0       	rjmp	.+10     	; 0x266e <vfprintf+0x22e>
    2664:	32 fc       	sbrc	r3, 2
    2666:	03 c0       	rjmp	.+6      	; 0x266e <vfprintf+0x22e>
    2668:	f3 2d       	mov	r31, r3
    266a:	fe 7e       	andi	r31, 0xEE	; 238
    266c:	4f 2e       	mov	r4, r31
    266e:	89 2c       	mov	r8, r9
    2670:	44 fe       	sbrs	r4, 4
    2672:	95 c0       	rjmp	.+298    	; 0x279e <vfprintf+0x35e>
    2674:	fe 01       	movw	r30, r28
    2676:	ec 0d       	add	r30, r12
    2678:	f1 1d       	adc	r31, r1
    267a:	80 81       	ld	r24, Z
    267c:	80 33       	cpi	r24, 0x30	; 48
    267e:	09 f0       	breq	.+2      	; 0x2682 <vfprintf+0x242>
    2680:	87 c0       	rjmp	.+270    	; 0x2790 <vfprintf+0x350>
    2682:	24 2d       	mov	r18, r4
    2684:	29 7e       	andi	r18, 0xE9	; 233
    2686:	42 2e       	mov	r4, r18
    2688:	84 2d       	mov	r24, r4
    268a:	88 70       	andi	r24, 0x08	; 8
    268c:	58 2e       	mov	r5, r24
    268e:	43 fc       	sbrc	r4, 3
    2690:	95 c0       	rjmp	.+298    	; 0x27bc <vfprintf+0x37c>
    2692:	40 fe       	sbrs	r4, 0
    2694:	8f c0       	rjmp	.+286    	; 0x27b4 <vfprintf+0x374>
    2696:	9c 2c       	mov	r9, r12
    2698:	82 14       	cp	r8, r2
    269a:	18 f4       	brcc	.+6      	; 0x26a2 <vfprintf+0x262>
    269c:	2c 0c       	add	r2, r12
    269e:	92 2c       	mov	r9, r2
    26a0:	98 18       	sub	r9, r8
    26a2:	44 fe       	sbrs	r4, 4
    26a4:	91 c0       	rjmp	.+290    	; 0x27c8 <vfprintf+0x388>
    26a6:	b7 01       	movw	r22, r14
    26a8:	80 e3       	ldi	r24, 0x30	; 48
    26aa:	90 e0       	ldi	r25, 0x00	; 0
    26ac:	0e 94 10 14 	call	0x2820	; 0x2820 <fputc>
    26b0:	42 fe       	sbrs	r4, 2
    26b2:	09 c0       	rjmp	.+18     	; 0x26c6 <vfprintf+0x286>
    26b4:	88 e7       	ldi	r24, 0x78	; 120
    26b6:	90 e0       	ldi	r25, 0x00	; 0
    26b8:	41 fe       	sbrs	r4, 1
    26ba:	02 c0       	rjmp	.+4      	; 0x26c0 <vfprintf+0x280>
    26bc:	88 e5       	ldi	r24, 0x58	; 88
    26be:	90 e0       	ldi	r25, 0x00	; 0
    26c0:	b7 01       	movw	r22, r14
    26c2:	0e 94 10 14 	call	0x2820	; 0x2820 <fputc>
    26c6:	c9 14       	cp	r12, r9
    26c8:	08 f4       	brcc	.+2      	; 0x26cc <vfprintf+0x28c>
    26ca:	8a c0       	rjmp	.+276    	; 0x27e0 <vfprintf+0x3a0>
    26cc:	ca 94       	dec	r12
    26ce:	d1 2c       	mov	r13, r1
    26d0:	9f ef       	ldi	r25, 0xFF	; 255
    26d2:	c9 1a       	sub	r12, r25
    26d4:	d9 0a       	sbc	r13, r25
    26d6:	ca 0c       	add	r12, r10
    26d8:	db 1c       	adc	r13, r11
    26da:	f6 01       	movw	r30, r12
    26dc:	82 91       	ld	r24, -Z
    26de:	6f 01       	movw	r12, r30
    26e0:	b7 01       	movw	r22, r14
    26e2:	90 e0       	ldi	r25, 0x00	; 0
    26e4:	0e 94 10 14 	call	0x2820	; 0x2820 <fputc>
    26e8:	ac 14       	cp	r10, r12
    26ea:	bd 04       	cpc	r11, r13
    26ec:	b1 f7       	brne	.-20     	; 0x26da <vfprintf+0x29a>
    26ee:	4f cf       	rjmp	.-354    	; 0x258e <vfprintf+0x14e>
    26f0:	60 81       	ld	r22, Z
    26f2:	71 81       	ldd	r23, Z+1	; 0x01
    26f4:	07 2e       	mov	r0, r23
    26f6:	00 0c       	add	r0, r0
    26f8:	88 0b       	sbc	r24, r24
    26fa:	99 0b       	sbc	r25, r25
    26fc:	0e 5f       	subi	r16, 0xFE	; 254
    26fe:	1f 4f       	sbci	r17, 0xFF	; 255
    2700:	92 cf       	rjmp	.-220    	; 0x2626 <vfprintf+0x1e6>
    2702:	d3 2c       	mov	r13, r3
    2704:	e8 94       	clt
    2706:	d4 f8       	bld	r13, 4
    2708:	2a e0       	ldi	r18, 0x0A	; 10
    270a:	30 e0       	ldi	r19, 0x00	; 0
    270c:	85 37       	cpi	r24, 0x75	; 117
    270e:	39 f1       	breq	.+78     	; 0x275e <vfprintf+0x31e>
    2710:	23 2d       	mov	r18, r3
    2712:	29 7f       	andi	r18, 0xF9	; 249
    2714:	d2 2e       	mov	r13, r18
    2716:	8f 36       	cpi	r24, 0x6F	; 111
    2718:	01 f1       	breq	.+64     	; 0x275a <vfprintf+0x31a>
    271a:	48 f4       	brcc	.+18     	; 0x272e <vfprintf+0x2ee>
    271c:	88 35       	cpi	r24, 0x58	; 88
    271e:	a9 f0       	breq	.+42     	; 0x274a <vfprintf+0x30a>
    2720:	f7 01       	movw	r30, r14
    2722:	86 81       	ldd	r24, Z+6	; 0x06
    2724:	97 81       	ldd	r25, Z+7	; 0x07
    2726:	2b 96       	adiw	r28, 0x0b	; 11
    2728:	e2 e1       	ldi	r30, 0x12	; 18
    272a:	0c 94 d0 14 	jmp	0x29a0	; 0x29a0 <__epilogue_restores__>
    272e:	80 37       	cpi	r24, 0x70	; 112
    2730:	49 f0       	breq	.+18     	; 0x2744 <vfprintf+0x304>
    2732:	88 37       	cpi	r24, 0x78	; 120
    2734:	a9 f7       	brne	.-22     	; 0x2720 <vfprintf+0x2e0>
    2736:	d4 fe       	sbrs	r13, 4
    2738:	02 c0       	rjmp	.+4      	; 0x273e <vfprintf+0x2fe>
    273a:	68 94       	set
    273c:	d2 f8       	bld	r13, 2
    273e:	20 e1       	ldi	r18, 0x10	; 16
    2740:	30 e0       	ldi	r19, 0x00	; 0
    2742:	0d c0       	rjmp	.+26     	; 0x275e <vfprintf+0x31e>
    2744:	68 94       	set
    2746:	d4 f8       	bld	r13, 4
    2748:	f6 cf       	rjmp	.-20     	; 0x2736 <vfprintf+0x2f6>
    274a:	34 fe       	sbrs	r3, 4
    274c:	03 c0       	rjmp	.+6      	; 0x2754 <vfprintf+0x314>
    274e:	82 2f       	mov	r24, r18
    2750:	86 60       	ori	r24, 0x06	; 6
    2752:	d8 2e       	mov	r13, r24
    2754:	20 e1       	ldi	r18, 0x10	; 16
    2756:	32 e0       	ldi	r19, 0x02	; 2
    2758:	02 c0       	rjmp	.+4      	; 0x275e <vfprintf+0x31e>
    275a:	28 e0       	ldi	r18, 0x08	; 8
    275c:	30 e0       	ldi	r19, 0x00	; 0
    275e:	f8 01       	movw	r30, r16
    2760:	d7 fe       	sbrs	r13, 7
    2762:	0f c0       	rjmp	.+30     	; 0x2782 <vfprintf+0x342>
    2764:	60 81       	ld	r22, Z
    2766:	71 81       	ldd	r23, Z+1	; 0x01
    2768:	82 81       	ldd	r24, Z+2	; 0x02
    276a:	93 81       	ldd	r25, Z+3	; 0x03
    276c:	0c 5f       	subi	r16, 0xFC	; 252
    276e:	1f 4f       	sbci	r17, 0xFF	; 255
    2770:	a5 01       	movw	r20, r10
    2772:	0e 94 40 14 	call	0x2880	; 0x2880 <__ultoa_invert>
    2776:	c8 2e       	mov	r12, r24
    2778:	ca 18       	sub	r12, r10
    277a:	3d 2c       	mov	r3, r13
    277c:	e8 94       	clt
    277e:	37 f8       	bld	r3, 7
    2780:	67 cf       	rjmp	.-306    	; 0x2650 <vfprintf+0x210>
    2782:	60 81       	ld	r22, Z
    2784:	71 81       	ldd	r23, Z+1	; 0x01
    2786:	90 e0       	ldi	r25, 0x00	; 0
    2788:	80 e0       	ldi	r24, 0x00	; 0
    278a:	0e 5f       	subi	r16, 0xFE	; 254
    278c:	1f 4f       	sbci	r17, 0xFF	; 255
    278e:	f0 cf       	rjmp	.-32     	; 0x2770 <vfprintf+0x330>
    2790:	42 fc       	sbrc	r4, 2
    2792:	02 c0       	rjmp	.+4      	; 0x2798 <vfprintf+0x358>
    2794:	83 94       	inc	r8
    2796:	78 cf       	rjmp	.-272    	; 0x2688 <vfprintf+0x248>
    2798:	83 94       	inc	r8
    279a:	83 94       	inc	r8
    279c:	75 cf       	rjmp	.-278    	; 0x2688 <vfprintf+0x248>
    279e:	84 2d       	mov	r24, r4
    27a0:	86 78       	andi	r24, 0x86	; 134
    27a2:	09 f4       	brne	.+2      	; 0x27a6 <vfprintf+0x366>
    27a4:	71 cf       	rjmp	.-286    	; 0x2688 <vfprintf+0x248>
    27a6:	f6 cf       	rjmp	.-20     	; 0x2794 <vfprintf+0x354>
    27a8:	b7 01       	movw	r22, r14
    27aa:	80 e2       	ldi	r24, 0x20	; 32
    27ac:	90 e0       	ldi	r25, 0x00	; 0
    27ae:	0e 94 10 14 	call	0x2820	; 0x2820 <fputc>
    27b2:	83 94       	inc	r8
    27b4:	82 14       	cp	r8, r2
    27b6:	c0 f3       	brcs	.-16     	; 0x27a8 <vfprintf+0x368>
    27b8:	51 2c       	mov	r5, r1
    27ba:	73 cf       	rjmp	.-282    	; 0x26a2 <vfprintf+0x262>
    27bc:	52 2c       	mov	r5, r2
    27be:	58 18       	sub	r5, r8
    27c0:	82 14       	cp	r8, r2
    27c2:	08 f4       	brcc	.+2      	; 0x27c6 <vfprintf+0x386>
    27c4:	6e cf       	rjmp	.-292    	; 0x26a2 <vfprintf+0x262>
    27c6:	f8 cf       	rjmp	.-16     	; 0x27b8 <vfprintf+0x378>
    27c8:	84 2d       	mov	r24, r4
    27ca:	86 78       	andi	r24, 0x86	; 134
    27cc:	09 f4       	brne	.+2      	; 0x27d0 <vfprintf+0x390>
    27ce:	7b cf       	rjmp	.-266    	; 0x26c6 <vfprintf+0x286>
    27d0:	8b e2       	ldi	r24, 0x2B	; 43
    27d2:	41 fe       	sbrs	r4, 1
    27d4:	80 e2       	ldi	r24, 0x20	; 32
    27d6:	47 fc       	sbrc	r4, 7
    27d8:	8d e2       	ldi	r24, 0x2D	; 45
    27da:	b7 01       	movw	r22, r14
    27dc:	90 e0       	ldi	r25, 0x00	; 0
    27de:	71 cf       	rjmp	.-286    	; 0x26c2 <vfprintf+0x282>
    27e0:	b7 01       	movw	r22, r14
    27e2:	80 e3       	ldi	r24, 0x30	; 48
    27e4:	90 e0       	ldi	r25, 0x00	; 0
    27e6:	0e 94 10 14 	call	0x2820	; 0x2820 <fputc>
    27ea:	9a 94       	dec	r9
    27ec:	6c cf       	rjmp	.-296    	; 0x26c6 <vfprintf+0x286>
    27ee:	8f ef       	ldi	r24, 0xFF	; 255
    27f0:	9f ef       	ldi	r25, 0xFF	; 255
    27f2:	99 cf       	rjmp	.-206    	; 0x2726 <vfprintf+0x2e6>

000027f4 <strnlen_P>:
strnlen_P():
    27f4:	fc 01       	movw	r30, r24
    27f6:	05 90       	lpm	r0, Z+
    27f8:	61 50       	subi	r22, 0x01	; 1
    27fa:	70 40       	sbci	r23, 0x00	; 0
    27fc:	01 10       	cpse	r0, r1
    27fe:	d8 f7       	brcc	.-10     	; 0x27f6 <strnlen_P+0x2>
    2800:	80 95       	com	r24
    2802:	90 95       	com	r25
    2804:	8e 0f       	add	r24, r30
    2806:	9f 1f       	adc	r25, r31
    2808:	08 95       	ret

0000280a <strnlen>:
strnlen():
    280a:	fc 01       	movw	r30, r24
    280c:	61 50       	subi	r22, 0x01	; 1
    280e:	70 40       	sbci	r23, 0x00	; 0
    2810:	01 90       	ld	r0, Z+
    2812:	01 10       	cpse	r0, r1
    2814:	d8 f7       	brcc	.-10     	; 0x280c <strnlen+0x2>
    2816:	80 95       	com	r24
    2818:	90 95       	com	r25
    281a:	8e 0f       	add	r24, r30
    281c:	9f 1f       	adc	r25, r31
    281e:	08 95       	ret

00002820 <fputc>:
fputc():
    2820:	0f 93       	push	r16
    2822:	1f 93       	push	r17
    2824:	cf 93       	push	r28
    2826:	df 93       	push	r29
    2828:	18 2f       	mov	r17, r24
    282a:	09 2f       	mov	r16, r25
    282c:	eb 01       	movw	r28, r22
    282e:	8b 81       	ldd	r24, Y+3	; 0x03
    2830:	81 fd       	sbrc	r24, 1
    2832:	09 c0       	rjmp	.+18     	; 0x2846 <fputc+0x26>
    2834:	1f ef       	ldi	r17, 0xFF	; 255
    2836:	0f ef       	ldi	r16, 0xFF	; 255
    2838:	81 2f       	mov	r24, r17
    283a:	90 2f       	mov	r25, r16
    283c:	df 91       	pop	r29
    283e:	cf 91       	pop	r28
    2840:	1f 91       	pop	r17
    2842:	0f 91       	pop	r16
    2844:	08 95       	ret
    2846:	82 ff       	sbrs	r24, 2
    2848:	14 c0       	rjmp	.+40     	; 0x2872 <fputc+0x52>
    284a:	2e 81       	ldd	r18, Y+6	; 0x06
    284c:	3f 81       	ldd	r19, Y+7	; 0x07
    284e:	8c 81       	ldd	r24, Y+4	; 0x04
    2850:	9d 81       	ldd	r25, Y+5	; 0x05
    2852:	28 17       	cp	r18, r24
    2854:	39 07       	cpc	r19, r25
    2856:	3c f4       	brge	.+14     	; 0x2866 <fputc+0x46>
    2858:	e8 81       	ld	r30, Y
    285a:	f9 81       	ldd	r31, Y+1	; 0x01
    285c:	cf 01       	movw	r24, r30
    285e:	01 96       	adiw	r24, 0x01	; 1
    2860:	99 83       	std	Y+1, r25	; 0x01
    2862:	88 83       	st	Y, r24
    2864:	10 83       	st	Z, r17
    2866:	8e 81       	ldd	r24, Y+6	; 0x06
    2868:	9f 81       	ldd	r25, Y+7	; 0x07
    286a:	01 96       	adiw	r24, 0x01	; 1
    286c:	9f 83       	std	Y+7, r25	; 0x07
    286e:	8e 83       	std	Y+6, r24	; 0x06
    2870:	e3 cf       	rjmp	.-58     	; 0x2838 <fputc+0x18>
    2872:	e8 85       	ldd	r30, Y+8	; 0x08
    2874:	f9 85       	ldd	r31, Y+9	; 0x09
    2876:	81 2f       	mov	r24, r17
    2878:	09 95       	icall
    287a:	89 2b       	or	r24, r25
    287c:	a1 f3       	breq	.-24     	; 0x2866 <fputc+0x46>
    287e:	da cf       	rjmp	.-76     	; 0x2834 <fputc+0x14>

00002880 <__ultoa_invert>:
__ultoa_invert():
    2880:	fa 01       	movw	r30, r20
    2882:	aa 27       	eor	r26, r26
    2884:	28 30       	cpi	r18, 0x08	; 8
    2886:	51 f1       	breq	.+84     	; 0x28dc <__ultoa_invert+0x5c>
    2888:	20 31       	cpi	r18, 0x10	; 16
    288a:	81 f1       	breq	.+96     	; 0x28ec <__ultoa_invert+0x6c>
    288c:	e8 94       	clt
    288e:	6f 93       	push	r22
    2890:	6e 7f       	andi	r22, 0xFE	; 254
    2892:	6e 5f       	subi	r22, 0xFE	; 254
    2894:	7f 4f       	sbci	r23, 0xFF	; 255
    2896:	8f 4f       	sbci	r24, 0xFF	; 255
    2898:	9f 4f       	sbci	r25, 0xFF	; 255
    289a:	af 4f       	sbci	r26, 0xFF	; 255
    289c:	b1 e0       	ldi	r27, 0x01	; 1
    289e:	3e d0       	rcall	.+124    	; 0x291c <__ultoa_invert+0x9c>
    28a0:	b4 e0       	ldi	r27, 0x04	; 4
    28a2:	3c d0       	rcall	.+120    	; 0x291c <__ultoa_invert+0x9c>
    28a4:	67 0f       	add	r22, r23
    28a6:	78 1f       	adc	r23, r24
    28a8:	89 1f       	adc	r24, r25
    28aa:	9a 1f       	adc	r25, r26
    28ac:	a1 1d       	adc	r26, r1
    28ae:	68 0f       	add	r22, r24
    28b0:	79 1f       	adc	r23, r25
    28b2:	8a 1f       	adc	r24, r26
    28b4:	91 1d       	adc	r25, r1
    28b6:	a1 1d       	adc	r26, r1
    28b8:	6a 0f       	add	r22, r26
    28ba:	71 1d       	adc	r23, r1
    28bc:	81 1d       	adc	r24, r1
    28be:	91 1d       	adc	r25, r1
    28c0:	a1 1d       	adc	r26, r1
    28c2:	20 d0       	rcall	.+64     	; 0x2904 <__ultoa_invert+0x84>
    28c4:	09 f4       	brne	.+2      	; 0x28c8 <__ultoa_invert+0x48>
    28c6:	68 94       	set
    28c8:	3f 91       	pop	r19
    28ca:	2a e0       	ldi	r18, 0x0A	; 10
    28cc:	26 9f       	mul	r18, r22
    28ce:	11 24       	eor	r1, r1
    28d0:	30 19       	sub	r19, r0
    28d2:	30 5d       	subi	r19, 0xD0	; 208
    28d4:	31 93       	st	Z+, r19
    28d6:	de f6       	brtc	.-74     	; 0x288e <__ultoa_invert+0xe>
    28d8:	cf 01       	movw	r24, r30
    28da:	08 95       	ret
    28dc:	46 2f       	mov	r20, r22
    28de:	47 70       	andi	r20, 0x07	; 7
    28e0:	40 5d       	subi	r20, 0xD0	; 208
    28e2:	41 93       	st	Z+, r20
    28e4:	b3 e0       	ldi	r27, 0x03	; 3
    28e6:	0f d0       	rcall	.+30     	; 0x2906 <__ultoa_invert+0x86>
    28e8:	c9 f7       	brne	.-14     	; 0x28dc <__ultoa_invert+0x5c>
    28ea:	f6 cf       	rjmp	.-20     	; 0x28d8 <__ultoa_invert+0x58>
    28ec:	46 2f       	mov	r20, r22
    28ee:	4f 70       	andi	r20, 0x0F	; 15
    28f0:	40 5d       	subi	r20, 0xD0	; 208
    28f2:	4a 33       	cpi	r20, 0x3A	; 58
    28f4:	18 f0       	brcs	.+6      	; 0x28fc <__ultoa_invert+0x7c>
    28f6:	49 5d       	subi	r20, 0xD9	; 217
    28f8:	31 fd       	sbrc	r19, 1
    28fa:	40 52       	subi	r20, 0x20	; 32
    28fc:	41 93       	st	Z+, r20
    28fe:	02 d0       	rcall	.+4      	; 0x2904 <__ultoa_invert+0x84>
    2900:	a9 f7       	brne	.-22     	; 0x28ec <__ultoa_invert+0x6c>
    2902:	ea cf       	rjmp	.-44     	; 0x28d8 <__ultoa_invert+0x58>
    2904:	b4 e0       	ldi	r27, 0x04	; 4
    2906:	a6 95       	lsr	r26
    2908:	97 95       	ror	r25
    290a:	87 95       	ror	r24
    290c:	77 95       	ror	r23
    290e:	67 95       	ror	r22
    2910:	ba 95       	dec	r27
    2912:	c9 f7       	brne	.-14     	; 0x2906 <__ultoa_invert+0x86>
    2914:	00 97       	sbiw	r24, 0x00	; 0
    2916:	61 05       	cpc	r22, r1
    2918:	71 05       	cpc	r23, r1
    291a:	08 95       	ret
    291c:	9b 01       	movw	r18, r22
    291e:	ac 01       	movw	r20, r24
    2920:	0a 2e       	mov	r0, r26
    2922:	06 94       	lsr	r0
    2924:	57 95       	ror	r21
    2926:	47 95       	ror	r20
    2928:	37 95       	ror	r19
    292a:	27 95       	ror	r18
    292c:	ba 95       	dec	r27
    292e:	c9 f7       	brne	.-14     	; 0x2922 <__ultoa_invert+0xa2>
    2930:	62 0f       	add	r22, r18
    2932:	73 1f       	adc	r23, r19
    2934:	84 1f       	adc	r24, r20
    2936:	95 1f       	adc	r25, r21
    2938:	a0 1d       	adc	r26, r0
    293a:	08 95       	ret

0000293c <eeprom_read_byte>:
eeprom_read_byte():
    293c:	f9 99       	sbic	0x1f, 1	; 31
    293e:	fe cf       	rjmp	.-4      	; 0x293c <eeprom_read_byte>
    2940:	92 bd       	out	0x22, r25	; 34
    2942:	81 bd       	out	0x21, r24	; 33
    2944:	f8 9a       	sbi	0x1f, 0	; 31
    2946:	99 27       	eor	r25, r25
    2948:	80 b5       	in	r24, 0x20	; 32
    294a:	08 95       	ret

0000294c <eeprom_write_byte>:
eeprom_write_byte():
    294c:	26 2f       	mov	r18, r22

0000294e <eeprom_write_r18>:
    294e:	f9 99       	sbic	0x1f, 1	; 31
    2950:	fe cf       	rjmp	.-4      	; 0x294e <eeprom_write_r18>
    2952:	1f ba       	out	0x1f, r1	; 31
    2954:	92 bd       	out	0x22, r25	; 34
    2956:	81 bd       	out	0x21, r24	; 33
    2958:	20 bd       	out	0x20, r18	; 32
    295a:	0f b6       	in	r0, 0x3f	; 63
    295c:	f8 94       	cli
    295e:	fa 9a       	sbi	0x1f, 2	; 31
    2960:	f9 9a       	sbi	0x1f, 1	; 31
    2962:	0f be       	out	0x3f, r0	; 63
    2964:	01 96       	adiw	r24, 0x01	; 1
    2966:	08 95       	ret

00002968 <__prologue_saves__>:
__prologue_saves__():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2169
    2968:	2f 92       	push	r2
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2170
    296a:	3f 92       	push	r3
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2171
    296c:	4f 92       	push	r4
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2172
    296e:	5f 92       	push	r5
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2173
    2970:	6f 92       	push	r6
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2174
    2972:	7f 92       	push	r7
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2175
    2974:	8f 92       	push	r8
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2176
    2976:	9f 92       	push	r9
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2177
    2978:	af 92       	push	r10
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2178
    297a:	bf 92       	push	r11
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2179
    297c:	cf 92       	push	r12
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2180
    297e:	df 92       	push	r13
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2181
    2980:	ef 92       	push	r14
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2182
    2982:	ff 92       	push	r15
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2183
    2984:	0f 93       	push	r16
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2184
    2986:	1f 93       	push	r17
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2185
    2988:	cf 93       	push	r28
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2186
    298a:	df 93       	push	r29
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2200
    298c:	cd b7       	in	r28, 0x3d	; 61
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2201
    298e:	de b7       	in	r29, 0x3e	; 62
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2202
    2990:	ca 1b       	sub	r28, r26
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2203
    2992:	db 0b       	sbc	r29, r27
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2204
    2994:	0f b6       	in	r0, 0x3f	; 63
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2205
    2996:	f8 94       	cli
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2206
    2998:	de bf       	out	0x3e, r29	; 62
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2207
    299a:	0f be       	out	0x3f, r0	; 63
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2208
    299c:	cd bf       	out	0x3d, r28	; 61
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2211
    299e:	09 94       	ijmp

000029a0 <__epilogue_restores__>:
__epilogue_restores__():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2222
    29a0:	2a 88       	ldd	r2, Y+18	; 0x12
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2223
    29a2:	39 88       	ldd	r3, Y+17	; 0x11
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2224
    29a4:	48 88       	ldd	r4, Y+16	; 0x10
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2225
    29a6:	5f 84       	ldd	r5, Y+15	; 0x0f
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2226
    29a8:	6e 84       	ldd	r6, Y+14	; 0x0e
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2227
    29aa:	7d 84       	ldd	r7, Y+13	; 0x0d
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2228
    29ac:	8c 84       	ldd	r8, Y+12	; 0x0c
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2229
    29ae:	9b 84       	ldd	r9, Y+11	; 0x0b
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2230
    29b0:	aa 84       	ldd	r10, Y+10	; 0x0a
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2231
    29b2:	b9 84       	ldd	r11, Y+9	; 0x09
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2232
    29b4:	c8 84       	ldd	r12, Y+8	; 0x08
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2233
    29b6:	df 80       	ldd	r13, Y+7	; 0x07
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2234
    29b8:	ee 80       	ldd	r14, Y+6	; 0x06
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2235
    29ba:	fd 80       	ldd	r15, Y+5	; 0x05
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2236
    29bc:	0c 81       	ldd	r16, Y+4	; 0x04
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2237
    29be:	1b 81       	ldd	r17, Y+3	; 0x03
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2238
    29c0:	aa 81       	ldd	r26, Y+2	; 0x02
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2252
    29c2:	b9 81       	ldd	r27, Y+1	; 0x01
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2253
    29c4:	ce 0f       	add	r28, r30
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2254
    29c6:	d1 1d       	adc	r29, r1
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2255
    29c8:	0f b6       	in	r0, 0x3f	; 63
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2256
    29ca:	f8 94       	cli
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2257
    29cc:	de bf       	out	0x3e, r29	; 62
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2258
    29ce:	0f be       	out	0x3f, r0	; 63
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2259
    29d0:	cd bf       	out	0x3d, r28	; 61
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2260
    29d2:	ed 01       	movw	r28, r26
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2263
    29d4:	08 95       	ret

000029d6 <__udivmodhi4>:
__udivmodhi4():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1408
    29d6:	aa 1b       	sub	r26, r26
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1409
    29d8:	bb 1b       	sub	r27, r27
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1410
    29da:	51 e1       	ldi	r21, 0x11	; 17
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1411
    29dc:	07 c0       	rjmp	.+14     	; 0x29ec <__udivmodhi4_ep>

000029de <__udivmodhi4_loop>:
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1413
    29de:	aa 1f       	adc	r26, r26
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1414
    29e0:	bb 1f       	adc	r27, r27
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1415
    29e2:	a6 17       	cp	r26, r22
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1416
    29e4:	b7 07       	cpc	r27, r23
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1417
    29e6:	10 f0       	brcs	.+4      	; 0x29ec <__udivmodhi4_ep>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1418
    29e8:	a6 1b       	sub	r26, r22
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1419
    29ea:	b7 0b       	sbc	r27, r23

000029ec <__udivmodhi4_ep>:
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1421
    29ec:	88 1f       	adc	r24, r24
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1422
    29ee:	99 1f       	adc	r25, r25
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1423
    29f0:	5a 95       	dec	r21
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1424
    29f2:	a9 f7       	brne	.-22     	; 0x29de <__udivmodhi4_loop>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1425
    29f4:	80 95       	com	r24
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1426
    29f6:	90 95       	com	r25
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1428
    29f8:	bc 01       	movw	r22, r24
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1430
    29fa:	cd 01       	movw	r24, r26
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1432
    29fc:	08 95       	ret

000029fe <__divmodhi4>:
__divmodhi4():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1440
    29fe:	97 fb       	bst	r25, 7
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1441
    2a00:	07 2e       	mov	r0, r23
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1442
    2a02:	16 f4       	brtc	.+4      	; 0x2a08 <__divmodhi4+0xa>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1443
    2a04:	00 94       	com	r0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1444
    2a06:	07 d0       	rcall	.+14     	; 0x2a16 <__divmodhi4_neg1>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1446
    2a08:	77 fd       	sbrc	r23, 7
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1447
    2a0a:	09 d0       	rcall	.+18     	; 0x2a1e <__divmodhi4_neg2>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1448
    2a0c:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <__udivmodhi4>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1449
    2a10:	07 fc       	sbrc	r0, 7
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1450
    2a12:	05 d0       	rcall	.+10     	; 0x2a1e <__divmodhi4_neg2>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1451
    2a14:	3e f4       	brtc	.+14     	; 0x2a24 <__divmodhi4_exit>

00002a16 <__divmodhi4_neg1>:
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1454
    2a16:	90 95       	com	r25
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1455
    2a18:	81 95       	neg	r24
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1456
    2a1a:	9f 4f       	sbci	r25, 0xFF	; 255
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1457
    2a1c:	08 95       	ret

00002a1e <__divmodhi4_neg2>:
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1460
    2a1e:	70 95       	com	r23
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1461
    2a20:	61 95       	neg	r22
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1462
    2a22:	7f 4f       	sbci	r23, 0xFF	; 255

00002a24 <__divmodhi4_exit>:
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1464
    2a24:	08 95       	ret

00002a26 <__udivmodsi4>:
__udivmodsi4():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
    2a26:	a1 e2       	ldi	r26, 0x21	; 33
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
    2a28:	1a 2e       	mov	r1, r26
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
    2a2a:	aa 1b       	sub	r26, r26
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
    2a2c:	bb 1b       	sub	r27, r27
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
    2a2e:	fd 01       	movw	r30, r26
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
    2a30:	0d c0       	rjmp	.+26     	; 0x2a4c <__udivmodsi4_ep>

00002a32 <__udivmodsi4_loop>:
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
    2a32:	aa 1f       	adc	r26, r26
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
    2a34:	bb 1f       	adc	r27, r27
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
    2a36:	ee 1f       	adc	r30, r30
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
    2a38:	ff 1f       	adc	r31, r31
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
    2a3a:	a2 17       	cp	r26, r18
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
    2a3c:	b3 07       	cpc	r27, r19
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
    2a3e:	e4 07       	cpc	r30, r20
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
    2a40:	f5 07       	cpc	r31, r21
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
    2a42:	20 f0       	brcs	.+8      	; 0x2a4c <__udivmodsi4_ep>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
    2a44:	a2 1b       	sub	r26, r18
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
    2a46:	b3 0b       	sbc	r27, r19
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
    2a48:	e4 0b       	sbc	r30, r20
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
    2a4a:	f5 0b       	sbc	r31, r21

00002a4c <__udivmodsi4_ep>:
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
    2a4c:	66 1f       	adc	r22, r22
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
    2a4e:	77 1f       	adc	r23, r23
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
    2a50:	88 1f       	adc	r24, r24
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
    2a52:	99 1f       	adc	r25, r25
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
    2a54:	1a 94       	dec	r1
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
    2a56:	69 f7       	brne	.-38     	; 0x2a32 <__udivmodsi4_loop>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
    2a58:	60 95       	com	r22
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
    2a5a:	70 95       	com	r23
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
    2a5c:	80 95       	com	r24
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
    2a5e:	90 95       	com	r25
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
    2a60:	9b 01       	movw	r18, r22
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
    2a62:	ac 01       	movw	r20, r24
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
    2a64:	bd 01       	movw	r22, r26
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
    2a66:	cf 01       	movw	r24, r30
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
    2a68:	08 95       	ret

00002a6a <__tablejump2__>:
__tablejump2__():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    2a6a:	ee 0f       	add	r30, r30
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    2a6c:	ff 1f       	adc	r31, r31
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2328
    2a6e:	05 90       	lpm	r0, Z+
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2329
    2a70:	f4 91       	lpm	r31, Z
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2330
    2a72:	e0 2d       	mov	r30, r0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2331
    2a74:	09 94       	ijmp

00002a76 <strncpy>:
strncpy():
    2a76:	fb 01       	movw	r30, r22
    2a78:	dc 01       	movw	r26, r24
    2a7a:	41 50       	subi	r20, 0x01	; 1
    2a7c:	50 40       	sbci	r21, 0x00	; 0
    2a7e:	48 f0       	brcs	.+18     	; 0x2a92 <strncpy+0x1c>
    2a80:	01 90       	ld	r0, Z+
    2a82:	0d 92       	st	X+, r0
    2a84:	00 20       	and	r0, r0
    2a86:	c9 f7       	brne	.-14     	; 0x2a7a <strncpy+0x4>
    2a88:	01 c0       	rjmp	.+2      	; 0x2a8c <strncpy+0x16>
    2a8a:	1d 92       	st	X+, r1
    2a8c:	41 50       	subi	r20, 0x01	; 1
    2a8e:	50 40       	sbci	r21, 0x00	; 0
    2a90:	e0 f7       	brcc	.-8      	; 0x2a8a <strncpy+0x14>
    2a92:	08 95       	ret

00002a94 <sprintf>:
sprintf():
    2a94:	ae e0       	ldi	r26, 0x0E	; 14
    2a96:	b0 e0       	ldi	r27, 0x00	; 0
    2a98:	e0 e5       	ldi	r30, 0x50	; 80
    2a9a:	f5 e1       	ldi	r31, 0x15	; 21
    2a9c:	0c 94 c2 14 	jmp	0x2984	; 0x2984 <__prologue_saves__+0x1c>
    2aa0:	0d 89       	ldd	r16, Y+21	; 0x15
    2aa2:	1e 89       	ldd	r17, Y+22	; 0x16
    2aa4:	86 e0       	ldi	r24, 0x06	; 6
    2aa6:	8c 83       	std	Y+4, r24	; 0x04
    2aa8:	1a 83       	std	Y+2, r17	; 0x02
    2aaa:	09 83       	std	Y+1, r16	; 0x01
    2aac:	8f ef       	ldi	r24, 0xFF	; 255
    2aae:	9f e7       	ldi	r25, 0x7F	; 127
    2ab0:	9e 83       	std	Y+6, r25	; 0x06
    2ab2:	8d 83       	std	Y+5, r24	; 0x05
    2ab4:	ae 01       	movw	r20, r28
    2ab6:	47 5e       	subi	r20, 0xE7	; 231
    2ab8:	5f 4f       	sbci	r21, 0xFF	; 255
    2aba:	6f 89       	ldd	r22, Y+23	; 0x17
    2abc:	78 8d       	ldd	r23, Y+24	; 0x18
    2abe:	ce 01       	movw	r24, r28
    2ac0:	01 96       	adiw	r24, 0x01	; 1
    2ac2:	0e 94 20 12 	call	0x2440	; 0x2440 <vfprintf>
    2ac6:	2f 81       	ldd	r18, Y+7	; 0x07
    2ac8:	38 85       	ldd	r19, Y+8	; 0x08
    2aca:	02 0f       	add	r16, r18
    2acc:	13 1f       	adc	r17, r19
    2ace:	f8 01       	movw	r30, r16
    2ad0:	10 82       	st	Z, r1
    2ad2:	2e 96       	adiw	r28, 0x0e	; 14
    2ad4:	e4 e0       	ldi	r30, 0x04	; 4
    2ad6:	0c 94 de 14 	jmp	0x29bc	; 0x29bc <__epilogue_restores__+0x1c>

00002ada <_exit>:
exit():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    2ada:	f8 94       	cli

00002adc <__stop_program>:
__stop_program():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    2adc:	ff cf       	rjmp	.-2      	; 0x2adc <__stop_program>
